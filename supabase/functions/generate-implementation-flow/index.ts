import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';
import { getSupabaseServiceClient } from '../_shared/supabase-client.ts';

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { solutionId, userId } = await req.json();
    console.log('[FLOW-GEN] Gerando fluxo para solu√ß√£o:', solutionId);

    const supabase = getSupabaseServiceClient();

    // Buscar solu√ß√£o completa com perguntas e respostas
    const { data: solution, error: solutionError } = await supabase
      .from('ai_generated_solutions')
      .select('*')
      .eq('id', solutionId)
      .single();

    if (solutionError) throw solutionError;

    // Extrair perguntas e respostas da valida√ß√£o
    const questionsAsked = solution.questions_asked || [];
    const userAnswers = solution.user_answers || [];
    
    console.log(`[FLOW-GEN] üìù Perguntas enviadas: ${questionsAsked.length}`);
    console.log('[FLOW-GEN] üèóÔ∏è Framework Rafael Milagre inclu√≠do no contexto');

    // Buscar framework_mapping para contexto das ferramentas
    const frameworkData = solution.framework_mapping;
    
    // Extrair ferramentas dos 4 pilares
    const automationTools = frameworkData?.quadrant1_automation?.tool_names || [];
    const aiTools = frameworkData?.quadrant2_ai?.tool_names || [];
    const dataTools = frameworkData?.quadrant3_data?.tool_names || [];
    const interfaceTools = frameworkData?.quadrant4_interface?.tool_names || [];
    
    const allTools = [...automationTools, ...aiTools, ...dataTools, ...interfaceTools]
      .filter(Boolean)
      .join(', ') || 'Ferramentas n√£o especificadas';

    // Montar prompt focado em neg√≥cio e no-code
    const systemPrompt = `Voc√™ √© um CONSULTOR DE TRANSFORMA√á√ÉO DIGITAL especializado em guiar empres√°rios e l√≠deres a implementarem solu√ß√µes de IA usando ferramentas NO-CODE.

Seu p√∫blico N√ÉO √© programador. S√£o empres√°rios que querem implementar IA de forma pr√°tica.

üèóÔ∏è FRAMEWORK DE IMPLEMENTA√á√ÉO (by Rafael Milagre):

PRIORIDADE 1 - DESENVOLVIMENTO DE PLATAFORMA:
üöÄ Lovable (https://lovable.dev)
   - Quando usar: Aplica√ß√µes web completas, dashboards, portais, sistemas internos, plataformas personalizadas
   - Capacidades: Frontend completo, autentica√ß√£o de usu√°rios, banco de dados (Supabase), APIs customizadas, integra√ß√µes
   - Vantagens: C√≥digo pr√≥prio, escal√°vel, personaliz√°vel, sem depend√™ncias externas, solu√ß√£o propriet√°ria
   - Exemplos: Plataforma de atendimento com IA, sistema de gest√£o interna, portal de vendas, dashboard de analytics

PRIORIDADE 2 - AUTOMA√á√ÉO E INTEGRA√á√ÉO:
üîÑ Make, n8n, Zapier
   - Quando usar: Conectar ferramentas existentes, webhooks, integra√ß√µes pontuais, fluxos entre aplicativos
   - Capacidades: Fluxos automatizados entre aplicativos, gatilhos autom√°ticos, sincroniza√ß√£o de dados
   - Limita√ß√µes: Dependente de ferramentas externas, menos personaliz√°vel, custos recorrentes por automa√ß√£o

PRIORIDADE 3 - BANCOS DE DADOS:
üìä Supabase (integrado ao Lovable), Airtable, Google Sheets, Notion Database, Firebase

PRIORIDADE 4 - INTELIG√äNCIA ARTIFICIAL:
üß† APIs: OpenAI (GPT-5, DALL-E, Whisper), Anthropic (Claude), Google (Gemini), Grok, Deepseek, Manus
   Plataformas: ChatGPT, MidJourney, Stable Diffusion, ElevenLabs (voz), GPT-4 Vision

PRIORIDADE 5 - INTERFACES DE COMUNICA√á√ÉO:
üíª WhatsApp, CRM, ERP, Gmail, chatbot, Discord, Twilio, Site corporativo

Use essa hierarquia para priorizar ferramentas adequadas ao contexto da solu√ß√£o.

REGRAS MERMAID (CR√çTICAS - SIGA EXATAMENTE):
1. Use APENAS "graph TD" na primeira linha
2. IDs devem ser APENAS letras mai√∫sculas √∫nicas (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)
3. Textos descritivos SEMPRE entre colchetes [ ]
4. Setas SEMPRE com espa√ßos: " --> " (nunca "-->")
5. M√°ximo 15 n√≥s no total
6. Textos CURTOS: m√°ximo 40 caracteres por n√≥
7. Decis√µes (if/else) usam chaves { } e labels nas setas: -->|Sim| e -->|N√£o|
8. NUNCA use: underscores, h√≠fens, espa√ßos ou n√∫meros em IDs
9. NUNCA quebre uma defini√ß√£o de n√≥ em m√∫ltiplas linhas
10. Cada linha deve ter EXATAMENTE: ID[Texto] --> ID2[Texto] ou ID{Decis√£o?}
11. üö® CR√çTICO - PAR√äNTESES E V√çRGULAS: NUNCA use par√™nteses ( ) ou v√≠rgulas , dentro dos labels [ ]
    - ‚ùå ERRADO: [Criar Contas (Make, ManyChat)]
    - ‚úÖ CORRETO: [Criar Contas - Make e ManyChat]
    - ‚ùå ERRADO: [Configurar (WhatsApp, Email)]
    - ‚úÖ CORRETO: [Configurar WhatsApp e Email]
    - Use "e" ou "-" para separar itens, NUNCA v√≠rgulas ou par√™nteses

LINGUAGEM (CR√çTICO):
‚ùå NUNCA use termos t√©cnicos: "Deploy", "API", "Endpoint", "C√≥digo", "Development", "Fine-tuning", "Backend", "Frontend", "Database"
‚úÖ USE termos de neg√≥cio: "Conectar", "Configurar", "Ativar", "Testar", "Integrar", "Criar conta", "Linkar", "Ajustar"

üéØ REGRA "LOVABLE FIRST" (CR√çTICA):
SEMPRE avalie se a solu√ß√£o pode ser constru√≠da como uma aplica√ß√£o web.
Se SIM ‚Üí Priorize Lovable como base principal do fluxo
Se N√ÉO ‚Üí Use automa√ß√£o (Make/n8n) apenas para integra√ß√µes espec√≠ficas

‚úÖ USE LOVABLE QUANDO A SOLU√á√ÉO PRECISA DE:
- Interface web (dashboard, portal, sistema, painel de controle)
- Autentica√ß√£o de usu√°rios (login, perfis, permiss√µes)
- Armazenar dados estruturados (cadastros, hist√≥rico, relat√≥rios)
- APIs customizadas (endpoints pr√≥prios, integra√ß√µes espec√≠ficas)
- Solu√ß√£o escal√°vel e propriet√°ria (sem depender de plataformas externas)

‚ùå N√ÉO USE LOVABLE (use automa√ß√£o simples) QUANDO:
- Apenas integrar ferramentas existentes sem interface (ex: Slack ‚Üí Gmail)
- Solu√ß√£o 100% via WhatsApp/chatbot sem necessidade de painel web
- Fluxo pontual e simples sem necessidade de plataforma completa

‚ö†Ô∏è ATEN√á√ÉO: Lovable cria APLICA√á√ïES WEB COMPLETAS, n√£o √© apenas automa√ß√£o.
Se a solu√ß√£o precisa de interface de usu√°rio ‚Üí Lovable √© SEMPRE a primeira escolha.

ESTRUTURA DO FLUXO:
O fluxo deve responder: "O que eu fa√ßo PRIMEIRO? Depois? E por √∫ltimo?"
Use esta ordem l√≥gica:
1. Prepara√ß√£o (ex: "Reunir materiais", "Criar contas")
2. Configura√ß√£o inicial (ex: "Configurar ferramenta X")
3. Integra√ß√µes (ex: "Conectar ferramenta Y")
4. Testes (ex: "Testar fluxo completo")
5. Ajustes (ex: "Refinar respostas")
6. Ativa√ß√£o (ex: "Liberar para equipe")

IMPORTANTE: O fluxo deve ter entre 12-15 n√≥s para garantir detalhamento adequado e praticidade.

EXEMPLO 1 - Portal de Atendimento com IA (Lovable - Plataforma Web):
graph TD
    A[Mapear Requisitos] --> B[Criar Projeto no Lovable]
    B --> C[Configurar Autentica√ß√£o]
    C --> D[Criar Banco Supabase]
    D --> E[Integrar API OpenAI]
    E --> F[Desenvolver Interface]
    F --> G[Testar Funcionalidades]
    G --> H{Precisa Integra√ß√£o Externa?}
    H -->|Sim| I[Conectar via Make]
    H -->|N√£o| J[Refinar Interface]
    I --> J
    J --> K[Treinar Equipe]
    K --> L[Publicar na Web]

EXEMPLO 2 - Automa√ß√£o Simples (Make/n8n - Sem Interface Web):
graph TD
    A[Mapear FAQs] --> B[Criar Base no Notion]
    B --> C[Configurar Make]
    C --> D[Integrar Claude AI]
    D --> E[Conectar Email]
    E --> F[Testar Resposta]
    F --> G{Precisa Humano?}
    G -->|Sim| H[Encaminhar Slack]
    G -->|N√£o| I[Responder Direto]
    H --> I
    I --> J[Salvar em Airtable]
    J --> K[Refinar Prompts]`;

    // Montar perguntas e respostas para contexto
    const qaSection = questionsAsked.length > 0 
      ? questionsAsked.map((q: string, i: number) => 
          `Pergunta ${i + 1}: ${q}\nResposta: ${userAnswers[i] || 'N√£o respondida'}`
        ).join('\n\n')
      : 'Nenhuma pergunta respondida';

    const userPrompt = `Crie um fluxo Mermaid (graph TD) com 12-15 etapas PR√ÅTICAS para um empres√°rio implementar esta solu√ß√£o:

CONTEXTO DA SOLU√á√ÉO:
- T√≠tulo: ${solution.title}
- Desafio do Neg√≥cio: ${solution.original_idea}
- Ferramentas Mapeadas: ${allTools}

üìù PERGUNTAS E RESPOSTAS DA VALIDA√á√ÉO:
${qaSection}

FRAMEWORK DE 4 PILARES:
1. ü§ñ AUTOMA√á√ÉO: ${automationTools.join(', ') || 'N√£o mapeado'}
2. üß† IA: ${aiTools.join(', ') || 'N√£o mapeado'}
3. üìä DADOS: ${dataTools.join(', ') || 'N√£o mapeado'}
4. üíª INTERFACE: ${interfaceTools.join(', ') || 'N√£o mapeado'}

üéØ DECIS√ÉO ESTRAT√âGICA (RESPONDA ANTES DE CRIAR O FLUXO):
1. A solu√ß√£o precisa de uma interface web (dashboard, portal, sistema)?
   ‚Üí Se SIM: Use Lovable como ferramenta BASE do fluxo
   
2. A solu√ß√£o √© apenas integra√ß√£o entre ferramentas existentes sem interface?
   ‚Üí Se SIM: Use Make/n8n como base
   
3. A solu√ß√£o precisa de banco de dados pr√≥prio, autentica√ß√£o de usu√°rios ou APIs customizadas?
   ‚Üí Se SIM: Use Lovable + Supabase como base

‚ö†Ô∏è ATEN√á√ÉO CR√çTICA:
- Lovable cria APLICA√á√ïES WEB COMPLETAS (n√£o √© apenas automa√ß√£o)
- Se houver necessidade de interface de usu√°rio ‚Üí Lovable √© SEMPRE a primeira escolha
- Make/n8n/Zapier s√£o COMPLEMENTOS para integra√ß√µes espec√≠ficas, n√£o substitutos de plataforma

MISS√ÉO:
Crie um roteiro visual que mostre COMO implementar essa solu√ß√£o usando as ferramentas mapeadas.
O fluxo deve ser PR√ÅTICO e EXECUT√ÅVEL por algu√©m SEM conhecimento t√©cnico.

Use esta estrutura (adaptada conforme a ferramenta base escolhida):

SE USAR LOVABLE COMO BASE:
1. Mapear requisitos e funcionalidades
2. Criar projeto no Lovable
3. Configurar autentica√ß√£o e banco de dados
4. Desenvolver interface principal
5. Integrar APIs de IA (se necess√°rio)
6. Conectar integra√ß√µes externas via Make (se necess√°rio)
7. Testar funcionalidades completas
8. Refinar interface e experi√™ncia
9. Treinar equipe e publicar

SE USAR AUTOMA√á√ÉO SIMPLES (sem interface web):
1. Prepara√ß√£o (reunir materiais, criar contas)
2. Configura√ß√£o das ferramentas principais
3. Integra√ß√µes entre ferramentas
4. Testes do fluxo completo
5. Ajustes e refinamento
6. Ativa√ß√£o para uso real

LEMBRE-SE:
- Fale como se estivesse orientando um empres√°rio, n√£o um programador
- Use os nomes REAIS das ferramentas mapeadas acima
- Priorize Lovable se a solu√ß√£o precisa de interface web
- Ordem l√≥gica: o que fazer primeiro, depois, por √∫ltimo
- Textos curtos (m√°x 40 caracteres por etapa)

RETORNE APENAS JSON V√ÅLIDO (sem markdown, sem \`\`\`):
{
  "mermaid_code": "graph TD\\n    A[Mapear Requisitos] --> B[Criar Projeto Lovable]\\n    B --> C[Configurar]\\n...",
  "title": "Roteiro de Implementa√ß√£o: ${solution.title.substring(0, 40)}",
  "description": "Passo a passo pr√°tico para colocar ${solution.title.substring(0, 30)} no ar usando no-code",
  "estimated_time": "2-4 horas",
  "key_steps": [
    "Preparar materiais necess√°rios",
    "Configurar ferramenta principal",
    "Integrar com outras ferramentas",
    "Testar funcionamento completo",
    "Ajustar e refinar",
    "Ativar para uso real"
  ]
}

VALIDA√á√ÉO FINAL (CR√çTICA):
- Se a solu√ß√£o precisa de interface web e voc√™ N√ÉO usou Lovable como base ‚Üí REFA√áA
- Se voc√™ usou Make como base de uma aplica√ß√£o web que precisa de login/dashboard ‚Üí USE LOVABLE PRIMEIRO
- Se voc√™ usou palavras como "deploy", "API", "c√≥digo", "endpoint" ‚Üí REFA√áA
- Se os passos s√£o muito t√©cnicos ‚Üí SIMPLIFIQUE
- Se n√£o mencionou as ferramentas do framework ‚Üí INCLUA ELAS`;

    // Chamar Lovable AI com retry logic
    console.log('[FLOW-GEN] Chamando Lovable AI...');
    
    let aiData;
    let attempts = 0;
    const maxAttempts = 2;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`[FLOW-GEN] Tentativa ${attempts}/${maxAttempts}`);
      
      const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${LOVABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'google/gemini-2.5-pro', // Modelo mais capaz para melhor qualidade
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.7, // Criatividade moderada para solu√ß√µes pr√°ticas
          max_tokens: 8000, // Mais tokens para resposta detalhada
        }),
      });

      if (!aiResponse.ok) {
        const errorText = await aiResponse.text();
        console.error('[FLOW-GEN] ‚ùå Erro Lovable AI:', errorText);
        
        if (aiResponse.status === 429) {
          return new Response(
            JSON.stringify({ error: 'Rate limit excedido. Tente novamente em alguns minutos.' }),
            { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        
        if (aiResponse.status === 402) {
          return new Response(
            JSON.stringify({ error: 'Cr√©ditos insuficientes. Adicione cr√©ditos em Settings -> Workspace -> Usage.' }),
            { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        
        if (attempts < maxAttempts) {
          console.log('[FLOW-GEN] Tentando novamente...');
          await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1s
          continue;
        }
        
        throw new Error(`Lovable AI error: ${aiResponse.status}`);
      }

      aiData = await aiResponse.json();
      break; // Sucesso, sair do loop
    }

    const content = aiData.choices[0].message.content;

    // Parse JSON da resposta
    let flowData;
    try {
      // Tentar extrair JSON (remover markdown se houver)
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      flowData = JSON.parse(jsonMatch ? jsonMatch[0] : content);
    } catch (e) {
      console.error('[FLOW-GEN] ‚ùå Erro ao parsear JSON:', e);
      throw new Error('Resposta da IA n√£o √© JSON v√°lido');
    }

    // Validar campos obrigat√≥rios
    if (!flowData.mermaid_code || !flowData.title) {
      throw new Error('Resposta da IA incompleta');
    }

    // Valida√ß√£o de qualidade: verificar linguagem t√©cnica
    const technicalWords = ['deploy', 'api', 'endpoint', 'c√≥digo', 'development', 'backend', 'frontend', 'database', 'fine-tuning'];
    const mermaidLower = flowData.mermaid_code.toLowerCase();
    const foundTechnicalWords = technicalWords.filter(word => mermaidLower.includes(word));
    
    if (foundTechnicalWords.length > 0) {
      console.warn('[FLOW-GEN] ‚ö†Ô∏è Linguagem t√©cnica detectada:', foundTechnicalWords);
      console.warn('[FLOW-GEN] Salvando mesmo assim, mas pode precisar de regenera√ß√£o');
      // N√£o bloquear, apenas alertar - deixar usu√°rio regenerar se necess√°rio
    }
    
    // Contar n√∫mero de n√≥s no diagrama (verificar se est√° entre 12-15)
    const nodeMatches = flowData.mermaid_code.match(/[A-O]\[/g);
    const nodeCount = nodeMatches ? nodeMatches.length : 0;
    console.log(`[FLOW-GEN] üìä Diagrama possui ${nodeCount} n√≥s`);
    
    if (nodeCount < 12 || nodeCount > 15) {
      console.warn(`[FLOW-GEN] ‚ö†Ô∏è N√∫mero de n√≥s fora do ideal (12-15): ${nodeCount}`);
    }

    // üîß CAMADA 3: SANITIZA√á√ÉO MERMAID - Remover par√™nteses e v√≠rgulas problem√°ticos
    const sanitizeMermaidCode = (code: string): string => {
      console.log('[FLOW-GEN] üîß Sanitizando c√≥digo Mermaid...');
      
      // Processar linha por linha
      const sanitized = code
        .split('\n')
        .map(line => {
          // Detectar labels [...] e substituir par√™nteses e v√≠rgulas
          return line.replace(/\[([^\]]+)\]/g, (match, content) => {
            const sanitizedContent = content
              .replace(/\(/g, '-')     // ( vira -
              .replace(/\)/g, '')      // ) vira vazio
              .replace(/,/g, ' e');    // , vira " e"
            
            if (content !== sanitizedContent) {
              console.log(`[FLOW-GEN] üîß Sanitizado: "${content}" ‚Üí "${sanitizedContent}"`);
            }
            
            return `[${sanitizedContent}]`;
          });
        })
        .join('\n');
      
      console.log('[FLOW-GEN] ‚úÖ C√≥digo Mermaid sanitizado');
      return sanitized;
    };

    // Aplicar sanitiza√ß√£o antes de salvar
    const originalCode = flowData.mermaid_code;
    flowData.mermaid_code = sanitizeMermaidCode(originalCode);
    
    // Log da sanitiza√ß√£o
    if (originalCode !== flowData.mermaid_code) {
      console.log('[FLOW-GEN] üîß C√≥digo foi modificado pela sanitiza√ß√£o');
    }

    // Salvar no banco
    const { error: updateError } = await supabase
      .from('ai_generated_solutions')
      .update({
        implementation_flow: flowData,
        updated_at: new Date().toISOString()
      })
      .eq('id', solutionId);

    if (updateError) throw updateError;

    console.log('[FLOW-GEN] ‚úÖ Fluxo gerado e salvo com sucesso');

    return new Response(
      JSON.stringify({ success: true, flow: flowData }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error: any) {
    console.error('[FLOW-GEN] ‚ùå Erro:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
