import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';
import { getSupabaseServiceClient } from '../_shared/supabase-client.ts';

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { solutionId, userId } = await req.json();
    console.log('[FLOW-GEN] Gerando fluxo para solu√ß√£o:', solutionId);

    const supabase = getSupabaseServiceClient();

    // Buscar solu√ß√£o
    const { data: solution, error: solutionError } = await supabase
      .from('ai_generated_solutions')
      .select('*')
      .eq('id', solutionId)
      .single();

    if (solutionError) throw solutionError;

    // Buscar framework_mapping para contexto das ferramentas
    const frameworkData = solution.framework_mapping;
    
    // Extrair ferramentas dos 4 pilares
    const automationTools = frameworkData?.quadrant1_automation?.tool_names || [];
    const aiTools = frameworkData?.quadrant2_ai?.tool_names || [];
    const dataTools = frameworkData?.quadrant3_data?.tool_names || [];
    const interfaceTools = frameworkData?.quadrant4_interface?.tool_names || [];
    
    const allTools = [...automationTools, ...aiTools, ...dataTools, ...interfaceTools]
      .filter(Boolean)
      .join(', ') || 'Ferramentas n√£o especificadas';

    // Montar prompt focado em neg√≥cio e no-code
    const systemPrompt = `Voc√™ √© um CONSULTOR DE TRANSFORMA√á√ÉO DIGITAL especializado em guiar empres√°rios e l√≠deres a implementarem solu√ß√µes de IA usando ferramentas NO-CODE.

Seu p√∫blico N√ÉO √© programador. S√£o empres√°rios que querem implementar IA de forma pr√°tica.

REGRAS MERMAID (CR√çTICAS - SIGA EXATAMENTE):
1. Use APENAS "graph TD" na primeira linha
2. IDs devem ser APENAS letras mai√∫sculas √∫nicas (A, B, C, D, E, F, G, H, I, J, K, L)
3. Textos descritivos SEMPRE entre colchetes [ ]
4. Setas SEMPRE com espa√ßos: " --> " (nunca "-->")
5. M√°ximo 12 n√≥s no total
6. Textos CURTOS: m√°ximo 40 caracteres por n√≥
7. Decis√µes (if/else) usam chaves { } e labels nas setas: -->|Sim| e -->|N√£o|
8. NUNCA use: underscores, h√≠fens, espa√ßos ou n√∫meros em IDs
9. NUNCA quebre uma defini√ß√£o de n√≥ em m√∫ltiplas linhas
10. Cada linha deve ter EXATAMENTE: ID[Texto] --> ID2[Texto] ou ID{Decis√£o?}

LINGUAGEM (CR√çTICO):
‚ùå NUNCA use termos t√©cnicos: "Deploy", "API", "Endpoint", "C√≥digo", "Development", "Fine-tuning", "Backend", "Frontend", "Database"
‚úÖ USE termos de neg√≥cio: "Conectar", "Configurar", "Ativar", "Testar", "Integrar", "Criar conta", "Linkar", "Ajustar"

ESTRUTURA DO FLUXO:
O fluxo deve responder: "O que eu fa√ßo PRIMEIRO? Depois? E por √∫ltimo?"
Use esta ordem l√≥gica:
1. Prepara√ß√£o (ex: "Reunir materiais", "Criar contas")
2. Configura√ß√£o inicial (ex: "Configurar ferramenta X")
3. Integra√ß√µes (ex: "Conectar ferramenta Y")
4. Testes (ex: "Testar fluxo completo")
5. Ajustes (ex: "Refinar respostas")
6. Ativa√ß√£o (ex: "Liberar para equipe")

EXEMPLO 1 - Chatbot de Vendas:
graph TD
    A[Reunir PDFs dos Produtos] --> B[Criar Conta no ManyChat]
    B --> C[Conectar WhatsApp Business]
    C --> D[Configurar Cen√°rio no Make]
    D --> E[Integrar GPT-4 no Make]
    E --> F[Criar Base no Google Sheets]
    F --> G[Testar Conversa Completa]
    G --> H{Respostas OK?}
    H -->|N√£o| I[Refinar Prompts]
    I --> G
    H -->|Sim| J[Conectar CRM]
    J --> K[Ativar para Vendedores]

EXEMPLO 2 - Automa√ß√£o de Suporte:
graph TD
    A[Mapear FAQs] --> B[Criar Base no Notion]
    B --> C[Configurar Zapier]
    C --> D[Integrar Claude AI]
    D --> E[Conectar Email]
    E --> F[Testar Resposta]
    F --> G{Precisa Humano?}
    G -->|Sim| H[Encaminhar Slack]
    G -->|N√£o| I[Responder Direto]
    H --> I
    I --> J[Salvar em Airtable]`;

    const userPrompt = `Crie um fluxo Mermaid (graph TD) com 10-12 etapas PR√ÅTICAS para um empres√°rio implementar esta solu√ß√£o:

CONTEXTO DA SOLU√á√ÉO:
- T√≠tulo: ${solution.title}
- Desafio do Neg√≥cio: ${solution.original_idea}
- Ferramentas Mapeadas: ${allTools}

FRAMEWORK DE 4 PILARES:
1. ü§ñ AUTOMA√á√ÉO: ${automationTools.join(', ') || 'N√£o mapeado'}
2. üß† IA: ${aiTools.join(', ') || 'N√£o mapeado'}
3. üìä DADOS: ${dataTools.join(', ') || 'N√£o mapeado'}
4. üíª INTERFACE: ${interfaceTools.join(', ') || 'N√£o mapeado'}

MISS√ÉO:
Crie um roteiro visual que mostre COMO implementar essa solu√ß√£o usando as ferramentas mapeadas.
O fluxo deve ser PR√ÅTICO e EXECUT√ÅVEL por algu√©m SEM conhecimento t√©cnico.

Use esta estrutura:
1. Prepara√ß√£o (reunir materiais, criar contas)
2. Configura√ß√£o das ferramentas principais
3. Integra√ß√µes entre ferramentas
4. Testes do fluxo completo
5. Ajustes e refinamento
6. Ativa√ß√£o para uso real

LEMBRE-SE:
- Fale como se estivesse orientando um empres√°rio, n√£o um programador
- Use os nomes REAIS das ferramentas mapeadas acima
- Ordem l√≥gica: o que fazer primeiro, depois, por √∫ltimo
- Textos curtos (m√°x 40 caracteres por etapa)

RETORNE APENAS JSON V√ÅLIDO (sem markdown, sem \`\`\`):
{
  "mermaid_code": "graph TD\\n    A[Reunir PDFs] --> B[Criar Conta]\\n    B --> C[Conectar]\\n...",
  "title": "Roteiro de Implementa√ß√£o: ${solution.title.substring(0, 40)}",
  "description": "Passo a passo pr√°tico para colocar ${solution.title.substring(0, 30)} no ar usando no-code",
  "estimated_time": "2-4 horas",
  "key_steps": [
    "Preparar materiais necess√°rios",
    "Configurar ferramenta principal",
    "Integrar com outras ferramentas",
    "Testar funcionamento completo",
    "Ajustar e refinar",
    "Ativar para uso real"
  ]
}

VALIDA√á√ÉO FINAL:
- Se voc√™ usou palavras como "deploy", "API", "c√≥digo", "endpoint" ‚Üí REFA√áA
- Se os passos s√£o muito t√©cnicos ‚Üí SIMPLIFIQUE
- Se n√£o mencionou as ferramentas do framework ‚Üí INCLUA ELAS`;

    // Chamar Lovable AI com retry logic
    console.log('[FLOW-GEN] Chamando Lovable AI...');
    
    let aiData;
    let attempts = 0;
    const maxAttempts = 2;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`[FLOW-GEN] Tentativa ${attempts}/${maxAttempts}`);
      
      const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${LOVABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'google/gemini-2.5-pro', // Modelo mais capaz para melhor qualidade
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.7, // Criatividade moderada para solu√ß√µes pr√°ticas
          max_tokens: 8000, // Mais tokens para resposta detalhada
        }),
      });

      if (!aiResponse.ok) {
        const errorText = await aiResponse.text();
        console.error('[FLOW-GEN] ‚ùå Erro Lovable AI:', errorText);
        
        if (aiResponse.status === 429) {
          return new Response(
            JSON.stringify({ error: 'Rate limit excedido. Tente novamente em alguns minutos.' }),
            { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        
        if (aiResponse.status === 402) {
          return new Response(
            JSON.stringify({ error: 'Cr√©ditos insuficientes. Adicione cr√©ditos em Settings -> Workspace -> Usage.' }),
            { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        
        if (attempts < maxAttempts) {
          console.log('[FLOW-GEN] Tentando novamente...');
          await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1s
          continue;
        }
        
        throw new Error(`Lovable AI error: ${aiResponse.status}`);
      }

      aiData = await aiResponse.json();
      break; // Sucesso, sair do loop
    }

    const content = aiData.choices[0].message.content;

    // Parse JSON da resposta
    let flowData;
    try {
      // Tentar extrair JSON (remover markdown se houver)
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      flowData = JSON.parse(jsonMatch ? jsonMatch[0] : content);
    } catch (e) {
      console.error('[FLOW-GEN] ‚ùå Erro ao parsear JSON:', e);
      throw new Error('Resposta da IA n√£o √© JSON v√°lido');
    }

    // Validar campos obrigat√≥rios
    if (!flowData.mermaid_code || !flowData.title) {
      throw new Error('Resposta da IA incompleta');
    }

    // Valida√ß√£o de qualidade: verificar linguagem t√©cnica
    const technicalWords = ['deploy', 'api', 'endpoint', 'c√≥digo', 'development', 'backend', 'frontend', 'database', 'fine-tuning'];
    const mermaidLower = flowData.mermaid_code.toLowerCase();
    const foundTechnicalWords = technicalWords.filter(word => mermaidLower.includes(word));
    
    if (foundTechnicalWords.length > 0) {
      console.warn('[FLOW-GEN] ‚ö†Ô∏è Linguagem t√©cnica detectada:', foundTechnicalWords);
      console.warn('[FLOW-GEN] Salvando mesmo assim, mas pode precisar de regenera√ß√£o');
      // N√£o bloquear, apenas alertar - deixar usu√°rio regenerar se necess√°rio
    }
    
    // Contar n√∫mero de n√≥s no diagrama (verificar se est√° entre 8-12)
    const nodeMatches = flowData.mermaid_code.match(/[A-L]\[/g);
    const nodeCount = nodeMatches ? nodeMatches.length : 0;
    console.log(`[FLOW-GEN] üìä Diagrama possui ${nodeCount} n√≥s`);
    
    if (nodeCount < 8 || nodeCount > 12) {
      console.warn(`[FLOW-GEN] ‚ö†Ô∏è N√∫mero de n√≥s fora do ideal (8-12): ${nodeCount}`);
    }

    // Salvar no banco
    const { error: updateError } = await supabase
      .from('ai_generated_solutions')
      .update({
        implementation_flow: flowData,
        updated_at: new Date().toISOString()
      })
      .eq('id', solutionId);

    if (updateError) throw updateError;

    console.log('[FLOW-GEN] ‚úÖ Fluxo gerado e salvo com sucesso');

    return new Response(
      JSON.stringify({ success: true, flow: flowData }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error: any) {
    console.error('[FLOW-GEN] ‚ùå Erro:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
