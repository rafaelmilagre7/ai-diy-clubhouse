import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.49.4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { currentUserId, targetUserId } = await req.json();

    if (!currentUserId || !targetUserId) {
      return new Response(
        JSON.stringify({ error: 'currentUserId e targetUserId s√£o obrigat√≥rios' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const lovableApiKey = Deno.env.get('LOVABLE_API_KEY');

    if (!lovableApiKey) {
      return new Response(
        JSON.stringify({ error: 'LOVABLE_API_KEY n√£o configurada' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Buscar perfis de ambos os usu√°rios
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles_networking_safe')
      .select('*')
      .in('id', [currentUserId, targetUserId]);

    if (profilesError || !profiles || profiles.length !== 2) {
      console.error('Erro ao buscar perfis:', profilesError);
      return new Response(
        JSON.stringify({ error: 'Erro ao buscar perfis dos usu√°rios' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const currentUser = profiles.find(p => p.id === currentUserId);
    const targetUser = profiles.find(p => p.id === targetUserId);

    // Prompt para a IA gerar a copy personalizada
    const prompt = `Voc√™ √© um especialista em networking empresarial. Analise os perfis abaixo e crie uma copy persuasiva (2-3 par√°grafos curtos) explicando por que essa conex√£o faz sentido para neg√≥cios.

**Perfil do Usu√°rio Atual:**
- Nome: ${currentUser?.name || 'N√£o informado'}
- Empresa: ${currentUser?.company_name || 'N√£o informado'}
- Cargo: ${currentUser?.current_position || 'N√£o informado'}
- Ind√∫stria: ${currentUser?.industry || 'N√£o informado'}
- Skills: ${currentUser?.skills?.join(', ') || 'N√£o informado'}

**Perfil da Conex√£o Potencial:**
- Nome: ${targetUser?.name || 'N√£o informado'}
- Empresa: ${targetUser?.company_name || 'N√£o informado'}
- Cargo: ${targetUser?.current_position || 'N√£o informado'}
- Ind√∫stria: ${targetUser?.industry || 'N√£o informado'}
- Skills: ${targetUser?.skills?.join(', ') || 'N√£o informado'}

Gere uma copy que:
1. Destaque sinergias entre os perfis
2. Identifique oportunidades de neg√≥cio em comum
3. Seja direta e profissional
4. Use uma linguagem pr√≥xima mas n√£o informal demais

Escreva APENAS a copy, sem introdu√ß√µes ou explica√ß√µes adicionais. M√°ximo 200 palavras.`;

    console.log('ü§ñ Gerando copy com IA...');

    // Chamar Lovable AI para gerar a copy
    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lovableApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: 'Voc√™ √© um especialista em networking empresarial.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 500,
      }),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('Erro na API de IA:', aiResponse.status, errorText);
      return new Response(
        JSON.stringify({ error: 'Erro ao gerar copy com IA' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const aiData = await aiResponse.json();
    const generatedCopy = aiData.choices?.[0]?.message?.content || '';

    console.log('‚úÖ Copy gerada com sucesso');

    // Salvar a copy no match existente
    const { error: updateError } = await supabase
      .from('strategic_matches_v2')
      .update({ connection_copy: generatedCopy })
      .eq('user_id', currentUserId)
      .eq('matched_user_id', targetUserId);

    if (updateError) {
      console.error('Erro ao salvar copy:', updateError);
      // N√£o bloqueia a resposta, apenas loga o erro
    }

    // Calcular score b√°sico (pode ser melhorado depois)
    const score = 0.75;

    return new Response(
      JSON.stringify({ 
        copy: generatedCopy,
        score: score,
        success: true
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Erro geral:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});