import { serve } from "https://deno.land/std@0.220.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

// TIMEOUT CONFIGURATION
const GENERATION_TIMEOUT = 240000; // 4 minutos (suficiente para Claude)
const GRACEFUL_SHUTDOWN_TIME = 10000; // 10s de margem

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// üîí Schema de valida√ß√£o Zod
const GenerateRequestSchema = z.object({
  idea: z.string()
    .trim()
    .min(30, "A ideia deve ter no m√≠nimo 30 caracteres")
    .max(2000, "A ideia deve ter no m√°ximo 2000 caracteres")
    .regex(
      /^[\w\s√Ä-√ø.,!?@#$%&*()\-+=[\]{};:'"/\\|<>~`]+$/,
      "Texto cont√©m caracteres n√£o permitidos"
    )
    .refine(
      (val) => !/<script|javascript:|onerror=/i.test(val),
      "Texto cont√©m c√≥digo n√£o permitido"
    ),
  userId: z.string()
    .uuid("ID de usu√°rio inv√°lido"),
  answers: z.array(
    z.object({
      question: z.string().max(500, "Pergunta muito longa"),
      answer: z.string().max(2000, "Resposta muito longa")
    })
  ).max(10, "M√°ximo de 10 perguntas permitidas").optional(),
  mode: z.enum(["quick", "complete"]).optional().default("quick") // Modo de gera√ß√£o
});

// üöÄ FUN√á√ÉO ASS√çNCRONA PARA GERAR LOVABLE PROMPT EM BACKGROUND
async function generateLovablePromptAsync(
  solutionId: string,
  solutionData: any,
  idea: string,
  answers: any[],
  requestId: string,
  supabase: any,
  lovableApiKey: string
) {
  try {
    const lovablePromptStart = Date.now();
    console.log(`[BUILDER-ASYNC][${requestId}] üìù Gerando prompt com Lovable AI (Gemini 2.5 Pro)...`);
    
    const lovablePromptSystemPrompt = `Voc√™ √© um especialista em engenharia de prompts para Lovable.dev.

üéØ CONTEXTO CR√çTICO: LOVABLE TEM LOVABLE CLOUD (BACKEND INTEGRADO)
- Lovable Cloud = Backend completo (Supabase): banco de dados, autentica√ß√£o, edge functions, storage
- NUNCA sugira "usar Make como backend" - isso n√£o faz sentido
- Make/N8N = automa√ß√µes EXTERNAS e integra√ß√µes com sistemas terceiros
- Lovable = Frontend (React) + Backend (Lovable Cloud/Supabase)

IMPORTANTE: Retorne APENAS um objeto JSON v√°lido, sem texto adicional antes ou depois.

Estrutura OBRIGAT√ìRIA:
{
  "prompt": "string com o prompt Lovable completo e profissional",
  "complexity": "low|medium|high",
  "estimated_time": "tempo estimado de implementa√ß√£o"
}

N√ÉO adicione explica√ß√µes, coment√°rios ou markdown. APENAS o JSON puro.

Sua miss√£o: transformar a solu√ß√£o Builder em PROMPT LOVABLE focando em:
1. **Interface (Lovable Frontend)**: P√°ginas, componentes, UX
2. **Backend (Lovable Cloud)**: Banco de dados, autentica√ß√£o, edge functions
3. **Integra√ß√µes Make/N8N**: APENAS para automa√ß√µes externas e webhooks (ex: notifica√ß√µes, sincroniza√ß√£o com sistemas externos)
4. **IA (se necess√°rio)**: Lovable AI via edge functions (n√£o via Make)

ESTRUTURA OBRIGAT√ìRIA:

# üéØ CONTEXTO DO PROJETO
[2-3 par√°grafos explicando o problema e a solu√ß√£o de forma clara]

# üìã ESPECIFICA√á√ÉO T√âCNICA

## Stack Tecnol√≥gica
- **Frontend**: Lovable (React + TypeScript + Tailwind)
- **Backend**: Lovable Cloud (Supabase - banco, auth, edge functions, storage)
- **Automa√ß√µes Externas**: Make/N8N (APENAS para integra√ß√µes com sistemas terceiros, webhooks, notifica√ß√µes)
- **IA**: Lovable AI via edge functions (quando dashboard Lovable) OU API direta via Make (quando sem interface)

## Funcionalidades Core
1. **[Feature 1]**: descri√ß√£o detalhada
2. **[Feature 2]**: descri√ß√£o detalhada
[adicionar features principais]

# üèóÔ∏è ARQUITETURA LOVABLE

## Database (Lovable Cloud/Supabase)
\`\`\`sql
-- Estrutura de dados
CREATE TABLE [nome] (
  [campos com tipos, constraints, indexes]
);

-- RLS Policies
[pol√≠ticas de seguran√ßa]
\`\`\`

## Edge Functions (Lovable Cloud)
- **[nome-funcao-1]**: [prop√≥sito, inputs, outputs]
- **[nome-funcao-2]**: [prop√≥sito, inputs, outputs]

## Frontend (Lovable)
- P√°ginas: [listar p√°ginas principais]
- Componentes: [componentes customizados]
- Rotas: [estrutura de navega√ß√£o]

# üîÑ INTEGRA√á√ïES EXTERNAS (Make/N8N)

‚ö†Ô∏è **IMPORTANTE**: Make/N8N s√£o para automa√ß√µes EXTERNAS apenas:
- Sincroniza√ß√£o com CRMs/ERPs
- Notifica√ß√µes via WhatsApp/Email
- Webhooks de sistemas terceiros
- Agendamentos e rotinas

**N√ÉO USE Make/N8N para l√≥gica do app principal - use Lovable Cloud!**

## Cen√°rio Make 1: [Nome - ex: Notifica√ß√£o WhatsApp]
\`\`\`
TRIGGER: Webhook do Lovable quando nova venda
‚Üì
M√ìDULO 1: HTTP - Recebe dados da venda
‚Üì
M√ìDULO 2: WhatsApp Business - Envia confirma√ß√£o
‚Üì
RESULTADO: Cliente recebe mensagem instant√¢nea
\`\`\`

[Adicionar 2-3 cen√°rios Make/N8N espec√≠ficos]

# üé® DESIGN SYSTEM & UI/UX
[Paleta de cores, componentes, jornada do usu√°rio]

# üìä KPIs & M√âTRICAS
[Objetivos mensur√°veis com metas]

# üóìÔ∏è ROADMAP

## Semana 1: Setup Lovable
- [ ] Criar projeto Lovable
- [ ] Configurar Lovable Cloud (database + auth)
- [ ] Estrutura de p√°ginas base

## Semana 2: Features Core no Lovable
- [ ] Implementar funcionalidades principais
- [ ] Edge functions necess√°rias
- [ ] Testes

## Semana 3: Integra√ß√µes Make/N8N (se necess√°rio)
- [ ] Configurar cen√°rios Make para automa√ß√µes externas
- [ ] Webhooks entre Lovable e Make
- [ ] Testes end-to-end

## Semana 4: Deploy
- [ ] Deploy Lovable
- [ ] Ativar cen√°rios Make
- [ ] Monitoramento

---

**REGRAS:**
- Lovable = app principal (frontend + backend)
- Make/N8N = apenas automa√ß√µes externas
- Seja espec√≠fico em SQL, edge functions, componentes React
- Workflows Make: apenas quando integrar com sistemas externos`;

    const contextFromAnswers = answers?.map(a => `Q: ${a.question}\nA: ${a.answer}`).join('\n\n') || '';
    
    const lovableAIResponse = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${lovableApiKey}`
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-pro",
        messages: [
          {
            role: "system",
            content: lovablePromptSystemPrompt
          },
          {
            role: "user",
            content: `Gere um prompt Lovable COMPLETO e PROFISSIONAL baseado nesta solu√ß√£o:

SOLU√á√ÉO GERADA:
${JSON.stringify(solutionData, null, 2)}

IDEIA ORIGINAL:
${idea}

CONTEXTO ADICIONAL DAS RESPOSTAS:
${contextFromAnswers || 'Nenhum contexto adicional fornecido'}

INSTRU√á√ïES ESPECIAIS:
- Seja EXTREMAMENTE detalhado
- Use markdown para formata√ß√£o profissional
- **CR√çTICO**: Backend sempre em Lovable Cloud (edge functions, database), Make/N8N apenas para integra√ß√µes externas
- Se tem dashboard/interface: use Lovable completo (frontend + backend)
- Se √© s√≥ automa√ß√£o sem interface: pode ser Make/N8N puro
- Workflows Make: apenas para notifica√ß√µes, sync com sistemas externos, webhooks de terceiros
- N√£o confundir: Make n√£o √© backend do app, √© automa√ß√£o externa
- Siga EXATAMENTE a estrutura do system prompt
- Use emojis para organiza√ß√£o visual
- Especifique m√≥dulos Make com nomes reais de servi√ßos quando aplic√°vel`
          }
        ],
        temperature: 0.7,
        max_completion_tokens: 16000
      }),
      signal: AbortSignal.timeout(240000) // 4 minutos
    });

    if (!lovableAIResponse.ok) {
      const errorText = await lovableAIResponse.text();
      console.error(`[BUILDER-ASYNC][${requestId}] ‚ùå Erro Lovable AI: ${lovableAIResponse.status}`, errorText);
      
      if (lovableAIResponse.status === 429) {
        throw new Error(`Rate limit Lovable AI atingido`);
      } else if (lovableAIResponse.status === 402) {
        throw new Error(`Cr√©ditos insuficientes no Lovable AI`);
      }
      
      throw new Error(`Lovable AI error: ${lovableAIResponse.status}`);
    }

    const lovableAIData = await lovableAIResponse.json();
    const lovablePromptTime = Date.now() - lovablePromptStart;
    
    const rawContent = lovableAIData.choices[0].message.content;
    
    // Extra√ß√£o robusta de JSON
    const cleanJsonResponse = (text: string): string => {
      let cleaned = text.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      const firstBrace = cleaned.indexOf('{');
      const lastBrace = cleaned.lastIndexOf('}');
      
      if (firstBrace === -1 || lastBrace === -1) {
        throw new Error('JSON n√£o encontrado na resposta');
      }
      
      return cleaned.substring(firstBrace, lastBrace + 1);
    };
    
    let lovablePrompt: string;
    
    try {
      const cleanedJson = cleanJsonResponse(rawContent);
      const parsed = JSON.parse(cleanedJson);
      
      if (parsed.prompt && typeof parsed.prompt === 'string') {
        lovablePrompt = parsed.prompt;
        console.log(`[BUILDER-ASYNC][${requestId}] ‚úÖ JSON parseado com sucesso`);
        console.log(`[BUILDER-ASYNC][${requestId}] üìä Complexidade: ${parsed.complexity || 'N/A'}`);
        console.log(`[BUILDER-ASYNC][${requestId}] ‚è±Ô∏è  Tempo estimado: ${parsed.estimated_time || 'N/A'}`);
      } else {
        throw new Error('Campo "prompt" n√£o encontrado no JSON');
      }
    } catch (parseError) {
      console.error(`[BUILDER-ASYNC][${requestId}] ‚ùå Erro ao parsear JSON:`, parseError);
      lovablePrompt = rawContent;
      console.warn(`[BUILDER-ASYNC][${requestId}] ‚ö†Ô∏è  Usando resposta raw como fallback`);
    }
    
    console.log(`[BUILDER-ASYNC][${requestId}] ‚úÖ Prompt Lovable gerado em ${(lovablePromptTime / 1000).toFixed(1)}s`);
    console.log(`[BUILDER-ASYNC][${requestId}] üìè Tamanho: ${lovablePrompt.length} caracteres`);
    
    // Atualizar solu√ß√£o no banco
    const { error: updateError } = await supabase
      .from("ai_generated_solutions")
      .update({ lovable_prompt: lovablePrompt })
      .eq("id", solutionId);
    
    if (updateError) {
      console.error(`[BUILDER-ASYNC][${requestId}] ‚ùå Erro ao salvar prompt:`, updateError);
    } else {
      console.log(`[BUILDER-ASYNC][${requestId}] ‚úÖ Prompt Lovable salvo no banco com sucesso`);
    }
  } catch (error) {
    console.error(`[BUILDER-ASYNC][${requestId}] ‚ùå ERRO:`, {
      message: error?.message || 'Erro desconhecido',
      name: error?.name || 'Unknown',
      solutionId
    });
    
    if (error?.message?.includes('timeout')) {
      console.error(`[BUILDER-ASYNC][${requestId}]   ‚Üí Timeout ao chamar Lovable AI`);
    } else if (error?.message?.includes('429')) {
      console.error(`[BUILDER-ASYNC][${requestId}]   ‚Üí Rate limit atingido`);
    } else if (error?.message?.includes('402')) {
      console.error(`[BUILDER-ASYNC][${requestId}]   ‚Üí Cr√©ditos insuficientes`);
    }
  }
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  const startTime = Date.now();
  const requestId = crypto.randomUUID();

  try {
    const body = await req.json();

    // üîí Validar entrada com Zod
    const validationResult = GenerateRequestSchema.safeParse(body);
    
    if (!validationResult.success) {
      const firstError = validationResult.error.errors[0];
      console.warn(`[BUILDER] ‚ùå Valida√ß√£o falhou: ${firstError.message}`);
      
      return new Response(
        JSON.stringify({ 
          error: firstError.message,
          code: "VALIDATION_ERROR"
        }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const { idea, userId, answers = [], mode = "quick" } = validationResult.data;
    
    console.log(`[BUILDER][${requestId}] üéØ Modo de gera√ß√£o: ${mode.toUpperCase()}`);
    
    // Variable to hold saved solution for timeout handler
    let savedSolution: any = null;

    console.log(`[BUILDER][${requestId}] === GERA√á√ÉO BUILDER INICIADA ===`);
    console.log(`[BUILDER][${requestId}] ‚úì Valida√ß√£o OK`);
    console.log(`[BUILDER][${requestId}] üë§ User ID: ${userId.substring(0, 8)}***`);
    console.log(`[BUILDER][${requestId}] üí° Ideia: "${idea.substring(0, 80)}..."`);
    console.log(`[BUILDER][${requestId}] üìù Contexto: ${answers.length} respostas coletadas`);

    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Verificar limite
    const { data: limitCheck, error: limitError } = await supabase.rpc(
      "check_ai_solution_limit",
      { p_user_id: userId }
    );

    if (limitError || !limitCheck.can_generate) {
      return new Response(
        JSON.stringify({ error: "Limite mensal atingido" }),
        { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Buscar ferramentas COM logos
    const { data: tools } = await supabase
      .from("tools")
      .select("id, name, category, official_url, logo_url")
      .eq("status", true);

    const toolsContext = tools
      ? tools.map((t) => `- ${t.name} (${t.category}) | Logo: ${t.logo_url || 'N/A'}`).join("\n")
      : "Nenhuma ferramenta dispon√≠vel";

    // Construir contexto adicional das perguntas
    let contextFromAnswers = "";
    if (answers.length > 0) {
      contextFromAnswers = "\n\nCONTEXTO ADICIONAL COLETADO:\n";
      answers.forEach((qa, idx) => {
        contextFromAnswers += `${idx + 1}. ${qa.question}\nR: ${qa.answer}\n\n`;
      });
    }

    const systemPrompt = `Voc√™ √© o Rafael Milagre - especialista em IA, automa√ß√£o no-code e solu√ß√µes pr√°ticas.

üéØ METODOLOGIA RAFAEL MILAGRE: CONECTAR FERRAMENTAS, N√ÉO PROGRAMAR

DNA RAFAEL MILAGRE:
- **Solu√ß√µes Pr√°ticas**: Conectar ferramentas visuais no-code para resolver problemas reais
- **Anti-c√≥digo**: Priorizar Make, N8N, ManyChat antes de pensar em programa√ß√£o
- **100% Execut√°vel**: N√£o √© teoria - s√£o configura√ß√µes que qualquer um pode fazer
- **Didatismo Extremo**: Traduz "criar API REST" em "conectar m√≥dulo HTTP no Make"

üõ†Ô∏è HIERARQUIA DE FERRAMENTAS (SEMPRE NESTA ORDEM):

1. **AUTOMA√á√ÉO (BACKEND + L√ìGICA)**:
   - Make.com (prioridade m√°xima - visual, poderoso, f√°cil)
   - N8N (alternativa open-source)
   - Zapier (se usu√°rio j√° usa)
   - Usar para: webhooks, APIs, transforma√ß√£o de dados, l√≥gica de neg√≥cio

2. **CHATBOTS E COMUNICA√á√ÉO**:
   - ManyChat (WhatsApp, Instagram, Facebook)
   - Typebot (chatbots web customizados)
   - WhatsApp Business API (quando precisa mais controle)

3. **INTERFACE VISUAL (FRONTEND)**:
   - Lovable (quando precisa dashboard, app web, painel administrativo)
   - Usar APENAS para visualiza√ß√£o de dados, n√£o para l√≥gica de neg√≥cio
   - Backend sempre em Make/N8N, Lovable s√≥ consome dados via API

4. **DADOS**:
   - Google Sheets (prioridade - simples e integr√°vel)
   - Airtable (se precisa rela√ß√µes complexas)
   - Supabase (√∫ltimo recurso - quando realmente precisa banco SQL)

5. **IA**:
   - Lovable AI (quando solu√ß√£o tem dashboard Lovable)
   - API direta OpenAI/Anthropic (via Make para outras solu√ß√µes)
   - Sempre processar no Make/N8N, nunca direto no frontend

üö´ NUNCA MAIS FA√áA ISSO:
- ‚ùå "Criar edge function em Supabase para..."
- ‚ùå "Implementar RAG com banco vetorial..."
- ‚ùå "Desenvolver API REST customizada..."
- ‚ùå "Programar webhook handler em Node.js..."
- ‚ùå Qualquer men√ß√£o a c√≥digo, schemas SQL, TypeScript, React components

‚úÖ SEMPRE FA√áA ISSO:
- ‚úÖ "Configure cen√°rio no Make: m√≥dulo WhatsApp ‚Üí m√≥dulo OpenAI ‚Üí m√≥dulo Google Sheets"
- ‚úÖ "Conecte ManyChat com Make via webhook"
- ‚úÖ "Use Lovable para criar dashboard que puxa dados da API"
- ‚úÖ "Integre Google Sheets com Make para salvar respostas"
- ‚úÖ Pense em CONFIGURA√á√ÉO, n√£o em PROGRAMA√á√ÉO

FERRAMENTAS DISPON√çVEIS:
${toolsContext}

OBJETIVO:
Criar um plano EXECUT√ÅVEL focado em CONECTAR FERRAMENTAS, n√£o em programar.

‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS PARA DIAGRAMAS MERMAID (OBRIGAT√ìRIO):

üî¥ ARCHITECTURE_FLOWCHART (graph TD/LR):
- Use APENAS "graph TD" ou "graph LR" (NUNCA "flowchart")
- N√≥s: [ ] para ret√¢ngulos, ( ) para arredondados, (( )) para c√≠rculos
- NUNCA use chaves { } em graphs (causa syntax error fatal)
- Conex√µes: -->|texto| ou apenas -->
- Subgraphs: "subgraph Nome" e "end" (sem chaves)
- Estilos: style NODEID fill:#cor,stroke:#cor,color:#fff
- M√°ximo 15 n√≥s (clareza visual)
EXEMPLO V√ÅLIDO:
graph TD
  A[Usu√°rio] -->|mensagem| B(WhatsApp API)
  B --> C{Make}
  C -->|qualifica| D[GPT-4]
  D --> E[(CRM)]
  style D fill:#3b82f6

üî¥ DATA_FLOW_DIAGRAM (flowchart LR):
- Use "flowchart LR" (Left to Right)
- Subgraphs para agrupar componentes
- NUNCA use chaves { } isoladas
- Conex√µes com dados: A -->|nome_dado| B
- M√°ximo 12 n√≥s
EXEMPLO V√ÅLIDO:
flowchart LR
  subgraph Frontend
    A[React]
  end
  subgraph Backend
    B[API]
  end
  A -->|request| B

üî¥ USER_JOURNEY_MAP (journey):
- Formato exato: "journey" na linha 1
- "title Texto do Titulo" (sem dois pontos)
- Se√ß√µes: "section Nome da Secao"
- Tarefas: "Nome Tarefa: SCORE: Ator1, Ator2"
- SCORE √© UM N√öMERO de 1-5 (sem dois pontos depois do n√∫mero)
- M√°ximo 4 se√ß√µes, 5 tarefas/se√ß√£o
EXEMPLO V√ÅLIDO:
journey
  title Jornada do Usuario
  section Inicio
    Acessa sistema: 5: Usuario
    Faz login: 4: Usuario
  section Uso
    Usa funcao: 5: Usuario, Sistema

üî¥ TECHNICAL_STACK_DIAGRAM (graph TB):
- Use "graph TB" (Top to Bottom)
- Subgraphs para camadas (Frontend, Backend, etc)
- NUNCA use chaves { }
- M√°ximo 10 componentes
EXEMPLO V√ÅLIDO:
graph TB
  subgraph Frontend
    A[React]
  end
  subgraph Backend
    B[Node]
  end
  A --> B

ESTRUTURA DA RESPOSTA:

{
  "short_description": "3-5 frases PR√ÅTICAS e DIRETAS: 1) QUAL ferramenta conecta com QUAL ferramenta, 2) O QUE acontece em cada etapa (ex: 'WhatsApp envia mensagem ‚Üí Make processa ‚Üí IA qualifica ‚Üí Google Sheets salva'), 3) RESULTADO MENSUR√ÅVEL. TOM: pr√°tico, visual. EVITE: termos t√©cnicos, arquitetura, c√≥digo. USE: 'Make conecta X com Y', 'ManyChat captura mensagens e envia para Z', 'Dashboard Lovable mostra dados de A'",
  
  "technical_overview": {
    "complexity": "low/medium/high - Baseado em QUANTAS INTEGRA√á√ïES e ferramentas, n√£o em c√≥digo",
    "estimated_time": "Tempo para CONFIGURAR (ex: '1-2 semanas de configura√ß√£o')",
    "main_stack": "Ferramentas principais (ex: 'Make + ManyChat + Google Sheets + Lovable (dashboard)')"
  },
  
  "business_context": "2-4 par√°grafos explicando: 1) Contexto do neg√≥cio e problema atual, 2) Objetivos estrat√©gicos que a solu√ß√£o resolve, 3) Impacto esperado nos processos e resultados",
  
  "competitive_advantages": [
    {
      "title": "Diferencial 1",
      "description": "Como essa solu√ß√£o se diferencia da concorr√™ncia ou do modo tradicional"
    },
    {
      "title": "Diferencial 2",
      "description": "Outro diferencial competitivo importante"
    }
  ],
  
  "expected_kpis": [
    {
      "metric": "Nome da m√©trica (ex: 'Taxa de Convers√£o')",
      "target": "Meta esperada (ex: 'Aumentar de 15% para 40% em 3 meses')",
      "description": "Como medir e por que √© importante"
    },
    {
      "metric": "Nome da m√©trica (ex: 'Tempo de Resposta')",
      "target": "Meta esperada (ex: 'Reduzir de 2h para 15min')",
      "description": "Como medir e por que √© importante"
    }
  ],
  
  "architecture_flowchart": {
    "mermaid_code": "C√≥digo Mermaid (formato 'graph TD' ou 'graph LR') mostrando FLUXO DE FERRAMENTAS (n√£o c√≥digo interno). EXEMPLO para WhatsApp + IA:\n\ngraph TD\n  A[WhatsApp Business] -->|Mensagem do lead| B[ManyChat captura]\n  B -->|Webhook| C{Make Automation}\n  C -->|Envia texto| D[OpenAI API qualifica]\n  D -->|Lead qualificado| E[Google Sheets salva]\n  D -->|Lead ruim| F[Descarta]\n  E -->|Notifica√ß√£o| G[Email para vendedor]\n  C -->|Dados processados| H[Dashboard Lovable atualiza]\n  style D fill:#3b82f6\n  style E fill:#10b981\n  style F fill:#ef4444\n\nMostre CONEX√ÉO DE FERRAMENTAS, n√£o edge functions ou c√≥digo. Cada caixa = uma ferramenta real (Make, ManyChat, OpenAI, Google Sheets, etc).",
    "description": "Explique como as ferramentas se conectam de ponta a ponta (ex: 'WhatsApp ‚Üí ManyChat ‚Üí Make ‚Üí OpenAI ‚Üí Sheets ‚Üí Email')"
  },
  
  "data_flow_diagram": {
    "mermaid_code": "C√≥digo Mermaid (formato 'flowchart LR') mostrando DADOS FLUINDO ENTRE FERRAMENTAS. EXEMPLO:\n\nflowchart LR\n  A[Lead no WhatsApp] -->|Mensagem texto| B[ManyChat]\n  B -->|JSON webhook| C[Make Cen√°rio]\n  C -->|Prompt + contexto| D[OpenAI API]\n  D -->|Resposta + score| C\n  C -->|Linha nova| E[Google Sheets]\n  C -->|Body HTML| F[Gmail API]\n  E -->|GET /api/leads| G[Dashboard Lovable]\n  style D fill:#22d3ee\n  style E fill:#0891b2\n\nMostre DADOS (n√£o requisi√ß√µes HTTP gen√©ricas). Ex: 'Mensagem texto', 'JSON com nome/email', 'Score de 1-10', etc.",
    "description": "Descreva que tipo de dado flui em cada etapa e em que formato (texto, JSON, planilha, etc)"
  },
  
  "user_journey_map": {
    "mermaid_code": "C√≥digo Mermaid (formato 'journey') representando a JORNADA COMPLETA do usu√°rio. EXEMPLO:\n\njourney\n  title Jornada do Lead at√© Cliente\n  section Descoberta\n    V√™ an√∫ncio: 3: Lead\n    Clica no link: 4: Lead\n    Preenche formul√°rio: 5: Lead\n  section Qualifica√ß√£o\n    Recebe WhatsApp: 5: Lead\n    Conversa com IA: 4: Lead, Bot\n    Agenda reuni√£o: 5: Lead, Vendedor\n  section Convers√£o\n    Reuni√£o comercial: 5: Lead, Vendedor\n    Recebe proposta: 4: Lead\n    Fecha contrato: 5: Cliente\n\nMostre TODOS os pontos de contato, emo√ß√µes (1-5), e atores envolvidos.",
    "description": "Explique a experi√™ncia completa do usu√°rio do in√≠cio ao fim"
  },
  
  "technical_stack_diagram": {
    "mermaid_code": "C√≥digo Mermaid (formato 'graph TB') mostrando FERRAMENTAS organizadas por FUN√á√ÉO. EXEMPLO:\n\ngraph TB\n  subgraph Comunica√ß√£o\n    A[WhatsApp Business API]\n    B[ManyChat]\n  end\n  \n  subgraph Automa√ß√£o\n    C[Make.com]\n    D[N8N]\n  end\n  \n  subgraph IA\n    E[OpenAI GPT-4]\n    F[Anthropic Claude]\n  end\n  \n  subgraph Dados\n    G[Google Sheets]\n    H[Airtable]\n  end\n  \n  subgraph Interface\n    I[Lovable Dashboard]\n  end\n  \n  A --> C\n  B --> C\n  C --> E\n  C --> G\n  G --> I\n  style C fill:#22d3ee\n  style E fill:#10b981\n  style I fill:#a855f7\n\nOrganize por FUN√á√ÉO (Comunica√ß√£o, Automa√ß√£o, IA, Dados, Interface). Mostre FERRAMENTAS REAIS, n√£o conceitos gen√©ricos.",
    "description": "Descreva as ferramentas agrupadas por fun√ß√£o e como se conectam"
  },
  
  "mind_map": {
    "central_idea": "Ideia principal em uma frase impactante",
    "branches": [
      {
        "name": "FASE 1: Prepara√ß√£o (Semana 1)",
        "children": ["Item espec√≠fico 1", "Item espec√≠fico 2", ...]
      },
      {
        "name": "FASE 2: Implementa√ß√£o (Semanas 2-3)",
        "children": ["Item espec√≠fico 1", "Item espec√≠fico 2", ...]
      },
      {
        "name": "FASE 3: Otimiza√ß√£o (Semana 4)",
        "children": ["Item espec√≠fico 1", "Item espec√≠fico 2", ...]
      },
      {
        "name": "FASE 4: Escala (Semana 5+)",
        "children": ["Item espec√≠fico 1", "Item espec√≠fico 2", ...]
      }
    ]
  },
  
  "framework_quadrants": {
    "quadrant1_automation": {
      "title": "ü§ñ Automa√ß√£o e L√≥gica",
      "description": "Como automatizar usando Make, N8N ou Zapier - cen√°rios visuais conectando ferramentas.",
      "items": [
        "Cen√°rio Make 1: WhatsApp webhook ‚Üí OpenAI qualifica ‚Üí Google Sheets salva ‚Üí Email notifica (economiza 5h/dia)",
        "Cen√°rio Make 2: Quando nova linha em Sheets ‚Üí Make valida dados ‚Üí envia para CRM ‚Üí atualiza status",
        "N8N workflow: Trigger agendado a cada 1h ‚Üí busca novos leads ‚Üí processa com IA ‚Üí salva resultados"
      ],
      "tool_names": ["Make", "N8N", "Zapier"],
      "integration_details": "Webhooks entre ferramentas, autentica√ß√£o OAuth, triggers e a√ß√µes visuais - sem c√≥digo."
    },
    "quadrant2_ai": {
      "title": "üß† IA e Processamento",
      "description": "Como usar IA via Make/N8N chamando APIs - modelos, custos, prompts.",
      "items": [
        "üéØ CHAMADA VIA MAKE: M√≥dulo HTTP do Make ‚Üí OpenAI API ‚Üí recebe resposta JSON ‚Üí processa no pr√≥ximo m√≥dulo",
        "üß† Modelo recomendado: GPT-4 Turbo para an√°lise, GPT-3.5 para respostas simples",
        "üìä Configura√ß√£o no Make: Headers com API key, Body com prompt formatado, Parse de resposta JSON",
        "üîÑ Fallback: Se OpenAI falha (erro 429), Make tenta Claude ou repete ap√≥s 30s"
      ],
      "tool_names": ["OpenAI via Make", "Anthropic via Make", "Lovable AI (se tem dashboard)"],
      "ai_strategy": "üöÄ ESTRAT√âGIA RAFAEL MILAGRE:\n1. SEMPRE processar IA via Make/N8N (nunca direto do frontend)\n2. Usar m√≥dulo HTTP com API keys nas integra√ß√µes do Make\n3. Configurar rate limiting com delay de 2s entre chamadas\n4. Armazenar respostas em Google Sheets para cache\n5. Dashboard Lovable apenas EXIBE dados, n√£o processa\n\nüìã Setup no Make:\n- M√≥dulo 'HTTP - Make a Request'\n- Method: POST\n- URL: https://api.openai.com/v1/chat/completions\n- Headers: Authorization: Bearer [API_KEY]\n- Body: {model, messages, temperature}\n- Parse response: {{body.choices[0].message.content}}\n\nüí° Casos de uso:\n- Qualifica√ß√£o de leads: Make captura ‚Üí OpenAI analisa ‚Üí Sheets classifica\n- Chatbot: ManyChat envia ‚Üí Make processa com IA ‚Üí ManyChat responde\n- Resumos: Make pega dados ‚Üí IA resume ‚Üí Email envia"
    },
    "quadrant3_data": {
      "title": "üìä Dados e Armazenamento",
      "description": "Onde salvar dados - Google Sheets, Airtable ou Supabase (nessa ordem de prioridade).",
      "items": [
        "Google Sheets: Planilha principal com abas [Leads, Conversas, M√©tricas] - integra direto com Make",
        "Airtable: Se precisa relacionamentos (ex: Leads ‚Üí Empresas ‚Üí Contatos) - views e filtros visuais",
        "Supabase: Apenas se realmente precisa SQL avan√ßado ou RLS - conectar via Make HTTP module"
      ],
      "tool_names": ["Google Sheets", "Airtable", "Supabase"],
      "data_architecture": "Fluxo: Dados entram via Make ‚Üí Salvam em Sheets/Airtable ‚Üí Dashboard Lovable l√™ via API/integra√ß√£o."
    },
    "quadrant4_interface": {
      "title": "üé® Interface e Visualiza√ß√£o",
      "description": "Como usu√°rio interage - ManyChat para chat, Lovable para dashboard visual.",
      "items": [
        "ManyChat: Chatbot no WhatsApp com bot√µes, menus, coleta de dados - sem c√≥digo",
        "Dashboard Lovable: Painel web com gr√°ficos, tabelas, filtros - puxa dados de Sheets/Airtable via API",
        "Typebot: Chatbot web customizado para site - fluxos visuais, integra com Make via webhook"
      ],
      "tool_names": ["ManyChat", "Lovable", "Typebot", "WhatsApp Business API"],
      "ux_considerations": "ManyChat para captura, Make para processar, Lovable para visualizar - separa√ß√£o clara de responsabilidades."
    }
  },
  
  "required_tools": {
    "essential": [
      {
        "name": "Nome EXATO da ferramenta (PRIORIZE Make, N8N, ManyChat, Google Sheets antes de c√≥digo)",
        "category": "Categoria",
        "reason": "Por que √© essencial focando em CONFIGURA√á√ÉO, n√£o c√≥digo. Ex: 'Make permite conectar WhatsApp com OpenAI sem programar nada, apenas configurando m√≥dulos visuais.'",
        "setup_complexity": "easy/medium/hard (configurar Make √© 'easy', programar API √© 'hard')",
        "setup_steps": "Passos de CONFIGURA√á√ÉO (n√£o c√≥digo): '1. Criar conta Make, 2. Adicionar m√≥dulo WhatsApp, 3. Conectar com OAuth, 4. Adicionar m√≥dulo HTTP OpenAI, 5. Mapear dados entre m√≥dulos'",
        "cost_estimate": "USD/m√™s (Make Core $10, Pro $16, etc)",
        "logo_url": "URL da logo (COPIE EXATAMENTE da lista de ferramentas dispon√≠veis. Make: incluir logo do Make, n√£o API gen√©rica)",
        "alternatives": ["Alt 1 com trade-offs claros (ex: 'Zapier - mais caro mas interface ainda mais simples')"]
      }
    ],
    "optional": [
      {
        "name": "Nome EXATO (priorize ferramentas no-code)",
        "category": "Categoria",
        "reason": "Por que PODE ser √∫til focando em casos espec√≠ficos",
        "when_to_use": "Quando configura√ß√£o visual n√£o basta (ex: 'Supabase s√≥ quando Google Sheets n√£o aguenta >100k linhas')",
        "cost_estimate": "USD/m√™s",
        "logo_url": "URL da logo"
      }
    ]
  },
  
  ‚ö†Ô∏è IMPORTANTE SOBRE FERRAMENTAS:
  - SEMPRE priorize Make/N8N antes de mencionar "desenvolver API" ou "criar edge function"
  - ManyChat para WhatsApp/Instagram antes de "programar chatbot"
  - Google Sheets para dados antes de "criar banco SQL"
  - Lovable APENAS para dashboard visual - backend sempre em Make/N8N
  - Raz√£o para incluir Make: "Plataforma de automa√ß√£o visual que conecta APIs sem c√≥digo - essencial para l√≥gica de neg√≥cio"
  - Raz√£o para incluir Lovable: "Apenas se precisar dashboard web para visualizar dados - n√£o para processar l√≥gica"
  
  "implementation_checklist": [
    {
      "step_number": 1,
      "title": "T√≠tulo do passo de CONFIGURA√á√ÉO (n√£o 'Programar X' mas 'Configurar m√≥dulo Y no Make')",
      "description": "Descri√ß√£o PASSO-A-PASSO VISUAL (5-8 frases): 1. Abra Make.com, 2. Clique em Create Scenario, 3. Adicione m√≥dulo WhatsApp, 4. Conecte sua conta Business, 5. Configure trigger 'New Message'... SEM C√ìDIGO.",
      "estimated_time": "Tempo de configura√ß√£o (n√£o desenvolvimento)",
      "difficulty": "easy/medium/hard (configurar √© easier que programar)",
      "dependencies": [],
      "validation_criteria": "Como testar: 'Envie mensagem de teste no WhatsApp e veja no hist√≥rico do Make se trigger ativou'",
      "common_pitfalls": "Erros comuns de CONFIGURA√á√ÉO: 'Esquecer de ativar cen√°rio', 'N√£o dar permiss√µes no OAuth', 'Webhook URL errada'",
      "resources": ["URL tutorial Make/ManyChat/Sheets", "URL docs da ferramenta"]
    }
  ]
}

REGRAS RAFAEL MILAGRE:
‚úì Seja ULTRA-ESPEC√çFICO em CONFIGURA√á√ÉO, n√£o c√≥digo ("abra Make.com/dashboard, clique em...")
‚úì Checklist: M√çNIMO 12 steps, M√ÅXIMO 25 - todos de CONFIGURA√á√ÉO
‚úì Cada step = mini-tutorial VISUAL (5-8 frases passo-a-passo)
‚úì M√©tricas mensur√°veis: "reduz de 2h para 15min configurando 3 m√≥dulos no Make"
‚úì Ferramentas: 10-18 total - PRIORIZE Make, N8N, ManyChat, Sheets
‚úì NUNCA mencione: edge functions, SQL schemas, TypeScript, React components
‚úì SEMPRE mencione: m√≥dulos Make, flows N8N, bots ManyChat, colunas Sheets
‚úì Evite "programar", "desenvolver", "codificar" ‚Üí use "configurar", "conectar", "integrar"
‚úì Lovable APENAS se precisa dashboard - e mesmo assim, backend em Make
‚úì SEMPRE gere os 4 diagramas Mermaid mostrando FERRAMENTAS, n√£o c√≥digo`;

    const userPrompt = `IDEIA INICIAL:
"${idea}"
${contextFromAnswers}

‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS PARA O T√çTULO (CAMPO OBRIGAT√ìRIO):
- O campo "title" no JSON NUNCA pode ser: undefined, null, "undefined", "null", "" (vazio) ou menor que 10 caracteres
- Analise a DOR CENTRAL e o OBJETIVO FINAL do usu√°rio (n√£o o processo, mas o resultado)
- **SINTETIZE**: N√£o copie o in√≠cio da ideia literalmente - EXTRAIA a ess√™ncia e reformule profissionalmente
- Tamanho ideal: 30-60 caracteres (m√≠nimo 20, m√°ximo 60)
- FORMATO: [Tecnologia/Sistema] + [Resultado Espec√≠fico] OU [Benef√≠cio] + [M√©todo]
- **PROIBIDO ABSOLUTO**: Come√ßar com "Implementar", "Criar", "Fazer", "Quero", "Preciso", "Desenvolver"
- **PROIBIDO ABSOLUTO**: Copiar palavra por palavra o in√≠cio da ideia do usu√°rio
- **OBRIGAT√ìRIO**: T√≠tulo deve ser sint√©tico, profissional e auto-explicativo

EXEMPLOS DE S√çNTESE PROFISSIONAL:
Ideia: "Quero implementar uma intelig√™ncia artificial para resumir o atendimento dos corredores e me mandar por e-mail no fim do dia"
‚úÖ CORRETO: "Resumo Autom√°tico de Atendimentos via IA + E-mail"
‚úÖ CORRETO: "Sistema de Resumo IA para Atendimentos Di√°rios"
‚ùå ERRADO: "Implementar uma intelig√™ncia artificial para resumir o atendimento dos cor" (c√≥pia literal truncada)

Ideia: "automatizar qualifica√ß√£o de leads no whatsapp usando IA"
‚úÖ CORRETO: "Qualifica√ß√£o Autom√°tica de Leads via WhatsApp + IA"
‚úÖ CORRETO: "Sistema de Qualifica√ß√£o de Leads com IA no WhatsApp"
‚ùå ERRADO: "Automatizar qualifica√ß√£o de leads no whatsapp" (c√≥pia literal)

Ideia: "dashboard para acompanhar vendas da loja online em tempo real"
‚úÖ CORRETO: "Dashboard Analytics em Tempo Real para E-commerce"
‚úÖ CORRETO: "Painel de Vendas Online com Atualiza√ß√£o Instant√¢nea"
‚ùå ERRADO: "Dashboard para acompanhar vendas da loja online" (c√≥pia literal)

Ideia: "criar um chatbot que responde d√∫vidas dos clientes 24 horas"
‚úÖ CORRETO: "Chatbot Atendimento 24/7 com IA"
‚úÖ CORRETO: "Assistente Virtual Inteligente para Suporte Cont√≠nuo"
‚ùå ERRADO: "Criar um chatbot que responde d√∫vidas dos clientes" (c√≥pia literal)

MAIS EXEMPLOS DE T√çTULOS EXCELENTES:
‚úÖ "CRM Autom√°tico com Sincroniza√ß√£o Make"
‚úÖ "Pipeline de Dados via Airtable + Google Sheets"
‚úÖ "Notifica√ß√µes Inteligentes de Estoque Baixo"
‚úÖ "Gerador de Relat√≥rios Automatizado com IA"

EXEMPLOS DE T√çTULOS RUINS (N√ÉO FAZER):
‚ùå "undefined" ou qualquer varia√ß√£o (NUNCA retorne isso)
‚ùå "Solu√ß√£o de IA" (gen√©rico demais)
‚ùå "Projeto Builder" (sem contexto)
‚ùå "Sistema Inteligente" (vago)
‚ùå "" (vazio - PROIBIDO)
‚ùå Qualquer t√≠tulo que comece com verbos de a√ß√£o no infinitivo

üî¥ REGRAS OBRIGAT√ìRIAS:
1. **SINTETIZE**: Extraia conceitos-chave, n√£o copie palavras literais da ideia
2. Seja ESPEC√çFICO sobre o que a solu√ß√£o FAZ (resultado final, n√£o processo)
3. Mencione a TECNOLOGIA principal se relevante (IA, WhatsApp, CRM, etc)
4. O t√≠tulo deve fazer sentido SEM ler a descri√ß√£o
5. O campo "title" no JSON DEVE ter pelo menos 10 caracteres de conte√∫do v√°lido
6. **NUNCA** comece com: "Implementar", "Criar", "Fazer", "Quero", "Preciso", "Gostaria"
7. **TESTE MENTAL**: Se o t√≠tulo parece uma c√≥pia do in√≠cio da ideia, REESCREVA

Crie um plano completo seguindo o formato JSON especificado.`;

    console.log(`[BUILDER] üöÄ Chamando Lovable AI (Claude Sonnet 4.5)...`);

    const lovableAIUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";
    const lovableAIKey = Deno.env.get("LOVABLE_API_KEY");

    const aiCallStart = Date.now();

    // Definir tool definition baseado no modo
    let toolDefinition: any;
    
    if (mode === "quick") {
      // MODO QUICK: Gera APENAS capa (t√≠tulo, descri√ß√£o, tags) - 5-10s
      toolDefinition = {
        type: "function",
        function: {
          name: "create_quick_solution",
          description: "Criar apenas a capa da solu√ß√£o (t√≠tulo, descri√ß√£o e tags)",
          parameters: {
            type: "object",
            properties: {
              title: { type: "string", description: "T√≠tulo SINT√âTICO e PROFISSIONAL (20-60 chars). NUNCA copie literalmente. EXTRAIA ess√™ncia. Formato: [Tecnologia] + [Resultado]. PROIBIDO: Implementar, Criar, Fazer" },
              short_description: { type: "string", description: "Descri√ß√£o objetiva em 3-5 frases sobre O QUE √© e COMO funciona" },
              tags: { type: "array", items: { type: "string" }, description: "3-5 tags relevantes (ex: IA Generativa, Automa√ß√£o, WhatsApp)" }
            },
            required: ["title", "short_description", "tags"]
          }
        }
      };
    } else {
      // MODO COMPLETE: Gera tudo (2-3min) - mant√©m o original
      toolDefinition = {
        type: "function",
        function: {
          name: "create_solution_plan",
          description: "Criar plano detalhado de implementa√ß√£o de solu√ß√£o com IA",
          parameters: {
            type: "object",
            properties: {
              title: { type: "string", description: "T√≠tulo SINT√âTICO, PROFISSIONAL e CURTO (20-60 chars)" },
              short_description: { type: "string", description: "Descri√ß√£o em 3-5 frases" },
              tags: { type: "array", items: { type: "string" } },
              technical_overview: {
                type: "object",
                properties: {
                  complexity: { type: "string", enum: ["low", "medium", "high"] },
                  estimated_time: { type: "string" },
                  main_stack: { type: "string" }
                },
                required: ["complexity", "estimated_time", "main_stack"]
              },
              business_context: { type: "string" },
              competitive_advantages: { type: "array" },
              expected_kpis: { type: "array" },
              mind_map: { type: "object" },
              framework_quadrants: { type: "object" },
              required_tools: { type: "object" },
              architecture_flowchart: { type: "object" },
              data_flow_diagram: { type: "object" },
              user_journey_map: { type: "object" },
              technical_stack_diagram: { type: "object" },
              implementation_checklist: { type: "array" }
            },
            required: ["title", "short_description", "technical_overview", "framework_quadrants", "required_tools", "implementation_checklist", "architecture_flowchart"]
          }
        }
      };
    }

    console.log(`[BUILDER][${requestId}] üì¶ Tool: ${toolDefinition.function.name}`);
    
    const aiResponse = await fetch(lovableAIUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableAIKey}`,
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.7,
        max_tokens: mode === "quick" ? 8000 : 64000,
        tools: [toolDefinition],
        tool_choice: { type: "function", function: { name: toolDefinition.function.name } }
      }),
      signal: AbortSignal.timeout(mode === "quick" ? 60000 : 180000)
    });

    if (!aiResponse.ok) {
      if (aiResponse.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes atingido." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (aiResponse.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      throw new Error(`Erro na API: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const aiResponseTime = Date.now() - aiCallStart;

    console.log(`[BUILDER][${requestId}] ‚ö° Tempo de resposta: ${(aiResponseTime / 1000).toFixed(1)}s`);
    console.log(`[BUILDER][${requestId}] üìä Tokens: ${aiData.usage?.total_tokens || 'N/A'}`);

    // Extrair dados do tool_calls (n√£o content)
    const message = aiData.choices?.[0]?.message;
    if (!message || !message.tool_calls?.[0]) {
      console.error("[BUILDER] ‚ùå Resposta n√£o cont√©m tool_calls");
      throw new Error("Resposta inv√°lida da IA");
    }

    let solutionData;
    try {
      const toolCall = message.tool_calls[0];
      solutionData = JSON.parse(toolCall.function.arguments);
    } catch (parseError) {
      console.error("[BUILDER] ‚ùå Erro ao fazer parse do JSON:", parseError);
      throw new Error("JSON inv√°lido na resposta");
    }

    console.log(`[BUILDER][${requestId}] ‚úÖ JSON v√°lido extra√≠do via tool calling`);
    console.log(`[BUILDER][${requestId}] üìä Modo: ${mode}, campos: ${Object.keys(solutionData).length}`);
    console.log(`[BUILDER][${requestId}] üìù T√≠tulo: "${solutionData.title}"`);

    // Valida√ß√µes apenas para modo complete
    if (mode === "complete") {
      console.log(`[BUILDER][${requestId}] ‚úì Checklist: ${solutionData.implementation_checklist?.length || 0} steps`);
      console.log(`[BUILDER][${requestId}] ‚úì Diagramas: ${Object.keys(solutionData).filter(k => k.includes('diagram') || k.includes('flowchart') || k.includes('map')).length}`);
      
      const validateMermaidSyntax = (code: string, type: string): { valid: boolean; errors: string[] } => {
        const errors: string[] = [];
        
        if (!code || code.trim() === '') {
          errors.push('C√≥digo Mermaid vazio');
          return { valid: false, errors };
        }
        
        const lines = code.split('\n').map(l => l.trim()).filter(l => l.length > 0);
        
        // Validar tipo de diagrama
        if (type === 'architecture' || type === 'stack') {
          if (!lines[0].match(/^graph\s+(TD|LR|TB|RL)/i)) {
            errors.push(`Primeira linha deve ser "graph TD/LR/TB/RL", encontrado: "${lines[0]}"`);
          }
          // Detectar uso incorreto de chaves
          if (code.includes('{') && !code.match(/\{\s*\}/)) {
            errors.push('Uso inv√°lido de chaves {} em graph (use apenas para decis√µes vazias ou remova)');
          }
        }
        
        if (type === 'dataflow') {
          if (!lines[0].match(/^flowchart\s+(LR|TD|TB|RL)/i) && !lines[0].match(/^sequenceDiagram/i)) {
            errors.push(`Primeira linha deve ser "flowchart LR/TD" ou "sequenceDiagram", encontrado: "${lines[0]}"`);
          }
        }
        
        if (type === 'journey') {
          if (lines[0].toLowerCase() !== 'journey') {
            errors.push(`Primeira linha deve ser "journey", encontrado: "${lines[0]}"`);
          }
          
          // Validar formato de tarefas: "Task: SCORE: Actor"
          const taskLines = lines.filter(l => !l.startsWith('title') && !l.startsWith('section') && l.includes(':'));
          for (const taskLine of taskLines) {
            const parts = taskLine.split(':');
            if (parts.length >= 2) {
              const scorePart = parts[1].trim();
              if (!/^\d+$/.test(scorePart)) {
                errors.push(`Journey: score deve ser n√∫mero de 1-5, encontrado "${scorePart}" em: "${taskLine}"`);
              }
            }
          }
        }
        
        return { valid: errors.length === 0, errors };
      };

      // Validar cada diagrama
      if (solutionData.architecture_flowchart?.mermaid_code) {
        const validation = validateMermaidSyntax(solutionData.architecture_flowchart.mermaid_code, 'architecture');
        if (!validation.valid) {
          console.warn('[BUILDER] ‚ö†Ô∏è Erros em architecture_flowchart:', validation.errors);
        } else {
          console.log('[BUILDER] ‚úÖ architecture_flowchart: sintaxe v√°lida');
        }
      }

      if (solutionData.data_flow_diagram?.mermaid_code) {
        const validation = validateMermaidSyntax(solutionData.data_flow_diagram.mermaid_code, 'dataflow');
        if (!validation.valid) {
          console.warn('[BUILDER] ‚ö†Ô∏è Erros em data_flow_diagram:', validation.errors);
        } else {
          console.log('[BUILDER] ‚úÖ data_flow_diagram: sintaxe v√°lida');
        }
      }

      if (solutionData.user_journey_map?.mermaid_code) {
        const validation = validateMermaidSyntax(solutionData.user_journey_map.mermaid_code, 'journey');
        if (!validation.valid) {
          console.warn('[BUILDER] ‚ö†Ô∏è Erros em user_journey_map:', validation.errors);
        } else {
          console.log('[BUILDER] ‚úÖ user_journey_map: sintaxe v√°lida');
        }
      }

      if (solutionData.technical_stack_diagram?.mermaid_code) {
        const validation = validateMermaidSyntax(solutionData.technical_stack_diagram.mermaid_code, 'stack');
        if (!validation.valid) {
          console.warn('[BUILDER] ‚ö†Ô∏è Erros em technical_stack_diagram:', validation.errors);
        } else {
          console.log('[BUILDER] ‚úÖ technical_stack_diagram: sintaxe v√°lida');
        }
      }
    } else {
      console.log(`[BUILDER][${requestId}] ‚ö° MODO QUICK: Valida√ß√µes Mermaid puladas`);
    }

    // üîß FUN√á√ÉO DE SANITIZA√á√ÉO MERMAID
    const sanitizeMermaidCode = (code: string): string => {
      // Remover quebras de linha no meio de defini√ß√µes de conex√µes
      return code
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0)
        .join('\n')
        // Corrigir conex√µes com label quebradas: -->|label|\n  B[Node]
        .replace(/-->\|([^|]+)\|\s*\n\s*([A-Z]\[)/g, '-->|$1| $2')
        // Corrigir setas simples quebradas: -->\n  B[Node]
        .replace(/-->\s*\n\s*([A-Z][\[\(])/g, '--> $1')
        // Corrigir setas com estilo quebradas: -.->|\n  B[Node]
        .replace(/\.->\|([^|]*)\|\s*\n\s*([A-Z][\[\(])/g, '.->|$1| $2');
    };

    // Aplicar sanitiza√ß√£o em architecture_flowchart antes de salvar
    if (solutionData.architecture_flowchart?.mermaid_code) {
      const originalCode = solutionData.architecture_flowchart.mermaid_code;
      solutionData.architecture_flowchart.mermaid_code = sanitizeMermaidCode(originalCode);
      console.log('[BUILDER] üîß Mermaid sanitizado com sucesso');
    }

    // üîß VALIDA√á√ÉO ROBUSTA E INTELIGENTE DO T√çTULO
    const invalidTitles = [undefined, null, 'undefined', 'null', ''];
    const titleString = solutionData.title ? String(solutionData.title).trim() : '';
    
    // Detectar c√≥pias literais da ideia (primeiros 50 chars da ideia)
    const ideaStart = idea.substring(0, 50).toLowerCase().trim();
    const titleLower = titleString.toLowerCase();
    const isLiteralCopy = titleLower.startsWith(ideaStart.substring(0, 30));
    
    // Detectar t√≠tulos que come√ßam com verbos de a√ß√£o proibidos
    const startsWithForbiddenVerb = /^(implementar|criar|fazer|quero|preciso|gostaria|desenvolver)/i.test(titleString);
    
    // Detectar t√≠tulo truncado no meio de palavra (termina com palavra incompleta)
    const endsWithIncompleteWord = titleString.length > 40 && !titleString.match(/[\s\-][\w]{3,}$/);
    
    // Valida√ß√£o mais rigorosa: t√≠tulo muito longo tamb√©m √© inv√°lido
    const titleTooLong = titleString.length > 60;
    
    const titleIsInvalid = 
      invalidTitles.includes(solutionData.title) || 
      titleString === '' ||
      titleString.length < 20 || // T√≠tulo muito curto (m√≠nimo 20 chars)
      titleTooLong || // T√≠tulo muito longo (m√°ximo 60 chars)
      /^[A-Z][a-z]*(\s[A-Z][a-z]*){0,2}\.$/.test(titleString) || // Palavras isoladas com ponto
      isLiteralCopy || // C√≥pia literal da ideia
      startsWithForbiddenVerb || // Come√ßa com verbo proibido
      endsWithIncompleteWord; // Truncado no meio de palavra
    
    if (titleIsInvalid) {
      console.warn("[BUILDER] ‚ö†Ô∏è T√≠tulo inv√°lido detectado:", {
        received: solutionData.title,
        type: typeof solutionData.title,
        length: titleString.length,
        isLiteralCopy,
        startsWithForbiddenVerb,
        endsWithIncompleteWord
      });
      
      // üß† FALLBACK INTELIGENTE: Extrair palavras-chave e sintetizar
      
      // Remover palavras comuns (stopwords)
      const stopwords = ['o', 'a', 'os', 'as', 'de', 'do', 'da', 'dos', 'das', 'em', 'no', 'na', 'nos', 'nas', 
                         'para', 'com', 'por', 'que', 'e', 'um', 'uma', 'eu', 'meu', 'minha',
                         'quero', 'preciso', 'gostaria', 'criar', 'fazer', 'implementar', 'desenvolver'];
      
      // Extrair palavras significativas (substantivos, tecnologias)
      const words = idea
        .toLowerCase()
        .replace(/[^\w\s√°√©√≠√≥√∫√¢√™√¥√£√µ√ß]/g, ' ') // Remove pontua√ß√£o
        .split(/\s+/)
        .filter(w => w.length > 3 && !stopwords.includes(w));
      
      // Identificar tecnologias/palavras-chave importantes
      const techKeywords = ['whatsapp', 'crm', 'email', 'chatbot', 'dashboard', 'ia', 'inteligencia', 'artificial',
                           'automatico', 'automacao', 'sistema', 'relatorio', 'notificacao', 'analise', 'dados',
                           'lead', 'cliente', 'atendimento', 'vendas', 'estoque', 'pedido'];
      
      const foundTech = words.filter(w => techKeywords.some(tk => w.includes(tk) || tk.includes(w)));
      const mainWords = foundTech.length > 0 ? foundTech.slice(0, 3) : words.slice(0, 3);
      
      // Construir t√≠tulo profissional
      let fallbackTitle = '';
      
      if (mainWords.length >= 2) {
        // Capitalizar palavras
        const capitalizedWords = mainWords.map(w => 
          w.charAt(0).toUpperCase() + w.slice(1)
        );
        
        // Formato: "Sistema de [palavra1] + [palavra2]"
        fallbackTitle = `Sistema de ${capitalizedWords[0]}`;
        if (capitalizedWords[1]) {
          fallbackTitle += ` + ${capitalizedWords[1]}`;
        }
      } else {
        // Fallback gen√©rico mas profissional
        const shortId = crypto.randomUUID().substring(0, 6).toUpperCase();
        fallbackTitle = `Solu√ß√£o de Automa√ß√£o ${shortId}`;
      }
      
      // Limitar a 60 caracteres
      solutionData.title = fallbackTitle.length > 60 
        ? fallbackTitle.substring(0, 57) + '...'
        : fallbackTitle;
      
      console.log(`[BUILDER] üîß T√≠tulo fallback inteligente: "${solutionData.title}"`);
      console.log(`[BUILDER] üìù Palavras-chave extra√≠das: ${mainWords.join(', ')}`);
    } else {
      // Garantir que t√≠tulo n√£o exceda 60 caracteres
      if (titleString.length > 60) {
        solutionData.title = titleString.substring(0, 57) + '...';
        console.log(`[BUILDER] ‚úÇÔ∏è T√≠tulo truncado para 60 chars: "${solutionData.title}"`);
      }
    }

    console.log(`[BUILDER] ‚úÖ T√≠tulo final validado: "${solutionData.title}"`);

    // ========== INJETAR LOVABLE (somente em modo complete) ==========
    if (mode === "complete" && solutionData.required_tools) {
      console.log('[BUILDER] üöÄ Verificando se Lovable est√° nas ferramentas...');

      const lovableExists = solutionData.required_tools?.essential?.some(
        (tool: any) => tool.name?.toLowerCase().includes('lovable')
      ) || solutionData.required_tools?.optional?.some(
        (tool: any) => tool.name?.toLowerCase().includes('lovable')
      );

      if (!lovableExists) {
      console.log('[BUILDER] ‚ûï Lovable n√£o encontrado, adicionando como ferramenta recomendada');
      
      // Buscar dados do Lovable no cat√°logo de tools
      const { data: lovableTool } = await supabase
        .from('tools')
        .select('*')
        .ilike('name', '%lovable%')
        .eq('status', true)
        .limit(1)
        .maybeSingle();
      
      const lovableToolData = {
        name: lovableTool?.name || 'Lovable',
        logo_url: lovableTool?.logo_url || 'https://lovable.dev/logo.png',
        category: lovableTool?.category || 'No-Code Development',
        reason: 'Plataforma ideal para desenvolvimento r√°pido de aplica√ß√µes web modernas com IA. Permite criar frontend + backend completo sem c√≥digo, integrando facilmente com APIs externas e automa√ß√µes. Perfeita para MVPs e prot√≥tipos validados.',
        setup_complexity: 'easy',
        setup_steps: '1. Criar conta gratuita\n2. Descrever sua aplica√ß√£o em linguagem natural\n3. A IA gera c√≥digo React + Supabase automaticamente\n4. Deploy instant√¢neo',
        cost_estimate: 'Gratuito (com limites) / A partir de $20/m√™s para projetos profissionais',
        alternatives: ['Bubble.io (mais visual, menos flex√≠vel)', 'Webflow (foco em sites, n√£o em apps)']
      };
      
      // Adicionar como primeira ferramenta essencial ou opcional
      if (!solutionData.required_tools) {
        solutionData.required_tools = { essential: [], optional: [] };
      }
      if (!solutionData.required_tools.essential) {
        solutionData.required_tools.essential = [];
      }
      if (!solutionData.required_tools.optional) {
        solutionData.required_tools.optional = [];
      }
      
        // Adicionar como opcional (recomendada) por padr√£o
        solutionData.required_tools.optional.unshift(lovableToolData);
        console.log('[BUILDER] ‚úÖ Lovable adicionado como ferramenta recomendada');
      } else {
        console.log('[BUILDER] ‚úì Lovable j√° est√° na lista de ferramentas');
      }
    }

    // Salvar no banco (adaptar campos conforme modo)
    const generationTime = Date.now() - startTime;

    // Campos base (sempre presentes)
    const insertData: any = {
      user_id: userId,
      original_idea: idea,
      title: solutionData.title,
      short_description: solutionData.short_description,
      tags: solutionData.tags || ['IA Generativa'],
      framework_mapping: mode === "complete" ? solutionData.framework_quadrants : null,
      generation_model: "google/gemini-2.5-flash",
      generation_time_ms: generationTime,
      generation_status: mode === "quick" ? "quick" : "complete",
      is_complete: mode === "complete"
    };

    // Campos opcionais (apenas em modo complete)
    if (mode === "complete") {
      insertData.mind_map = solutionData.mind_map;
      insertData.required_tools = solutionData.required_tools;
      insertData.implementation_checklist = solutionData.implementation_checklist;
      insertData.architecture_flowchart = solutionData.architecture_flowchart;
      insertData.data_flow_diagram = solutionData.data_flow_diagram;
      insertData.user_journey_map = solutionData.user_journey_map;
      insertData.technical_stack_diagram = solutionData.technical_stack_diagram;
      insertData.lovable_prompt = solutionData.lovable_prompt;
    }

    const { data: insertedSolution, error: saveError } = await supabase
      .from("ai_generated_solutions")
      .insert(insertData)
      .select()
      .single();

    // Assign to outer scope for timeout handler
    savedSolution = insertedSolution;

    if (saveError) {
      console.error("[BUILDER] ‚ùå Erro ao salvar solu√ß√£o no banco:");
      console.error("[BUILDER] üìã Detalhes do erro:", JSON.stringify(saveError, null, 2));
      console.error("[BUILDER] üìä Dados tentados:", {
        user_id: userId,
        title: solutionData.title,
        hasFramework: !!solutionData.framework_quadrants,
        hasMindMap: !!solutionData.mind_map,
        hasTools: !!solutionData.required_tools
      });
      
      return new Response(
        JSON.stringify({ 
          error: "Falha ao salvar solu√ß√£o no banco de dados",
          code: "SAVE_ERROR",
          details: saveError.message || "Erro desconhecido",
          suggestion: "Verifique se todas as colunas necess√°rias existem na tabela"
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, "Content-Type": "application/json" } 
        }
      );
    }

    // Incrementar contador
    await supabase.rpc("increment_ai_solution_usage", { p_user_id: userId });

    console.log(`[BUILDER] ‚úÖ === GERA√á√ÉO COMPLETA CONCLU√çDA ===`);
    console.log(`[BUILDER] ‚è±Ô∏è Tempo total: ${(generationTime / 1000).toFixed(1)}s`);
    console.log(`[BUILDER] üíæ Solution ID: ${savedSolution.id}`);
    console.log(`[BUILDER] üìä Tags: ${solutionData.tags?.join(', ') || 'IA Generativa'}`);
    
    // ==========================================
    // FINAL CHECK: GARANTIR QUE SOLUTION EXISTE
    // ==========================================
    if (!savedSolution || !savedSolution.id) {
      throw new Error("Solu√ß√£o n√£o foi salva corretamente no banco");
    }
    
    console.log(`[BUILDER] üéâ === PROCESSO COMPLETO FINALIZADO ===`);
    console.log(`[BUILDER] üíæ Retornando solution.id: ${savedSolution.id}`);
    console.log(`[BUILDER] ‚è±Ô∏è  Tempo total: ${generationTime}ms`);
    
    // üöÄ GERAR LOVABLE PROMPT EM BACKGROUND (N√ÉO BLOQUEIA RESPOSTA)
    const lovableApiKey = Deno.env.get("LOVABLE_API_KEY");
    if (!lovableApiKey) {
      console.warn(`[BUILDER][${requestId}] ‚ö†Ô∏è LOVABLE_API_KEY n√£o configurada, pulando prompt Lovable`);
    } else if (savedSolution?.id) {
      console.log(`[BUILDER][${requestId}] üöÄ Iniciando gera√ß√£o de Lovable Prompt em BACKGROUND`);
      
      // ‚úÖ FASE 1 FIX: Usar EdgeRuntime.waitUntil para garantir que roda em background
      EdgeRuntime.waitUntil(
        generateLovablePromptAsync(
          savedSolution.id,
          solutionData,
          idea,
          answers,
          requestId,
          supabase,
          lovableApiKey
        ).catch(err => {
          console.error(`[BUILDER-ASYNC][${requestId}] ‚ùå Erro background Lovable Prompt:`, err);
        })
      );
    }

    return new Response(
      JSON.stringify({
        success: true,
        solution: savedSolution,
        generation_time_ms: generationTime,
        tokens_used: aiData.usage?.total_tokens,
      }),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    const errorTime = Date.now() - startTime;
    
    // üîß FASE 3: Log detalhado e mensagens descritivas
    console.error(`[BUILDER][${requestId}] ‚ùå Erro interno:`, {
      requestId,
      message: error.message,
      name: error.name,
      stack: error.stack,
      cause: error.cause,
      timestamp: new Date().toISOString(),
      executionTime: `${errorTime}ms`
    });
    
    // Determinar mensagem apropriada baseada no erro
    let userMessage = "Ops! Algo deu errado ao gerar a solu√ß√£o.";
    let errorDetails = error.message;
    
    if (error.message?.includes('JSON inv√°lido') || error.message?.includes('JSON n√£o encontrado')) {
      userMessage = "A IA teve dificuldade em formatar a resposta. Por favor, tente novamente.";
      errorDetails = "Erro ao processar resposta da IA";
    } else if (error.message?.includes('timeout') || error.message?.includes('AbortError')) {
      userMessage = "A gera√ß√£o demorou muito. Por favor, tente novamente com uma descri√ß√£o mais simples.";
      errorDetails = "Timeout na gera√ß√£o";
    } else if (error.message?.includes('429')) {
      userMessage = "Limite de requisi√ß√µes atingido. Aguarde alguns minutos.";
      errorDetails = "Rate limit atingido";
    } else if (error.message?.includes('402')) {
      userMessage = "Cr√©ditos insuficientes. Entre em contato com o suporte.";
      errorDetails = "Cr√©ditos insuficientes";
    }
    
    // Mensagem descritiva para o cliente
    return new Response(
      JSON.stringify({ 
        error: errorDetails,
        userMessage: userMessage,
        code: "GENERATION_FAILED",
        requestId,
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
