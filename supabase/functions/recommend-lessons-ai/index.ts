import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ [LESSON-AI] Iniciando recomenda√ß√£o de aulas');
    
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    // Verificar autentica√ß√£o
    const authHeader = req.headers.get('Authorization')?.replace('Bearer ', '');
    const { data: { user } } = await supabaseClient.auth.getUser(authHeader);
    
    if (!user) {
      return new Response(JSON.stringify({ error: 'Usu√°rio n√£o autenticado' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log(`üë§ [LESSON-AI] Usu√°rio autenticado: ${user.id}`);

    // Buscar perfil do usu√°rio
    const { data: userProfile } = await supabaseClient
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();

    console.log('üìä [LESSON-AI] Perfil do usu√°rio carregado');

    // Buscar todas as aulas dispon√≠veis (simulado por enquanto)
    const mockLessons = [
      {
        id: 1,
        title: "Fundamentos de Lideran√ßa Digital",
        description: "Aprenda os princ√≠pios b√°sicos da lideran√ßa em ambientes digitais",
        category: "strategy",
        difficulty: "easy",
        duration: "45 min",
        topics: ["lideran√ßa", "transforma√ß√£o digital", "gest√£o de equipes"]
      },
      {
        id: 2,
        title: "Gest√£o de Processos com Automa√ß√£o",
        description: "Como automatizar processos empresariais para aumentar efici√™ncia",
        category: "operational",
        difficulty: "medium",
        duration: "60 min",
        topics: ["automa√ß√£o", "processos", "efici√™ncia operacional"]
      },
      {
        id: 3,
        title: "An√°lise de ROI em Projetos Digitais",
        description: "M√©todos para calcular e justificar retorno sobre investimento",
        category: "revenue",
        difficulty: "advanced",
        duration: "90 min",
        topics: ["ROI", "an√°lise financeira", "projetos digitais"]
      },
      {
        id: 4,
        title: "Customer Experience Digital",
        description: "Estrat√©gias para melhorar a experi√™ncia do cliente online",
        category: "strategy",
        difficulty: "medium",
        duration: "75 min",
        topics: ["experi√™ncia do cliente", "digital", "satisfa√ß√£o"]
      },
      {
        id: 5,
        title: "Data Analytics para Neg√≥cios",
        description: "Como usar dados para tomar decis√µes empresariais estrat√©gicas",
        category: "operational",
        difficulty: "advanced",
        duration: "120 min",
        topics: ["dados", "analytics", "tomada de decis√£o"]
      },
      {
        id: 6,
        title: "Metodologias √Ågeis na Pr√°tica",
        description: "Implementa√ß√£o de Scrum e Kanban em equipes corporativas",
        category: "operational",
        difficulty: "medium",
        duration: "90 min",
        topics: ["agile", "scrum", "kanban", "gest√£o de projetos"]
      }
    ];

    console.log(`üõ†Ô∏è [LESSON-AI] Aulas dispon√≠veis: ${mockLessons.length}`);

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.log('‚ö†Ô∏è [LESSON-AI] Chave OpenAI n√£o encontrada, usando an√°lise b√°sica');
      
      // Fallback b√°sico se n√£o houver OpenAI
      const recommendedLessons = mockLessons.map(lesson => ({
        ...lesson,
        ai_score: Math.floor(Math.random() * 40) + 60, // 60-100%
        reasoning: "An√°lise b√°sica baseada no perfil"
      })).sort((a, b) => b.ai_score - a.ai_score);

      return new Response(JSON.stringify({ lessons: recommendedLessons }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('ü§ñ [LESSON-AI] Iniciando an√°lise com IA real');

    // Prompt para a IA analisar as aulas
    const aiPrompt = `
Voc√™ √© um especialista em educa√ß√£o corporativa e desenvolvimento profissional. Analise as aulas dispon√≠veis e recomende as melhores para este usu√°rio espec√≠fico.

PERFIL DO USU√ÅRIO:
- Setor: ${userProfile?.business_sector || 'N√£o informado'}
- Experi√™ncia: ${userProfile?.experience_level || 'N√£o informado'}
- Cargo: ${userProfile?.job_title || 'N√£o informado'}
- Objetivos: ${userProfile?.business_goals || 'N√£o informado'}
- Desafios: ${userProfile?.main_challenges || 'N√£o informado'}

AULAS DISPON√çVEIS:
${mockLessons.map(lesson => `
- ${lesson.title}
  Categoria: ${lesson.category}
  Dificuldade: ${lesson.difficulty}
  Dura√ß√£o: ${lesson.duration}
  Descri√ß√£o: ${lesson.description}
  T√≥picos: ${lesson.topics.join(', ')}
`).join('\n')}

Para cada aula, forne√ßa:
1. Uma pontua√ß√£o de 0-100 indicando qu√£o relevante ela √© para este usu√°rio espec√≠fico
2. Uma justificativa de 1-2 frases explicando por que √© relevante

Considere:
- N√≠vel de experi√™ncia do usu√°rio
- Setor de atua√ß√£o
- Objetivos profissionais
- Desafios enfrentados
- Sequ√™ncia l√≥gica de aprendizado
- Aplicabilidade pr√°tica no contexto do usu√°rio

Responda APENAS em formato JSON:
{
  "recommendations": [
    {
      "lesson_id": 1,
      "score": 85,
      "reasoning": "Muito relevante para desenvolver habilidades de lideran√ßa espec√≠ficas do seu setor"
    }
  ]
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um especialista em educa√ß√£o corporativa. Sempre responda em JSON v√°lido e seja preciso nas recomenda√ß√µes.'
          },
          {
            role: 'user',
            content: aiPrompt
          }
        ],
        temperature: 0.3,
        max_tokens: 1500
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const aiResult = await response.json();
    console.log('‚úÖ [LESSON-AI] Resposta da IA recebida');

    const aiContent = aiResult.choices[0].message.content;
    const aiRecommendations = JSON.parse(aiContent).recommendations;

    // Combinar recomenda√ß√µes da IA com dados das aulas
    const recommendedLessons = mockLessons.map(lesson => {
      const aiRec = aiRecommendations.find((rec: any) => rec.lesson_id === lesson.id);
      return {
        ...lesson,
        ai_score: aiRec?.score || 50,
        reasoning: aiRec?.reasoning || "Recomenda√ß√£o b√°sica"
      };
    }).sort((a, b) => b.ai_score - a.ai_score);

    console.log('üéØ [LESSON-AI] An√°lise conclu√≠da com sucesso');

    return new Response(JSON.stringify({ 
      lessons: recommendedLessons,
      user_profile: userProfile 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå [LESSON-AI] Erro:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});