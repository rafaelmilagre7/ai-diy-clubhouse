import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ [TRAIL-AI] Iniciando gera√ß√£o de trilha personalizada com IA');
    
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    // Verificar autentica√ß√£o
    const authHeader = req.headers.get('Authorization')?.replace('Bearer ', '');
    const { data: { user } } = await supabaseClient.auth.getUser(authHeader);
    
    if (!user) {
      return new Response(JSON.stringify({ error: 'Usu√°rio n√£o autenticado' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log(`üë§ [TRAIL-AI] Usu√°rio autenticado: ${user.id}`);

    // Buscar perfil completo do usu√°rio
    const { data: userProfile } = await supabaseClient
      .from('profiles')
      .select(`
        *,
        user_roles (
          id,
          name,
          description,
          permissions
        )
      `)
      .eq('id', user.id)
      .single();

    // Buscar dados completos de onboarding para personaliza√ß√£o
    console.log('üìã [TRAIL-AI] Buscando dados de onboarding para personaliza√ß√£o...');
    const { data: onboardingData, error: onboardingError } = await supabaseClient
      .from('onboarding_final')
      .select('*')
      .eq('user_id', user.id)
      .maybeSingle();

    if (onboardingError) {
      console.error('‚ö†Ô∏è [TRAIL-AI] Erro ao buscar onboarding:', onboardingError);
    } else if (onboardingData) {
      console.log('‚úÖ [TRAIL-AI] Dados de onboarding encontrados para personaliza√ß√£o');
    } else {
      console.log('üìù [TRAIL-AI] Onboarding n√£o encontrado, usando dados do perfil b√°sico');
    }

    // Buscar progresso de aprendizado
    const { data: userProgress } = await supabaseClient
      .from('learning_progress')
      .select('*')
      .eq('user_id', user.id);

    // Buscar certificados
    const { data: userCertificates } = await supabaseClient
      .from('learning_certificates')
      .select('*')
      .eq('user_id', user.id);

    // Buscar aulas dispon√≠veis - CONSULTA CORRIGIDA
    const { data: availableLessons, error: lessonsError } = await supabaseClient
      .from('learning_lessons')
      .select(`
        id,
        title,
        description,
        cover_image_url,
        difficulty_level,
        estimated_time_minutes,
        module_id,
        order_index
      `)
      .eq('published', true)
      .order('order_index')
      .limit(15);

    if (lessonsError) {
      console.error('‚ùå [TRAIL-AI] Erro ao buscar aulas:', lessonsError);
    }

    // Buscar solu√ß√µes dispon√≠veis
    const { data: availableSolutions } = await supabaseClient
      .from('solutions')
      .select(`
        id,
        title,
        description,
        category,
        difficulty,
        thumbnail_url
      `)
      .eq('published', true)
      .order('created_at', { ascending: false })
      .limit(20);

    console.log(`üìä [TRAIL-AI] Dados coletados - Aulas: ${availableLessons?.length}, Solu√ß√µes: ${availableSolutions?.length}`);

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.log('‚ö†Ô∏è [TRAIL-AI] Chave OpenAI n√£o encontrada');
      return new Response(JSON.stringify({ 
        error: 'OpenAI API key n√£o configurada',
        fallback: true
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar contexto personalizado baseado no onboarding
    let personalizedContext = null;
    
    if (onboardingData) {
      try {
        // Usar adapter para converter dados de onboarding
        personalizedContext = {
          personalProfile: {
            name: onboardingData.personal_info?.name || userProfile?.name || 'Usu√°rio',
            location: formatLocation(onboardingData.personal_info),
            experienceLevel: onboardingData.ai_experience?.experience_level || 'Iniciante'
          },
          businessContext: {
            company: onboardingData.business_info?.company_name || onboardingData.professional_info?.company_name || userProfile?.company_name || 'Empresa n√£o informada',
            sector: onboardingData.business_info?.company_sector || onboardingData.professional_info?.company_sector || 'Setor n√£o informado',
            size: onboardingData.business_info?.company_size || onboardingData.professional_info?.company_size || 'Tamanho n√£o informado',
            revenue: onboardingData.business_info?.annual_revenue || onboardingData.professional_info?.annual_revenue || 'N√£o informado',
            position: onboardingData.business_info?.current_position || onboardingData.professional_info?.current_position || userProfile?.current_position || 'Cargo n√£o informado',
            mainChallenge: onboardingData.business_info?.main_challenge || onboardingData.professional_info?.main_challenge
          },
          aiReadiness: {
            currentStatus: onboardingData.ai_experience?.implementation_status || 'N√£o implementado',
            approach: onboardingData.ai_experience?.implementation_approach || 'Gradual',
            experienceLevel: onboardingData.ai_experience?.experience_level || 'Iniciante'
          },
          objectives: {
            primaryGoal: onboardingData.goals_info?.primary_goal || onboardingData.business_context?.primary_goal || 'Aumentar efici√™ncia',
            timeline: onboardingData.goals_info?.timeline || onboardingData.business_context?.timeline,
            successMetrics: onboardingData.goals_info?.success_metrics || onboardingData.business_context?.success_metrics || [],
            investment: onboardingData.goals_info?.investment_capacity || onboardingData.business_context?.investment_capacity,
            priorityAreas: onboardingData.goals_info?.priority_areas || onboardingData.business_context?.priority_areas || [],
            specificObjectives: onboardingData.goals_info?.specific_objectives || onboardingData.business_context?.specific_objectives
          },
          learningPreferences: {
            style: onboardingData.personalization?.learning_style || 'Visual e pr√°tico',
            contentPreference: onboardingData.personalization?.preferred_content || [],
            supportLevel: onboardingData.personalization?.support_level,
            availability: onboardingData.personalization?.availability,
            frequency: onboardingData.personalization?.communication_frequency
          }
        };
        
        console.log('üéØ [TRAIL-AI] Contexto personalizado criado:', {
          name: personalizedContext.personalProfile.name,
          sector: personalizedContext.businessContext.sector,
          experience: personalizedContext.aiReadiness.experienceLevel,
          goal: personalizedContext.objectives.primaryGoal
        });
        
      } catch (error) {
        console.error('‚ùå [TRAIL-AI] Erro ao processar dados de onboarding:', error);
        personalizedContext = null;
      }
    }

    // Contexto b√°sico de fallback
    const userContext = {
      profile: {
        name: userProfile?.name || 'Usu√°rio',
        email: userProfile?.email,
        company: userProfile?.company_name,
        position: userProfile?.current_position,
        industry: userProfile?.industry,
        role: userProfile?.user_roles?.name,
        created_at: userProfile?.created_at,
        skills: userProfile?.skills || []
      },
      progress: {
        completed_lessons: userProgress?.filter(p => p.completed_at)?.length || 0,
        in_progress_lessons: userProgress?.filter(p => !p.completed_at && p.progress_percentage > 0)?.length || 0,
        certificates_earned: userCertificates?.length || 0,
        total_progress: userProgress?.length || 0
      },
      available_resources: {
        lessons: availableLessons?.map(lesson => ({
          id: lesson.id,
          title: lesson.title,
          description: lesson.description,
          difficulty: lesson.difficulty_level,
          duration: lesson.estimated_time_minutes
        })) || [],
        solutions: availableSolutions?.map(solution => ({
          id: solution.id,
          title: solution.title,
          description: solution.description,
          category: solution.category,
          difficulty: solution.difficulty
        })) || []
      },
      personalized: personalizedContext
    };

    console.log('ü§ñ [TRAIL-AI] Iniciando an√°lise personalizada com IA');

    // Prompt avan√ßado personalizado baseado no onboarding
    let aiPrompt = '';
    
    if (personalizedContext) {
      // Prompt personalizado com dados de onboarding
      aiPrompt = `
Voc√™ √© um especialista em implementa√ß√£o de IA corporativa com 15 anos de experi√™ncia em transforma√ß√£o digital. Sua miss√£o √© criar uma trilha de implementa√ß√£o ALTAMENTE PERSONALIZADA para este usu√°rio espec√≠fico baseada em dados detalhados de onboarding.

üéØ PERFIL PERSONALIZADO COMPLETO:

üë§ DADOS PESSOAIS:
- Nome: ${personalizedContext.personalProfile.name}
- Localiza√ß√£o: ${personalizedContext.personalProfile.location}
- N√≠vel de experi√™ncia em IA: ${personalizedContext.personalProfile.experienceLevel}

üè¢ CONTEXTO EMPRESARIAL DETALHADO:
- Empresa: ${personalizedContext.businessContext.company}
- Setor: ${personalizedContext.businessContext.sector}
- Tamanho da empresa: ${personalizedContext.businessContext.size}
- Receita anual: ${personalizedContext.businessContext.revenue}
- Cargo/Posi√ß√£o: ${personalizedContext.businessContext.position}
- Desafio principal: ${personalizedContext.businessContext.mainChallenge || 'N√£o especificado'}

ü§ñ MATURIDADE E PRONTID√ÉO PARA IA:
- Status atual de implementa√ß√£o: ${personalizedContext.aiReadiness.currentStatus}
- Abordagem preferida: ${personalizedContext.aiReadiness.approach}
- N√≠vel de experi√™ncia: ${personalizedContext.aiReadiness.experienceLevel}

üéØ OBJETIVOS ESPEC√çFICOS E ESTRAT√âGICOS:
- Meta principal: ${personalizedContext.objectives.primaryGoal}
- Timeline desejado: ${personalizedContext.objectives.timeline || 'N√£o especificado'}
- M√©tricas de sucesso: ${personalizedContext.objectives.successMetrics?.join(', ') || 'N√£o especificadas'}
- Capacidade de investimento: ${personalizedContext.objectives.investment || 'N√£o especificada'}
- √Åreas priorit√°rias: ${personalizedContext.objectives.priorityAreas?.join(', ') || 'N√£o especificadas'}
- Objetivos espec√≠ficos: ${personalizedContext.objectives.specificObjectives || 'N√£o especificados'}

üìö PREFER√äNCIAS DE APRENDIZADO:
- Estilo de aprendizado: ${personalizedContext.learningPreferences.style}
- Tipo de conte√∫do preferido: ${personalizedContext.learningPreferences.contentPreference?.join(', ') || 'N√£o especificado'}
- N√≠vel de suporte desejado: ${personalizedContext.learningPreferences.supportLevel || 'N√£o especificado'}
- Disponibilidade de tempo: ${personalizedContext.learningPreferences.availability || 'N√£o especificada'}
- Frequ√™ncia de comunica√ß√£o: ${personalizedContext.learningPreferences.frequency || 'N√£o especificada'}

üìà PROGRESSO ATUAL NO SISTEMA:
- Aulas conclu√≠das: ${userContext.progress.completed_lessons}
- Aulas em andamento: ${userContext.progress.in_progress_lessons}
- Certificados obtidos: ${userContext.progress.certificates_earned}
- Total de atividades: ${userContext.progress.total_progress}

üìö AULAS DISPON√çVEIS PARA RECOMENDA√á√ÉO (${userContext.available_resources.lessons.length} aulas):
${userContext.available_resources.lessons.map((lesson, index) => `
${index + 1}. "${lesson.title}"
   - ID: ${lesson.id}
   - Dificuldade: ${lesson.difficulty || 'N√£o especificada'}
   - Dura√ß√£o: ${lesson.duration ? `${lesson.duration} min` : 'N√£o especificada'}
   - Descri√ß√£o: ${lesson.description || 'Sem descri√ß√£o'}
`).join('\n')}

üõ†Ô∏è SOLU√á√ïES DISPON√çVEIS (${userContext.available_resources.solutions.length} solu√ß√µes):
${userContext.available_resources.solutions.map((solution, index) => `
${index + 1}. "${solution.title}"
   - ID: ${solution.id}
   - Categoria: ${solution.category || 'N√£o especificada'}
   - Dificuldade: ${solution.difficulty || 'N√£o especificada'}
   - Descri√ß√£o: ${solution.description || 'Sem descri√ß√£o'}
`).join('\n')}`;
    } else {
      // Prompt b√°sico de fallback
      aiPrompt = `
Voc√™ √© um especialista em implementa√ß√£o de IA corporativa. Crie uma trilha personalizada baseada nos dados b√°sicos dispon√≠veis.

PERFIL B√ÅSICO DO USU√ÅRIO:
üë§ Dados Pessoais:
- Nome: ${userContext.profile.name}
- Email: ${userContext.profile.email || 'N√£o informado'}
- Empresa: ${userContext.profile.company || 'N√£o informado'}
- Cargo: ${userContext.profile.position || 'N√£o informado'}
- Setor: ${userContext.profile.industry || 'N√£o informado'}

üìà Progresso Atual:
- Aulas conclu√≠das: ${userContext.progress.completed_lessons}
- Aulas em andamento: ${userContext.progress.in_progress_lessons}
- Certificados obtidos: ${userContext.progress.certificates_earned}

üìö AULAS DISPON√çVEIS (${userContext.available_resources.lessons.length} aulas):
${userContext.available_resources.lessons.map((lesson, index) => `
${index + 1}. "${lesson.title}" (ID: ${lesson.id})
   - Dificuldade: ${lesson.difficulty || 'N√£o especificada'}
   - Dura√ß√£o: ${lesson.duration ? `${lesson.duration} min` : 'N√£o especificada'}
`).join('\n')}`;
    }

    // MISS√ÉO CR√çTICA: Criar uma trilha de implementa√ß√£o ALTAMENTE PERSONALIZADA
    const systemPrompt = `
1. **AN√ÅLISE CONTEXTUAL PROFUNDA**: 
   - Analise ESPECIFICAMENTE o perfil detalhado fornecido
   - Identifique oportunidades de IA √∫nicas para este setor, cargo e contexto empresarial
   - Considere o n√≠vel de experi√™ncia atual e objetivos declarados
   - Leve em conta prefer√™ncias de aprendizado e disponibilidade

2. **RECOMENDA√á√ïES DE AULAS ESTRAT√âGICAS**:
   - Selecione 6-8 aulas que sejam ALTAMENTE relevantes para este perfil espec√≠fico
   - Priorize baseado em: experi√™ncia atual + setor + objetivos + prefer√™ncias
   - Crie uma progress√£o l√≥gica: fundamentos ‚Üí aplica√ß√£o ‚Üí especializa√ß√£o
   - Conecte cada aula aos objetivos e desafios espec√≠ficos do usu√°rio
   - Considere a disponibilidade e estilo de aprendizado declarados

3. **JUSTIFICATIVAS PERSONALIZADAS**:
   - Para cada aula, explique POR QUE √© relevante para ESTE usu√°rio espec√≠fico
   - Use o nome, empresa, cargo e contexto real
   - Conecte com os objetivos e desafios mencionados
   - Seja espec√≠fico sobre como cada aula ajuda no contexto empresarial deles

INSTRU√á√ïES CR√çTICAS:
- Use SEMPRE o nome real: ${personalizedContext ? personalizedContext.personalProfile.name : userContext.profile.name}
- Mencione o setor espec√≠fico: ${personalizedContext ? personalizedContext.businessContext.sector : (userContext.profile.industry || 'tecnologia')}
- Considere o n√≠vel de experi√™ncia: ${personalizedContext ? personalizedContext.aiReadiness.experienceLevel : 'iniciante'}
- Foque no objetivo principal: ${personalizedContext ? personalizedContext.objectives.primaryGoal : 'aumentar efici√™ncia'}
- Seja EXTREMAMENTE espec√≠fico e personalizado - n√£o use respostas gen√©ricas
- Crie conex√µes l√≥gicas: perfil real ‚Üí objetivos reais ‚Üí aulas espec√≠ficas ‚Üí resultados esperados

RESPONDA APENAS EM JSON:
{
  "overview": {
    "analysis": "An√°lise detalhada do perfil e contexto do usu√°rio",
    "opportunities": "Oportunidades espec√≠ficas de IA identificadas",
    "strategic_goals": "3-4 objetivos estrat√©gicos personalizados",
    "implementation_phases": ["Fase 1: Funda√ß√£o", "Fase 2: Expans√£o", "Fase 3: Otimiza√ß√£o"]
  },
  "solutions_guide": {
    "quick_wins": [
      {
        "solution_id": "uuid",
        "priority_score": 95,
        "category": "Primeiras Vit√≥rias",
        "reasoning": "Por que √© priorit√°rio para ESTE usu√°rio espec√≠fico",
        "expected_impact": "Impacto esperado no contexto dele",
        "implementation_timeframe": "1-2 semanas"
      }
    ],
    "growth_solutions": [
      {
        "solution_id": "uuid",
        "priority_score": 88,
        "category": "Crescimento",
        "reasoning": "Justificativa personalizada",
        "expected_impact": "Impacto esperado",
        "implementation_timeframe": "3-4 semanas"
      }
    ],
    "optimization_solutions": [
      {
        "solution_id": "uuid",
        "priority_score": 82,
        "category": "Otimiza√ß√£o",
        "reasoning": "Justificativa personalizada",
        "expected_impact": "Impacto esperado",
        "implementation_timeframe": "4-6 semanas"
      }
    ]
  },
  "lessons_guide": {
    "learning_path": [
      {
        "lesson_id": "uuid",
        "sequence": 1,
        "category": "Fundamentos",
        "reasoning": "Por que come√ßar com esta aula",
        "connects_to_solutions": ["solution_id1", "solution_id2"],
        "estimated_completion": "Semana 1"
      }
    ],
    "total_learning_time": "8-12 semanas",
    "learning_objectives": ["Objetivo 1", "Objetivo 2", "Objetivo 3"]
  },
  "personalized_message": "Mensagem motivacional personalizada de 2-3 frases usando o nome e contexto do usu√°rio"
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um consultor s√™nior especializado em implementa√ß√£o de IA corporativa com PhD em Engenharia de Software e 15 anos de experi√™ncia consultando Fortune 500. 

            Sua especialidade √© criar trilhas de aprendizado ALTAMENTE PERSONALIZADAS que geram resultados reais e mensur√°veis para cada perfil espec√≠fico.

            REGRAS CR√çTICAS:
            1. Seja EXTREMAMENTE espec√≠fico - use nome real, empresa real, setor real, cargo real
            2. Base TODAS as recomenda√ß√µes no perfil detalhado fornecido
            3. Conecte cada aula aos objetivos e desafios espec√≠ficos declarados
            4. Considere n√≠vel de experi√™ncia, disponibilidade e prefer√™ncias de aprendizado
            5. Responda SEMPRE em JSON v√°lido e estruturado conforme solicitado
            6. Foque em resultados pr√°ticos e aplic√°veis ao contexto empresarial espec√≠fico

            Voc√™ n√£o d√° respostas gen√©ricas - cada trilha √© √∫nica para cada usu√°rio.`
          },
          {
            role: 'user',
            content: aiPrompt
          }
        ],
        temperature: 0.3,
        max_tokens: 4000
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const aiResult = await response.json();
    console.log('‚úÖ [TRAIL-AI] Resposta da IA recebida');

    const aiContent = aiResult.choices[0].message.content;
    console.log('Conte√∫do recebido:', aiContent);
    
    // Limpar o conte√∫do para extrair JSON v√°lido
    let cleanContent = aiContent.trim();
    
    // Remover blocos de c√≥digo markdown se presentes
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    let personalizedTrail;
    try {
      personalizedTrail = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('‚ùå [TRAIL-AI] Erro ao fazer parse do JSON:', parseError);
      console.error('‚ùå [TRAIL-AI] Conte√∫do limpo que falhou:', cleanContent);
      throw new Error('Resposta da IA inv√°lida');
    }

    // Enriquecer com dados reais das solu√ß√µes e aulas
    const enrichedTrail = {
      ...personalizedTrail,
      solutions_guide: {
        quick_wins: await enrichSolutions(personalizedTrail.solutions_guide?.quick_wins || [], availableSolutions || []),
        growth_solutions: await enrichSolutions(personalizedTrail.solutions_guide?.growth_solutions || [], availableSolutions || []),
        optimization_solutions: await enrichSolutions(personalizedTrail.solutions_guide?.optimization_solutions || [], availableSolutions || [])
      },
      lessons_guide: {
        ...personalizedTrail.lessons_guide,
        learning_path: await enrichLessons(personalizedTrail.lessons_guide?.learning_path || [], availableLessons || [])
      },
      user_profile: userProfile,
      generation_timestamp: new Date().toISOString(),
      analysis_type: 'ai_powered_personalized'
    };

    console.log('üéØ [TRAIL-AI] Trilha personalizada gerada com sucesso');

    return new Response(JSON.stringify(enrichedTrail), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå [TRAIL-AI] Erro:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      details: error instanceof Error ? error.message : 'Unknown error'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// Fun√ß√£o auxiliar para enriquecer solu√ß√µes com dados reais
async function enrichSolutions(aiSolutions: any[], availableSolutions: any[]) {
  return aiSolutions.map(aiSol => {
    const realSolution = availableSolutions.find(sol => sol.id === aiSol.solution_id);
    return {
      ...aiSol,
      solution_data: realSolution || null
    };
  }).filter(sol => sol.solution_data); // Remove solu√ß√µes n√£o encontradas
}

// Fun√ß√£o auxiliar para formatar localiza√ß√£o
function formatLocation(personalInfo: any): string {
  if (!personalInfo) return 'Localiza√ß√£o n√£o informada';
  
  const city = personalInfo.city;
  const state = personalInfo.state;
  
  if (city && state) {
    return `${city}, ${state}`;
  } else if (state) {
    return state;
  } else if (city) {
    return city;
  }
  
  return 'Localiza√ß√£o n√£o informada';
}

// Fun√ß√£o auxiliar para enriquecer aulas com dados reais
async function enrichLessons(aiLessons: any[], availableLessons: any[]) {
  return aiLessons.map(aiLesson => {
    const realLesson = availableLessons.find(lesson => lesson.id === aiLesson.lesson_id);
    return {
      ...aiLesson,
      lesson_data: realLesson || null
    };
  }).filter(lesson => lesson.lesson_data); // Remove aulas n√£o encontradas
}