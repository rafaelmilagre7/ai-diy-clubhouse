import { serve } from "https://deno.land/std@0.220.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const RequestSchema = z.object({
  solutionId: z.string().uuid("ID de solu√ß√£o inv√°lido"),
  sectionType: z.enum(["framework", "tools", "checklist", "architecture", "lovable"]),
  userId: z.string().uuid("ID de usu√°rio inv√°lido")
});

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    const body = await req.json();
    const { solutionId, sectionType, userId } = RequestSchema.parse(body);

    console.log(`[SECTION-GEN] üöÄ Gerando ${sectionType} para solu√ß√£o ${solutionId}`);

    // Buscar solu√ß√£o e verificar permiss√£o
    const { data: solution, error: fetchError } = await supabase
      .from("ai_generated_solutions")
      .select("*")
      .eq("id", solutionId)
      .eq("user_id", userId)
      .single();

    if (fetchError || !solution) {
      return new Response(
        JSON.stringify({ error: "Solu√ß√£o n√£o encontrada ou sem permiss√£o" }),
        { status: 404, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Mapear tipo de se√ß√£o para campos do banco
    const fieldMapping: Record<string, string[]> = {
      framework: ["framework_mapping", "mind_map"],
      tools: ["required_tools"],
      checklist: ["implementation_checklist"],
      architecture: ["implementation_flows"],
      lovable: ["lovable_prompt"]
    };

    const fieldsToGenerate = fieldMapping[sectionType];
    const primaryField = fieldsToGenerate[0];

    // Verificar se j√° existe (cache)
    if (solution[primaryField]) {
      console.log(`[SECTION-GEN] ‚úÖ ${sectionType} j√° existe, retornando cache`);
      return new Response(
        JSON.stringify({ 
          success: true, 
          cached: true,
          content: solution[primaryField] 
        }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Gerar conte√∫do via Lovable AI
    const lovableApiKey = Deno.env.get("LOVABLE_API_KEY");
    const lovableUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";

    // PROMPTS ULTRA-MELHORADOS COM M√ÅXIMA QUALIDADE
    const prompts: Record<string, { system: string; user: string; model: string; maxTokens: number }> = {
      framework: {
        system: `Voc√™ √© um ARQUITETO DE SOLU√á√ïES MASTER especializado em transformar ideias em frameworks execut√°veis de IA e automa√ß√£o.

SEU PERFIL:
- 15+ anos implementando solu√ß√µes no-code e low-code
- Expert em Make, n8n, Zapier, Bubble, Supabase
- Especialista em APIs de IA (GPT-5, Claude, Gemini)
- Arquiteto de dados e integra√ß√µes complexas
- Designer de experi√™ncia do usu√°rio

MISS√ÉO:
Criar um FRAMEWORK COMPLETO E DETALHADO de 4 PILARES fundamentais para implementa√ß√£o da solu√ß√£o.
N√ÉO economize palavras! Seja PROFUNDAMENTE espec√≠fico!
Voc√™ tem at√© 50.000 tokens - USE quantos precisar!

OS 4 PILARES FUNDAMENTAIS:

**PILAR 1: ü§ñ Automa√ß√£o No-Code**
- Ferramentas: Lovable, Make, n8n, Zapier, ManyChat, Typebot
- Foco: Conectar sistemas e automatizar workflows SEM programar
- Detalhamento: Como cada ferramenta se conecta, quais triggers, quais a√ß√µes, frequ√™ncia

**PILAR 2: üß† Modelos de IA**
- Ferramentas: GPT-5 via API, Claude Sonnet, Gemini 2.5 Pro
- Foco: Usar APIs comerciais de IA prontas (n√£o treinar modelos do zero)
- Detalhamento: Qual modelo, para qu√™, prompts espec√≠ficos, custos, estrat√©gia

**PILAR 3: üìä Dados Simples**
- Ferramentas: Google Sheets ‚Üí Airtable ‚Üí Supabase (progress√£o)
- Foco: Armazenar e estruturar dados sem complexidade
- Detalhamento: Schema completo, relacionamentos, como sincronizar

**PILAR 4: üé® Canais de Interface**
- Ferramentas: WhatsApp Business API, Telegram, Email, Lovable (web)
- Foco: Onde o usu√°rio vai interagir com a solu√ß√£o
- Detalhamento: Jornada completa, fluxos conversacionais, integra√ß√µes

ESTRUTURA JSON OBRIGAT√ìRIA:
{
  "framework_quadrants": {
    "quadrant1_automation": {
      "title": "ü§ñ Automa√ß√£o No-Code",
      "description": "Detalhamento PROFUNDO de como automatizar processos espec√≠ficos desta solu√ß√£o usando ferramentas visuais. M√≠nimo 8-12 frases explicando workflows completos.",
      "items": [
        "Workflow 1 - [Nome espec√≠fico]: Quando [evento exato] acontece em [ferramenta A], automaticamente [a√ß√£o detalhada 1] via Make, depois [a√ß√£o 2] em [ferramenta B], resultando em [output mensur√°vel]. Frequ√™ncia: [tempo]. Custo: [valor]. Exemplo real: [caso concreto].",
        "Workflow 2 - [Nome]: ...",
        "Workflow 3 - [Nome]: ...",
        "Workflow 4 - [Nome]: ...",
        "Workflow 5 - [Nome]: ..."
      ],
      "tool_names": ["Lovable", "Make", "n8n", "ManyChat"],
      "integration_details": "Explica√ß√£o T√âCNICA E DETALHADA (m√≠nimo 15 frases): Como as ferramentas se conectam ponta a ponta. Quais APIs usar (URLs completas de documenta√ß√£o), m√©todos de autentica√ß√£o (OAuth2/API Key/JWT), formato de dados trocados (JSON schemas), webhooks configurados (endpoints), tratamento de erros e retry logic, logs e monitoramento. Inclua diagrama de integra√ß√£o em texto ASCII se poss√≠vel. Estime throughput (requisi√ß√µes/segundo) e lat√™ncia esperada."
    },
    "quadrant2_ai": {
      "title": "üß† Modelos de IA",
      "description": "Estrat√©gia ULTRA-DETALHADA de uso de IA nesta solu√ß√£o espec√≠fica. M√≠nimo 10-15 frases explicando EXATAMENTE como cada modelo ser√° usado, por qu√™, e com que prompts.",
      "items": [
        "GPT-5 (OpenAI) - Caso de uso [espec√≠fico]: Prompt system: '[prompt completo de exemplo com 200-300 tokens]', temperatura: [valor com justificativa], max_tokens: [valor], frequ√™ncia de uso: [X vezes/dia ou por evento]. Exemplo de input: '[exemplo concreto]' ‚Üí Output esperado: '[exemplo concreto]'. Custo estimado: $[valor]/1000 requisi√ß√µes. Fallback: [estrat√©gia].",
        "Claude Sonnet 4.5 - Caso de uso [espec√≠fico]: ...",
        "Gemini 2.5 Pro - Caso de uso [espec√≠fico]: ...",
        "Embeddings (text-embedding-3-large) - Para [uso]: ...",
        "Whisper (transcri√ß√£o) - Se aplic√°vel: ..."
      ],
      "tool_names": ["GPT-5", "Claude Sonnet", "Gemini Pro"],
      "ai_strategy": "Estrat√©gia COMPLETA, DETALHADA E EXECUT√ÅVEL (m√≠nimo 20 frases):\\n\\n1. **Sele√ß√£o de Modelos**: Por que escolher [modelo X] para [tarefa Y] e n√£o alternativas como [Z]? Crit√©rios: custo ($X vs $Y), lat√™ncia (Xms vs Yms), qualidade (benchmark: X% vs Y%), contexto (8K vs 100K tokens).\\n\\n2. **Prompting Strategy**: T√©cnicas espec√≠ficas - few-shot learning com [N] exemplos, chain-of-thought para [casos], system prompts com [persona/contexto]. Exemplos completos de prompts para os 3 casos de uso mais cr√≠ticos.\\n\\n3. **Fine-tuning ou RAG**: Se precisar de contexto espec√≠fico, usar RAG com [vector database] armazenando [tipo de documentos]. Chunking strategy: [tamanho] com overlap de [%]. Retrieval: top-k=[N], similarity threshold=[valor].\\n\\n4. **Valida√ß√£o de Qualidade**: Como medir se IA est√° performando bem? M√©tricas: [accuracy, F1, user satisfaction]. Testes A/B para comparar prompts/modelos.\\n\\n5. **Gest√£o de Custos e Rate Limits**: Or√ßamento mensal: $[valor]. Estrat√©gias: cache de respostas comuns (economiza [%]), batch processing quando poss√≠vel, rate limiting (X req/min), fallback para modelos mais baratos em hor√°rios de pico.\\n\\n6. **Error Handling**: O que fazer quando IA falha? Retry logic (3x com exponential backoff), fallback para modelo mais simples, mensagem ao usu√°rio, log para an√°lise posterior."
    },
    "quadrant3_data": {
      "title": "üìä Dados e Estrutura",
      "description": "Arquitetura COMPLETA E DETALHADA de dados. M√≠nimo 12 frases explicando schemas, relacionamentos, sincroniza√ß√£o, backup e seguran√ßa.",
      "items": [
        "Google Sheets - Fase inicial/MVP: Tabela '[Nome]' com colunas: [col1: tipo], [col2: tipo], [col3: tipo]. F√≥rmulas: [VLOOKUP, QUERY exemplos]. Compartilhamento: [quem acessa]. Limite: [X linhas]. Quando migrar: quando atingir [Y linhas] ou precisar de [feature Z].",
        "Airtable - Fase crescimento: Base '[Nome]' com tabelas: 1) [Tabela A: campos X, Y, Z], 2) [Tabela B: campos...]. Relacionamentos: [Tabela A.id] linked to [Tabela B.fk]. Views: [Grid, Kanban, Calendar]. Automations nativas: [quando X, fazer Y]. API usage: [endpoints espec√≠ficos]. Custo: $[valor]/m√™s.",
        "Supabase (PostgreSQL) - Fase escala: Schema completo SQL:\\n```sql\\nCREATE TABLE users (\\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\\n  email TEXT UNIQUE NOT NULL,\\n  created_at TIMESTAMP DEFAULT NOW()\\n);\\nCREATE TABLE events (\\n  id UUID PRIMARY KEY,\\n  user_id UUID REFERENCES users(id),\\n  type TEXT,\\n  data JSONB\\n);\\nCREATE INDEX idx_events_user ON events(user_id);\\n```\\nRow Level Security: policies para [cen√°rios]. Real-time subscriptions: [quais tabelas]. Backup: [estrat√©gia].",
        "Sincroniza√ß√£o entre sistemas: Make scenario rodando [frequ√™ncia] que: 1) Busca dados de [origem] via [m√©todo], 2) Transforma [campo X ‚Üí Y], 3) Upsert em [destino] via [m√©todo]. Conflict resolution: [estrat√©gia - last write wins, merge, manual].",
        "Vector Database (se IA com RAG): Pinecone collection '[nome]', dimens√£o: [1536 para text-embedding-3-large], metadata: {id, title, category, timestamp}, index type: [HNSW], queries: [top-k=5, threshold=0.7]. Custo: $[valor]/m√™s para [X] vetores."
      ],
      "tool_names": ["Google Sheets", "Airtable", "Supabase", "Pinecone"],
      "data_architecture": "ARQUITETURA ULTRA-DETALHADA (m√≠nimo 25 frases):\\n\\n**1. Modelo de Dados Completo:**\\nDiagrama de entidades e relacionamentos (ER) em texto:\\n- Entidade USER: [campos com tipos]\\n- Entidade SESSION: [campos...]\\n- Entidade TRANSACTION: [campos...]\\nRelacionamentos: USER 1:N SESSION, SESSION 1:N TRANSACTION\\n\\n**2. Fluxo de Dados Ponta a Ponta:**\\nOrigem ‚Üí Processamento ‚Üí Destino\\n[Formul√°rio Typeform] ‚Üí (webhook) ‚Üí [Make scenario] ‚Üí (transform) ‚Üí [Airtable] ‚Üí (trigger) ‚Üí [Make] ‚Üí [GPT-5 API] ‚Üí [Resposta] ‚Üí [Update Airtable + Email via SendGrid]\\n\\n**3. Estrat√©gia de Particionamento:**\\nSe volume > [X] registros, particionar por: [data/regi√£o/categoria]. Exemplo: tabela events_2024_01, events_2024_02...\\n\\n**4. √çndices e Performance:**\\n√çndices necess√°rios: [campo A (√∫nico), campo B (n√£o-√∫nico), campo C+D (composto)]. Queries otimizadas: [exemplos]. Cache: [Redis] para [dados quentes] com TTL [tempo].\\n\\n**5. Backup e Disaster Recovery:**\\nBackup di√°rio: [ferramenta/m√©todo], reten√ß√£o: [X dias], localiza√ß√£o: [regi√£o]. Restore time: [Y horas]. Teste de restore: [mensal].\\n\\n**6. Seguran√ßa e Compliance:**\\nDados sens√≠veis: [quais]. Criptografia: at-rest (AES-256) e in-transit (TLS 1.3). Acesso: [quem pode ver o qu√™]. LGPD/GDPR: [pol√≠ticas de reten√ß√£o, direito ao esquecimento]. Logs de audit: [o que registrar].\\n\\n**7. Escalabilidade:**\\nVolume atual: [X registros/dia]. Crescimento esperado: [+Y%/m√™s]. Limite do plano atual: [Z]. Quando escalar: [threshold]. Pr√≥ximo passo: [a√ß√£o]."
    },
    "quadrant4_interface": {
      "title": "üé® Canais e Experi√™ncia",
      "description": "Como o usu√°rio FINAL vai INTERAGIR com a solu√ß√£o no dia a dia. M√≠nimo 10 frases descrevendo jornada completa, pontos de contato e design de intera√ß√£o.",
      "items": [
        "WhatsApp Business Bot: Menu inicial com [4-5 op√ß√µes], processamento de linguagem natural via GPT-5 para entender [inten√ß√µes: X, Y, Z], respostas contextualizadas baseadas em [hist√≥rico do usu√°rio no Airtable], fallback para atendente humano quando [condi√ß√µes espec√≠ficas]. Fluxo exemplo: Usu√°rio manda 'Quero [X]' ‚Üí Bot entende inten√ß√£o ‚Üí Busca dados ‚Üí Monta resposta personalizada ‚Üí Envia + bot√µes de a√ß√£o. Tecnologia: Twilio API + Make + GPT-5.",
        "Dashboard Web (Lovable): Interface responsiva com componentes: 1) Header com [menu, notifica√ß√µes], 2) Sidebar [navega√ß√£o], 3) Content area [cards, tabelas, gr√°ficos]. P√°ginas principais: [Dashboard, Hist√≥rico, Configura√ß√µes]. Visualiza√ß√µes: gr√°ficos [Chart.js] de [m√©tricas X, Y], tabelas [react-table] com filtros por [dimens√µes], exporta√ß√£o [CSV/PDF]. Autentica√ß√£o: [Supabase Auth], roles: [admin, user, viewer].",
        "Notifica√ß√µes Push: Quando [eventos cr√≠ticos], enviar via [canal]: email (SendGrid com template [nome]), SMS (Twilio para [casos urgentes]), push web (OneSignal), Slack (webhook para canal #[nome]). Frequ√™ncia: [regras para n√£o spammar].",
        "Relat√≥rios Automatizados: Todo [per√≠odo], gerar relat√≥rio com [m√©tricas], formato: [PDF via Carrd ou Google Docs], distribui√ß√£o: [email para stakeholders]. Conte√∫do: resumo executivo + gr√°ficos + tabelas + insights.",
        "Onboarding: Primeiro acesso ‚Üí Tutorial interativo (5 passos) ‚Üí Tooltips contextuais ‚Üí V√≠deo explicativo ‚Üí Suporte via chat. Goal: usu√°rio consegue [realizar tarefa core] em < 5 minutos."
      ],
      "tool_names": ["WhatsApp API", "Lovable", "Typebot", "SendGrid"],
      "ux_considerations": "DETALHAMENTO COMPLETO DE UX/UI (m√≠nimo 20 frases):\\n\\n**1. Jornada do Usu√°rio Passo-a-Passo:**\\nPasso 1: [Usu√°rio faz X] ‚Üí Sistema responde [Y] ‚Üí Feedback visual [Z]\\nPasso 2: ...\\n[Descrever jornada completa de 8-12 passos desde descoberta at√© objetivo alcan√ßado]\\n\\n**2. Princ√≠pios de Design:**\\n- Mobile-first: [justificativa - 70% dos usu√°rios em mobile]\\n- Acessibilidade: [WCAG 2.1 AA] - contraste, navega√ß√£o por teclado, screen reader\\n- Performance: First Contentful Paint < 1.5s, Time to Interactive < 3s\\n- Progressive disclosure: mostrar op√ß√µes conforme necess√°rio, n√£o tudo de uma vez\\n\\n**3. Tratamento de Estados:**\\n- Loading: skeleton screens, n√£o spinners chatos\\n- Empty states: mensagens motivadoras + CTAs\\n- Errors: mensagens claras em portugu√™s, n√£o c√≥digos t√©cnicos\\n- Success: feedback imediato, n√£o apenas salvar silenciosamente\\n\\n**4. Pontos de Fric√ß√£o Identificados:**\\n1. [Ponto X]: usu√°rio pode ficar confuso em [situa√ß√£o] ‚Üí Solu√ß√£o: [adicionar tooltip/ajuda contextual]\\n2. [Ponto Y]: ...\\n[Listar 5-8 poss√≠veis frustra√ß√µes e como mitigar]\\n\\n**5. Testes de Usabilidade Planejados:**\\n- Fase 1 (Pr√©-launch): [N] usu√°rios beta testando [tarefas]\\n- Fase 2 (P√≥s-launch): analytics de [m√©tricas], heatmaps, session recordings\\n- Fase 3 (Otimiza√ß√£o): A/B tests de [elementos]\\n\\n**6. M√©tricas de Sucesso:**\\n- Task completion rate: > [X]%\\n- Time to complete core task: < [Y] minutos\\n- User satisfaction (NPS): > [Z]\\n- Retention D7: > [W]%"
    }
  },
  "mind_map": {
    "central_idea": "Frase IMPACTANTE e CLARA (m√°x 15 palavras) que resume a ess√™ncia da solu√ß√£o e seu valor principal",
    "branches": [
      {
        "name": "üéØ FASE 1: Prepara√ß√£o e Funda√ß√£o (Semana 1-2)",
        "children": [
          "An√°lise profunda dos requisitos de neg√≥cio e objetivos mensur√°veis (KPIs: [lista])",
          "Mapeamento completo de stakeholders, usu√°rios finais e personas (criar 2-3 personas detalhadas)",
          "Defini√ß√£o de m√©tricas de sucesso (exemplos: reduzir tempo de [processo] em X%, aumentar convers√£o em Y%)",
          "Levantamento de riscos t√©cnicos, de neg√≥cio e operacionais + estrat√©gias de mitiga√ß√£o",
          "Documenta√ß√£o do processo atual (as-is) com fluxogramas e identifica√ß√£o de gargalos",
          "Cria√ß√£o de roadmap visual com milestones claros (Gantt chart ou timeline)",
          "Setup inicial: contas nas ferramentas, acessos, ambientes de dev/staging/prod"
        ]
      },
      {
        "name": "üèóÔ∏è FASE 2: Arquitetura e Design (Semana 3-4)",
        "children": [
          "Design completo da arquitetura de dados (ER diagram, schemas SQL/NoSQL)",
          "Cria√ß√£o de fluxogramas detalhados de todos os processos automatizados (usar Mermaid/Lucidchart)",
          "Defini√ß√£o t√©cnica de TODAS as integra√ß√µes (APIs, webhooks, m√©todos de auth, rate limits)",
          "Prototipa√ß√£o de interfaces (wireframes low-fi ‚Üí mockups high-fi no Figma)",
          "Sele√ß√£o e configura√ß√£o de infraestrutura (contas, planos, configura√ß√µes iniciais)",
          "Documenta√ß√£o t√©cnica completa (arquitetura, decis√µes, trade-offs)",
          "Review de arquitetura com stakeholders t√©cnicos (validar antes de implementar)"
        ]
      },
      {
        "name": "‚öôÔ∏è FASE 3: Implementa√ß√£o T√©cnica (Semana 5-8)",
        "children": [
          "Setup completo de infraestrutura: bancos de dados, contas APIs, ambientes, CI/CD",
          "Desenvolvimento de TODAS as integra√ß√µes: conectar APIs, configurar webhooks, testar flows",
          "Implementa√ß√£o de automa√ß√µes no Make/n8n: criar scenarios, configurar triggers, testar",
          "Configura√ß√£o de modelos de IA: setup APIs, ajustar prompts, testar edge cases",
          "Desenvolvimento de interfaces: Lovable (web), Typebot (chat), templates de email",
          "Testes unit√°rios (cada componente isolado) e de integra√ß√£o (ponta a ponta)",
          "Otimiza√ß√£o de performance: cache, √≠ndices, queries, lazy loading",
          "Implementa√ß√£o de observabilidade: logs estruturados, metrics, alerts"
        ]
      },
      {
        "name": "üöÄ FASE 4: Lan√ßamento e Otimiza√ß√£o (Semana 9-12)",
        "children": [
          "Beta testing com [N] usu√°rios selecionados (idealmente power users)",
          "Coleta estruturada de feedback: surveys, entrevistas, analytics",
          "Ajustes cr√≠ticos baseados em feedback (bugs, UX, performance)",
          "Soft launch: deploy gradual para 10% ‚Üí 50% ‚Üí 100% dos usu√°rios",
          "Setup de monitoramento avan√ßado: dashboards (Grafana/Datadog), alerts (PagerDuty), uptime",
          "Treinamento de equipe: documenta√ß√£o de uso, v√≠deos, sess√µes hands-on",
          "Documenta√ß√£o de suporte: FAQs, troubleshooting, escalation paths",
          "Itera√ß√£o cont√≠nua: an√°lise de m√©tricas semanais, backlog de melhorias, roadmap de features"
        ]
      }
    ]
  }
}

**REGRAS DE OURO PARA QUALIDADE M√ÅXIMA:**

1. **PROFUNDIDADE**: Cada item deve ter 5-10 frases (n√£o seja gen√©rico!)
2. **ESPECIFICIDADE**: N√£o diga "configurar API", diga "Acesse developer.plataforma.com/api-keys, clique em 'Generate New Key', selecione scopes [...], copie e salve em .env como API_KEY=..."
3. **EXEMPLOS CONCRETOS**: Inclua exemplos reais, n√£o abstratos
4. **N√öMEROS E M√âTRICAS**: Sempre que poss√≠vel (custos, tempos, volumes)
5. **DIAGRAMAS EM TEXTO**: Fluxos, arquiteturas, integra√ß√µes
6. **CONSIDERA√á√ïES T√âCNICAS**: Performance, custos, escalabilidade, seguran√ßa
7. **VOC√ä TEM 50.000 TOKENS**: USE TODOS que precisar!`,
        user: `Gere o framework completo de 4 pilares para esta solu√ß√£o:

IDEIA ORIGINAL: "${solution.original_idea}"
T√çTULO: "${solution.title}"
DESCRI√á√ÉO: "${solution.short_description || 'N√£o especificada'}"

Retorne APENAS o objeto JSON especificado (sem markdown, sem code blocks).`,
        model: "google/gemini-2.5-pro",
        maxTokens: 50000
      },

      tools: {
        system: `Voc√™ √© um ESPECIALISTA em ferramentas SaaS, APIs e plataformas no-code/low-code.

MISS√ÉO:
Identificar e detalhar TODAS as ferramentas necess√°rias para implementar a solu√ß√£o, divididas em:
- **Essential**: Ferramentas SEM as quais a solu√ß√£o N√ÉO funciona
- **Optional**: Ferramentas que MELHORAM mas n√£o s√£o cr√≠ticas

ESTRUTURA JSON:
{
  "required_tools": {
    "essential": [
      {
        "name": "Nome Exato da Ferramenta",
        "category": "Automa√ß√£o/IA/Dados/Comunica√ß√£o/Interface/Pagamento/Outro",
        "reason": "Explica√ß√£o ULTRA-DETALHADA (m√≠nimo 8 frases): Por que √© ESSENCIAL? O que acontece sem ela? Qual problema espec√≠fico resolve? Por que alternativas n√£o funcionam t√£o bem? Qual impacto mensur√°vel ter√°? Exemplos concretos de uso nesta solu√ß√£o. Estimativa de ROI. Depend√™ncias com outras ferramentas.",
        "setup_complexity": "easy/medium/hard",
        "setup_steps": "Passo 1: [a√ß√£o espec√≠fica com detalhes]\\nPasso 2: [...]\\nPasso 3: [...]\\n[M√≠nimo 5 passos com URLs, valores, op√ß√µes]",
        "cost_estimate": "$X/m√™s (breakdown: $Y base + $Z por [unidade]). Plano recomendado: [nome]. Limite: [volume/usu√°rios]",
        "logo_url": "https://logo.clearbit.com/[dominio].com",
        "official_url": "https://[dominio].com",
        "alternatives": [
          "Alternativa 1 - Pros: [...], Cons: [...], Custo: $X",
          "Alternativa 2 - Pros: [...], Cons: [...], Custo: $X"
        ]
      }
    ],
    "optional": [
      {
        "name": "Nome da Ferramenta",
        "category": "Categoria",
        "reason": "Por que PODE ser √∫til mas n√£o √© essencial (m√≠nimo 5 frases)",
        "when_to_use": "Cen√°rio ESPEC√çFICO: Adicionar quando [condi√ß√£o exata], por exemplo: escalar para >1000 usu√°rios, precisar de feature X, or√ßamento permitir investir $Y adicional",
        "cost_estimate": "$X/m√™s",
        "logo_url": "https://logo.clearbit.com/[dominio].com",
        "official_url": "https://[dominio].com"
      }
    ]
  }
}

**REGRAS:**
1. Liste 8-15 ferramentas ESSENTIAL
2. Liste 3-8 ferramentas OPTIONAL
3. Priorize ferramentas conhecidas e com boa documenta√ß√£o
4. Inclua URLs reais e logo URLs
5. Custos devem ser realistas e atualizados (2024/2025)
6. Setup steps devem ser um TUTORIAL completo
7. Seja espec√≠fico sobre planos (Free/Pro/Business/Enterprise)`,
        user: `Identifique todas as ferramentas necess√°rias para esta solu√ß√£o:

IDEIA: "${solution.original_idea}"
T√çTULO: "${solution.title}"
DESCRI√á√ÉO: "${solution.short_description || 'N√£o especificada'}"

Retorne APENAS o objeto JSON especificado.`,
        model: "google/gemini-2.5-pro",
        maxTokens: 30000
      },

      checklist: {
        system: `Voc√™ √© um GERENTE DE PROJETOS T√âCNICOS MASTER especializado em criar checklists de implementa√ß√£o execut√°veis.

MISS√ÉO:
Criar um CHECKLIST ULTRA-COMPLETO de implementa√ß√£o com 15-30 steps sequenciais.

ESTRUTURA JSON:
{
  "implementation_checklist": [
    {
      "step_number": 1,
      "title": "T√≠tulo claro e objetivo do passo (ex: 'Configurar conta Make.com e criar primeiro scenario')",
      "description": "Descri√ß√£o ULTRA-DETALHADA tipo TUTORIAL (m√≠nimo 10 frases):\\n\\n1. Acesse [URL exata]\\n2. Clique em [bot√£o/menu espec√≠fico]\\n3. Preencha campo [nome do campo] com [valor exemplo]\\n4. Selecione op√ß√£o [nome da op√ß√£o]\\n5. [Continue com 10+ instru√ß√µes espec√≠ficas]\\n\\nEXEMPLO CONCRETO: [mostre um exemplo real de configura√ß√£o]\\n\\nVALIDA√á√ÉO: [como testar se funcionou]",
      "estimated_time": "Tempo realista (ex: '45 minutos', '2 horas', '1 dia')",
      "difficulty": "easy/medium/hard",
      "dependencies": ["step_1", "step_3"],
      "validation_criteria": "Como saber EXATAMENTE que este passo foi conclu√≠do com sucesso:\\n1. [Crit√©rio test√°vel 1]\\n2. [Crit√©rio test√°vel 2]\\n3. [Crit√©rio test√°vel 3]\\n4. [Crit√©rio test√°vel 4]",
      "common_pitfalls": "Erros COMUNS que acontecem neste passo:\\n1. [Erro]: [Como evitar]\\n2. [Erro]: [Como evitar]\\n3. [Erro]: [Como evitar]\\n[M√≠nimo 4-6 pitfalls]",
      "resources": [
        "https://[URL 1] - Tutorial oficial",
        "https://[URL 2] - Documenta√ß√£o da API",
        "https://[URL 3] - V√≠deo explicativo",
        "https://[URL 4] - Forum/comunidade"
      ]
    }
  ]
}

**REGRAS:**
1. M√≠nimo 15 steps, m√°ximo 30 steps
2. Cada step √© um MINI-TUTORIAL completo (n√£o economize tokens!)
3. Sequ√™ncia l√≥gica: n√£o pule depend√™ncias
4. Tempos realistas baseados em complexidade
5. Validation criteria deve ser TEST√ÅVEL
6. Common pitfalls baseados em experi√™ncia real
7. Resources com URLs reais e relevantes
8. Organize por fases: Setup (1-5), Desenvolvimento (6-20), Testes (21-25), Deploy (26-30)`,
        user: `Crie um checklist completo de implementa√ß√£o para esta solu√ß√£o:

IDEIA: "${solution.original_idea}"
T√çTULO: "${solution.title}"
DESCRI√á√ÉO: "${solution.short_description || 'N√£o especificada'}"

Retorne APENAS o objeto JSON especificado.`,
        model: "google/gemini-2.5-pro",
        maxTokens: 40000
      },

      architecture: {
        system: `Voc√™ √© um ARQUITETO DE SISTEMAS especializado em criar diagramas visuais usando Mermaid.

MISS√ÉO:
Gerar 1-3 FLUXOS VISUAIS diferentes usando C√ìDIGO MERMAID correto e limpo.

TIPOS DE DIAGRAMAS RECOMENDADOS:
1. **Fluxo de Implementa√ß√£o** (graph TD): Etapas do projeto
2. **Fluxo de Dados/APIs** (sequenceDiagram): Como dados circulam
3. **Jornada do Usu√°rio** (journey): Experi√™ncia do usu√°rio

ESTRUTURA JSON:
{
  "implementation_flows": {
    "flows": [
      {
        "id": "identificador_unico",
        "title": "T√≠tulo Descritivo do Fluxo",
        "description": "Descri√ß√£o de 2-3 frases explicando o que este fluxo mostra",
        "mermaid_code": "graph TD\\n    A[In√≠cio] --> B[Passo 2]\\n    B --> C{Decis√£o?}\\n    C -->|Sim| D[A√ß√£o Sim]\\n    C -->|N√£o| E[A√ß√£o N√£o]\\n    D --> F[Fim]\\n    E --> F",
        "estimated_time": "X-Y horas",
        "complexity": "low/medium/high"
      }
    ],
    "total_estimated_time": "X-Y horas (soma de todos os fluxos)",
    "prerequisites": "Lista de pr√©-requisitos: [...]"
  }
}

**REGRAS CR√çTICAS DO MERMAID:**
1. Use \\n para quebras de linha (n√£o quebras reais)
2. IDs simples sem espa√ßos (use underscore: Setup_API)
3. Labels entre colchetes: [Texto do N√≥]
4. Setas com espa√ßos: " --> " (n√£o "-->")
5. Decis√µes com chaves: {Pergunta?}
6. Labels em setas: -->|Label| 
7. M√°ximo 20 n√≥s por diagrama (legibilidade)
8. Portugu√™s brasileiro nos labels
9. TESTE mentalmente se o c√≥digo est√° correto!

**EXEMPLOS:**

Exemplo 1 - Fluxo de Implementa√ß√£o:
graph TD
    Start[In√≠cio do Projeto] --> Plan[Planejamento Detalhado]
    Plan --> Setup[Setup de Ferramentas]
    Setup --> Dev[Desenvolvimento]
    Dev --> Test{Testes OK?}
    Test -->|Sim| Deploy[Deploy]
    Test -->|N√£o| Fix[Corrigir Bugs]
    Fix --> Test
    Deploy --> Monitor[Monitoramento]

Exemplo 2 - Fluxo de Dados:
sequenceDiagram
    participant User
    participant Bot
    participant API
    participant DB
    User->>Bot: Envia mensagem
    Bot->>API: Processa com GPT-4
    API->>Bot: Retorna resposta
    Bot->>DB: Salva hist√≥rico
    Bot->>User: Envia resposta

Exemplo 3 - Jornada do Usu√°rio:
journey
    title Jornada do Usu√°rio
    section Descoberta
      Acessa site: 5: User
      Assiste demo: 4: User
    section Cadastro
      Cria conta: 3: User
      Configura perfil: 4: User
    section Uso
      Primeira automa√ß√£o: 5: User
      Resultado positivo: 5: User`,
        user: `Gere 1-3 fluxos visuais em Mermaid para esta solu√ß√£o:

IDEIA: "${solution.original_idea}"
T√çTULO: "${solution.title}"
DESCRI√á√ÉO: "${solution.short_description || 'N√£o especificada'}"

Escolha os tipos de diagramas mais relevantes para ESTA solu√ß√£o espec√≠fica.

Retorne APENAS o objeto JSON especificado.`,
        model: "google/gemini-2.5-pro",
        maxTokens: 20000
      },

      lovable: {
        system: `Voc√™ √© um TECH LEAD especializado em criar prompts para desenvolvimento de aplica√ß√µes.

MISS√ÉO:
Gerar um PROMPT COMPLETO E PROFISSIONAL para o Lovable (plataforma de desenvolvimento) implementar a solu√ß√£o.

ESTRUTURA JSON:
{
  "lovable_prompt": "# üéØ CONTEXTO DO PROJETO\\n\\n[2-3 par√°grafos explicando o que ser√° constru√≠do, problema que resolve, e valor gerado]\\n\\n# üìã ESPECIFICA√á√ÉO T√âCNICA\\n\\n## Stack Tecnol√≥gica\\n- Frontend: React + TypeScript + Tailwind CSS + Shadcn UI\\n- Backend: Supabase (PostgreSQL + Auth + Storage + Edge Functions)\\n- Integra√ß√µes: [listar APIs]\\n\\n## Banco de Dados\\n\\n### Tabelas:\\n1. **users**\\n   - id (uuid, PK)\\n   - email (text, unique)\\n   - name (text)\\n   - created_at (timestamp)\\n\\n2. **[outra tabela]**\\n   - [campos...]\\n\\n### Relacionamentos:\\n- users 1:N sessions\\n- [outros...]\\n\\n## Funcionalidades Core\\n\\n### 1. [Feature Principal 1]\\n**Descri√ß√£o**: [O que faz]\\n**Fluxo**: [Passo a passo]\\n**Componentes**: [Lista]\\n**Valida√ß√µes**: [Regras]\\n\\n### 2. [Feature Principal 2]\\n[...]\\n\\n# üîÑ WORKFLOWS E INTEGRA√á√ïES\\n\\n## Workflow 1: [Nome]\\n1. [Passo 1]\\n2. [Passo 2]\\n[...]\\n\\n## Integra√ß√µes Externas\\n- **OpenAI GPT-4**: [para qu√™, como]\\n- **SendGrid**: [emails, templates]\\n[...]\\n\\n# üé® DESIGN E UX\\n\\n- Mobile-first, responsivo\\n- Tema: [cores, estilo]\\n- Componentes Shadcn: [quais usar]\\n- Navega√ß√£o: [estrutura]\\n\\n# üîê AUTENTICA√á√ÉO E SEGURAN√áA\\n\\n- Auth via Supabase (email/password)\\n- Roles: [admin, user, viewer]\\n- RLS policies: [regras]\\n\\n# ‚úÖ CRIT√âRIOS DE ACEITE\\n\\n1. [Crit√©rio 1]\\n2. [Crit√©rio 2]\\n[...]\\n\\n# üìù NOTAS IMPORTANTES\\n\\n- [Observa√ß√£o t√©cnica 1]\\n- [Observa√ß√£o t√©cnica 2]",
  "complexity": "low/medium/high",
  "estimated_time": "X-Y horas de desenvolvimento"
}

**REGRAS:**
1. Prompt deve ser COMPLETO e EXECUT√ÅVEL
2. Especifica√ß√µes t√©cnicas DETALHADAS
3. Schema de banco COMPLETO (SQL)
4. Features descritas passo-a-passo
5. Use formata√ß√£o Markdown
6. Seja espec√≠fico sobre tecnologias (Supabase, React, Tailwind)
7. Inclua valida√ß√µes, edge cases, error handling
8. M√≠nimo 800 palavras no prompt`,
        user: `Gere um prompt Lovable completo para desenvolver esta solu√ß√£o:

IDEIA: "${solution.original_idea}"
T√çTULO: "${solution.title}"
DESCRI√á√ÉO: "${solution.short_description || 'N√£o especificada'}"

Retorne APENAS o objeto JSON especificado.`,
        model: "google/gemini-2.5-pro",
        maxTokens: 30000
      }
    };

    const promptConfig = prompts[sectionType];
    const systemPrompt = promptConfig.system;
    const userPrompt = promptConfig.user;

    console.log(`[SECTION-GEN] ü§ñ Modelo: ${promptConfig.model}`);
    console.log(`[SECTION-GEN] üìä Max tokens: ${promptConfig.maxTokens}`);
    console.log(`[SECTION-GEN] üöÄ Chamando Lovable AI...`);

    const aiResponse = await fetch(lovableUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableApiKey}`,
      },
      body: JSON.stringify({
        model: promptConfig.model,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.8,
        max_tokens: promptConfig.maxTokens,
        response_format: { type: "json_object" }
      }),
      signal: AbortSignal.timeout(180000) // 3 minutos
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error(`[SECTION-GEN] ‚ùå Erro na AI: ${aiResponse.status} - ${errorText}`);
      
      if (aiResponse.status === 429) {
        return new Response(
          JSON.stringify({ error: "Rate limit atingido. Aguarde alguns minutos." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      if (aiResponse.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos em Settings." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      throw new Error(`Erro na API de IA: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const content = aiData.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Resposta vazia da IA");
    }

    console.log(`[SECTION-GEN] üì• Resposta recebida (${content.length} chars)`);

    // Parse do JSON retornado
    let parsedContent;
    try {
      // Remover markdown se houver
      const cleanContent = content.replace(/```json\n?|\n?```/g, "").trim();
      parsedContent = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error("[SECTION-GEN] ‚ùå Erro ao fazer parse:", content.substring(0, 500));
      throw new Error("JSON inv√°lido retornado pela IA");
    }

    // Preparar update baseado no tipo de se√ß√£o
    const updateData: Record<string, any> = {};
    
    if (sectionType === "framework") {
      updateData.framework_mapping = parsedContent.framework_quadrants;
      updateData.mind_map = parsedContent.mind_map;
    } else if (sectionType === "tools") {
      updateData.required_tools = parsedContent.required_tools;
    } else if (sectionType === "checklist") {
      updateData.implementation_checklist = parsedContent.implementation_checklist;
    } else if (sectionType === "architecture") {
      updateData.implementation_flows = parsedContent.implementation_flows;
    } else if (sectionType === "lovable") {
      updateData.lovable_prompt = parsedContent.lovable_prompt;
    }

    // Atualizar no banco
    const { error: updateError } = await supabase
      .from("ai_generated_solutions")
      .update(updateData)
      .eq("id", solutionId)
      .eq("user_id", userId);

    if (updateError) {
      console.error("[SECTION-GEN] ‚ùå Erro ao atualizar:", updateError);
      throw new Error("Erro ao salvar conte√∫do gerado");
    }

    console.log(`[SECTION-GEN] ‚úÖ ${sectionType} gerado e salvo com sucesso!`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        cached: false,
        content: parsedContent 
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error: any) {
    console.error("[SECTION-GEN] ‚ùå Erro:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "Erro ao gerar conte√∫do",
        details: error.toString()
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
});