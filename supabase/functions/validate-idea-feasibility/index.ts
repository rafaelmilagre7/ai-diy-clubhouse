import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { idea } = await req.json();

    if (!idea?.trim()) {
      return new Response(
        JSON.stringify({ error: 'Ideia n√£o fornecida' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    // üÜï FASE 2: Implementar cache de valida√ß√µes (MD5 hash da ideia normalizada)
    const normalizedIdea = idea.trim().toLowerCase().replace(/\s+/g, ' ');
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(normalizedIdea);
    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedData);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const cacheKey = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

    console.log('[VALIDATE-FEASIBILITY] üîë Cache key:', cacheKey.substring(0, 16) + '...');

    // Verificar cache (v√°lido por 30 dias)
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    
    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.39.3');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const { data: cachedValidation, error: cacheError } = await supabase
      .from('idea_validations_cache')
      .select('validation_result, created_at, accessed_count')
      .eq('cache_key', cacheKey)
      .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
      .maybeSingle();

    if (cachedValidation && !cacheError) {
      console.log('[VALIDATE-FEASIBILITY] ‚úÖ CACHE HIT! Retornando valida√ß√£o existente');
      console.log('[VALIDATE-FEASIBILITY] üìä Acessos:', cachedValidation.accessed_count + 1);
      
      // Incrementar contador de acessos
      await supabase
        .from('idea_validations_cache')
        .update({
          accessed_count: cachedValidation.accessed_count + 1,
          last_accessed_at: new Date().toISOString()
        })
        .eq('cache_key', cacheKey);
      
      return new Response(
        JSON.stringify({
          ...cachedValidation.validation_result,
          from_cache: true,
          cached_at: cachedValidation.created_at
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('[VALIDATE-FEASIBILITY] ‚ùå Cache miss, chamando IA...');
    console.log('[VALIDATE-FEASIBILITY] üìù Ideia:', idea.substring(0, 100) + '...');
    
    const startTime = Date.now();

    // üÜï Buscar configura√ß√µes do prompt no banco de dados
    const { data: promptConfig, error: promptError } = await supabase
      .from('ai_prompts')
      .select('*')
      .eq('key', 'validate_idea_feasibility')
      .eq('is_active', true)
      .single();

    // üéØ Fun√ß√£o auxiliar: Interpreta resposta natural da IA e extrai estrutura
    const interpretValidationResponse = async (rawResponse: string): Promise<{
      viable: boolean;
      score: number;
      reason: string;
    }> => {
      const interpretPrompt = `
Voc√™ √© um interpretador de respostas de viabilidade t√©cnica.

RESPOSTA DA IA:
"""
${rawResponse}
"""

TAREFA:
Analise a resposta acima e extraia:
1. viable (boolean): A ideia √© VI√ÅVEL tecnicamente? (true/false)
2. score (number): Confian√ßa na viabilidade de 0-100
3. reason (string): Resumo objetivo em 1-2 frases do motivo

REGRAS:
- Se a resposta cont√©m "SIM", "D√Å PRA FAZER", "VI√ÅVEL" ‚Üí viable=true
- Se cont√©m "N√ÉO", "IMPOSS√çVEL", "INVI√ÅVEL" ‚Üí viable=false
- Score alto (80-100) = muita confian√ßa, baixo (0-30) = incerto
- Reason deve ser claro e direto

RETORNE APENAS O JSON:
{
  "viable": true/false,
  "score": 0-100,
  "reason": "texto"
}
`;

      const interpretResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${LOVABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'google/gemini-2.5-flash',
          messages: [{ role: 'user', content: interpretPrompt }],
          temperature: 0.3,
        }),
      });

      if (!interpretResponse.ok) {
        throw new Error('Erro ao interpretar resposta');
      }

      const interpretData = await interpretResponse.json();
      const interpretContent = interpretData.choices[0].message.content.trim();
      
      // Limpar markdown se necess√°rio
      const cleanInterpretContent = interpretContent
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .trim();

      const parsed = JSON.parse(cleanInterpretContent);

      // Valida√ß√£o b√°sica
      if (typeof parsed.viable !== 'boolean' ||
          typeof parsed.score !== 'number' ||
          typeof parsed.reason !== 'string') {
        throw new Error('Interpreta√ß√£o inv√°lida');
      }

      return parsed;
    };

    // Fallback para prompt hardcoded se n√£o encontrar no banco
    const systemPrompt = promptConfig?.prompt_content || `Voc√™ √© um especialista em automa√ß√£o e IA no-code para empresas. Sua miss√£o √© determinar se uma ideia pode ou n√£o ser executada com ferramentas no-code atualmente dispon√≠veis.

## CONTEXTO E CONHECIMENTO

Voc√™ conhece profundamente estas ferramentas no-code:

**Bancos de Dados e Armazenamento:**
- Airtable, Google Sheets, Notion Database, Supabase, Firebase, etc‚Ä¶

**Intelig√™ncia Artificial:**
- APIs: OpenAI (GPT-5, DALL-E, Whisper), Anthropic (Claude), Google (Gemini), Grok, Deepseek, etc‚Ä¶
- Plataformas: ChatGPT, MidJourney, Stable Diffusion, ElevenLabs (voz), etc‚Ä¶
- Vis√£o computacional: GPT-4 Vision, Google Vision API

**Automa√ß√£o e Integra√ß√£o:**
- Lovable, Make, n8n, Zapier, Lindy AI, etc‚Ä¶

**Interfaces onde a IA atua**
- WhatsApp, Site, plataforma pr√≥pria, CRM, ERP, Gmail, chatbot,Twilio, Discord, qualquer plataforma que tenha API aberta, etc‚Ä¶

**Outras ferramentas:**
- Google Workspace (Docs, Sheets, Calendar, Drive)
- Microsoft Power Automate, Manus, Agent GPT
- Calendly, Cal.com (agendamento)
- OCR: Tesseract, Google Cloud Vision
- DocuParser, Parsio, PDF.co, CloudConvert

## SEU PROCESSO DE AN√ÅLISE INTERNA

Para cada ideia que receber, voc√™ deve analisar mentalmente:

1. **Quebrar a ideia em componentes:**
   - Qual √© a entrada de dados? (formul√°rio, e-mail, webhook, arquivo, etc.)
   - Precisa de IA? Qual tipo? (texto, imagem, voz, decis√£o)
   - Qual √© o modelo de IA necess√°rio? (OpenAI, Claude, Gemini, Whisper, Vision, etc‚Ä¶)
   - Quais integra√ß√µes s√£o necess√°rias?
   - Qual √© a sa√≠da esperada? (notifica√ß√£o, relat√≥rio, a√ß√£o, atualiza√ß√£o, plataforma no Lovable, gmail, Whatsapp, etc‚Ä¶)

2. **Avaliar viabilidade t√©cnica:**
   - √â vi√°vel tecnicamente para fazer via automa√ß√£o e ferramentas no-code com IA?
   - As APIs necess√°rias existem e s√£o acess√≠veis?

3. **Identificar bloqueadores:**
   - Depende de hardware espec√≠fico? que n√£o pode ser desenvolvido via Lovable por exemplo?
   - Requer seguran√ßa/compliance que foge a uma solu√ß√£o √©tica.
   - APIs necess√°rias n√£o existem ou s√£o inacess√≠veis?

4. **Considerar casos lim√≠trofes:**
   - Se 80% for vi√°vel, considere VI√ÅVEL (pode adaptar)
   - Se precisa de "pequeno c√≥digo" mas √© m√≠nimo, considere VI√ÅVEL
   - Se existem workarounds razo√°veis, considere VI√ÅVEL

## CRIT√âRIOS DE DECIS√ÉO

**Responda SIM quando:**
- Existe uma combina√ß√£o de ferramentas no-code, automa√ß√£o e IA que resolve o problema
- As integra√ß√µes necess√°rias est√£o dispon√≠veis via API ou conectores nativos
- A l√≥gica pode ser implementada sem necessidade de ser exclusivo hardcode
- Pequenos ajustes no escopo original tornam vi√°vel
- √â poss√≠vel com automa√ß√£o, integra√ß√µes, IA, ferramentas no-code

**Responda N√ÉO quando:**
- Requer processamento de baixo n√≠vel (drivers, hardware espec√≠fico)
- Precisa de algoritmos complexos n√£o dispon√≠veis em IA/APIs
- Depende de APIs que n√£o existem
- Exige performance imposs√≠vel para ferramentas no-code, automa√ß√£o e IA
- Requer desenvolvimento de modelos de IA personalizados do zero
- Envolve seguran√ßa cr√≠tica que no-code n√£o pode garantir

## FORMATO DE RESPOSTA OBRIGAT√ìRIO

Responda APENAS com JSON:
{
  "viable": true ou false,
  "score": 0-100,
  "reason": "Explica√ß√£o direta do COMO seria feito (se vi√°vel) ou POR QU√ä n√£o √© vi√°vel (m√°ximo 3 frases)"
}

## PRINC√çPIOS IMPORTANTES

- Seja pragm√°tico: se 90% da ideia funciona, responda SIM
- Seja honesto: se realmente n√£o d√°, diga N√ÉO sem rodeios
- Seja direto: evite "talvez", "depende", "parcialmente"
- Pense em workarounds criativos antes de dizer N√ÉO
- Considere MVP (produto m√≠nimo vi√°vel) ao avaliar`;

    console.log('[VALIDATE-FEASIBILITY] üì§ Chamando IA...');

    // Usar configura√ß√µes do banco ou defaults
    const model = promptConfig?.model || 'google/gemini-2.5-flash-lite';
    const timeoutMs = (promptConfig?.timeout_seconds || 15) * 1000;
    const maxRetries = promptConfig?.retry_attempts || 2;
    
    console.log('[VALIDATE-FEASIBILITY] üéØ Configura√ß√µes:', { 
      model, 
      timeout: timeoutMs + 'ms', 
      retries: maxRetries,
      fromDB: !!promptConfig 
    });

    // Fun√ß√£o auxiliar para fazer request com timeout e retry
    const makeAIRequest = async (attempt = 1): Promise<Response> => {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        
        const bodyPayload: any = {
          model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: `Avalie se √© vi√°vel: "${idea}"` }
          ]
        };

        // Adicionar configura√ß√µes opcionais se dispon√≠veis
        if (promptConfig?.temperature !== null && promptConfig?.temperature !== undefined) {
          bodyPayload.temperature = promptConfig.temperature;
        }
        if (promptConfig?.max_tokens) {
          bodyPayload.max_tokens = promptConfig.max_tokens;
        }
        if (promptConfig?.response_format) {
          bodyPayload.response_format = promptConfig.response_format;
        }
        
        const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${LOVABLE_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(bodyPayload),
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        return response;
        
      } catch (error: any) {
        if (attempt < maxRetries && (error.name === 'AbortError' || error.message?.includes('timeout'))) {
          console.warn(`[VALIDATE-FEASIBILITY] ‚ö†Ô∏è Timeout na tentativa ${attempt}/${maxRetries}, tentando novamente...`);
          await new Promise(r => setTimeout(r, 1000 * attempt)); // Backoff progressivo
          return makeAIRequest(attempt + 1);
        }
        throw error;
      }
    };

    const response = await makeAIRequest();

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[VALIDATE-FEASIBILITY] ‚ùå Erro na API:', response.status, errorText);
      throw new Error(`API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error('Resposta vazia da IA');
    }

    console.log('[VALIDATE-FEASIBILITY] üì• Resposta:', content);

    // Limpar JSON (remover markdown se tiver)
    let cleanContent = content.trim()
      .replace(/```json\s*/gi, '')
      .replace(/```\s*/gi, '')
      .trim();

    // üéØ INTERPRETA√á√ÉO INTELIGENTE - Suporta JSON estruturado OU texto natural
    let validationResult: { viable: boolean; score: number; reason: string };
    let interpretationMethod = 'direct_parse';

    try {
      // Tentar parse direto primeiro (se j√° vier JSON estruturado)
      const parsed = JSON.parse(cleanContent);
      
      if (typeof parsed.viable === 'boolean' &&
          typeof parsed.score === 'number' &&
          typeof parsed.reason === 'string') {
        validationResult = parsed;
        console.log('[VALIDATE-FEASIBILITY] ‚úÖ Resposta j√° estruturada (JSON v√°lido)');
      } else {
        // Se n√£o tiver o formato correto, interpretar com IA
        console.log('[VALIDATE-FEASIBILITY] üîÑ JSON inv√°lido, interpretando com IA...');
        validationResult = await interpretValidationResponse(cleanContent);
        interpretationMethod = 'ai_interpretation';
      }
    } catch (parseError) {
      // Se JSON.parse falhou, resposta √© texto natural ‚Üí interpretar com IA
      console.log('[VALIDATE-FEASIBILITY] üîÑ Resposta em texto natural, interpretando com IA...');
      validationResult = await interpretValidationResponse(cleanContent);
      interpretationMethod = 'ai_interpretation';
    }

    console.log('[VALIDATE-FEASIBILITY] üìä Resultado interpretado:', {
      viable: validationResult.viable,
      score: validationResult.score,
      reason: validationResult.reason.substring(0, 100) + (validationResult.reason.length > 100 ? '...' : ''),
      method: interpretationMethod
    });

    const totalTime = Date.now() - startTime;
    console.log('[VALIDATE-FEASIBILITY] ‚úÖ Resultado:', {
      viable: validationResult.viable,
      score: validationResult.score,
      tempo_total: totalTime + 'ms'
    });

    // üÜï FASE 2: Salvar no cache
    try {
      await supabase
        .from('idea_validations_cache')
        .insert({
          cache_key: cacheKey,
          idea_summary: idea.substring(0, 200),
          validation_result: validationResult
        });
      
      console.log('[VALIDATE-FEASIBILITY] üíæ Resultado salvo no cache');
    } catch (cacheInsertError) {
      console.warn('[VALIDATE-FEASIBILITY] ‚ö†Ô∏è Erro ao salvar cache (n√£o cr√≠tico):', cacheInsertError);
    }

    return new Response(
      JSON.stringify({
        ...validationResult,
        from_cache: false
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error: any) {
    console.error('[VALIDATE-FEASIBILITY] ‚ùå Erro fatal:', error);
    console.error('[VALIDATE-FEASIBILITY] üìö Stack:', error.stack);
    
    const errorMessage = error.message || 'Erro desconhecido';
    
    // Mensagens mais espec√≠ficas baseadas no tipo de erro
    let userMessage = errorMessage;
    
    if (errorMessage.includes('boot error') || errorMessage.includes('SyntaxError')) {
      userMessage = 'Servi√ßo temporariamente indispon√≠vel. Tente novamente em alguns instantes.';
    } else if (errorMessage.includes('Resposta inv√°lida') || errorMessage.includes('campos inv√°lidos')) {
      userMessage = 'N√£o conseguimos analisar sua ideia. Tente descrever com mais detalhes o que voc√™ quer automatizar.';
    } else if (errorMessage.includes('JSON')) {
      userMessage = 'Erro ao processar resposta. Tentando novamente pode resolver.';
    } else if (errorMessage.includes('API error')) {
      userMessage = 'Erro de comunica√ß√£o com IA. Tente novamente.';
    }
    
    return new Response(
      JSON.stringify({ 
        error: userMessage,
        viable: false
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
