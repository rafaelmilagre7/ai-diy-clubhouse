import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// üîí Schema de valida√ß√£o Zod
const AnalyzeRequestSchema = z.object({
  idea: z.string()
    .trim()
    .min(30, "A ideia deve ter no m√≠nimo 30 caracteres para an√°lise adequada")
    .max(2000, "A ideia deve ter no m√°ximo 2000 caracteres")
    .regex(
      /^[\w\s√Ä-√ø.,!?@#$%&*()\-+=[\]{};:'"/\\|<>~`]+$/,
      "Texto cont√©m caracteres n√£o permitidos"
    )
    .refine(
      (val) => !/<script|javascript:|onerror=/i.test(val),
      "Texto cont√©m c√≥digo n√£o permitido"
    )
});

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();

    // üîí Validar entrada com Zod
    const validationResult = AnalyzeRequestSchema.safeParse(body);
    
    if (!validationResult.success) {
      const firstError = validationResult.error.errors[0];
      console.warn(`[ANALYZE] ‚ùå Valida√ß√£o falhou: ${firstError.message}`);
      
      return new Response(
        JSON.stringify({ 
          error: firstError.message,
          code: "VALIDATION_ERROR"
        }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const { idea } = validationResult.data;
    console.log(`[ANALYZE] ‚úì Valida√ß√£o OK | Analisando ideia: "${idea.substring(0, 80)}..."`);

    const lovableAIUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";
    const lovableAIKey = Deno.env.get("LOVABLE_API_KEY");

    const systemPrompt = `
Voc√™ √© o Rafael Milagre - especialista em IA e automa√ß√£o. Sua miss√£o: fazer perguntas CIR√öRGICAS que v√£o direcionar a melhor solu√ß√£o t√©cnica.

üéØ OBJETIVO: Gerar exatamente 5 perguntas que MUDEM a arquitetura e as ferramentas da solu√ß√£o final.

‚ùå EVITE PERGUNTAS GEN√âRICAS:
- "Quantos leads chegam por m√™s?" ‚Üí N√£o muda a solu√ß√£o
- "Quem vai implementar?" ‚Üí N√£o muda a solu√ß√£o
- "Qual o prazo?" ‚Üí N√£o muda a solu√ß√£o

‚úÖ FA√áA PERGUNTAS ESTRAT√âGICAS:
- "Qual CRM voc√™ usa hoje? Pipedrive, HubSpot, RD Station?" ‚Üí Muda integra√ß√µes
- "Os leads chegam por WhatsApp, Instagram, formul√°rio web ou tudo junto?" ‚Üí Muda arquitetura
- "Voc√™ j√° tem alguma automa√ß√£o configurada? Make, Zapier, N8N?" ‚Üí Muda stack tech

üß† CATEGORIAS OBRIGAT√ìRIAS (escolher 5):
1. Stack Atual: Ferramentas/plataformas que j√° usa (CRM, automa√ß√£o, site, etc.)
2. Canais e Fluxos: De onde vem os leads/dados, como chegam, onde devem ir
3. Integra√ß√µes Cr√≠ticas: Quais sistemas PRECISAM conversar entre si
4. Dados e Contexto: Que informa√ß√µes existem hoje, em que formato
5. Gargalos Atuais: Processo manual espec√≠fico que precisa automatizar

FORMATO DE RESPOSTA (JSON):
{
  "questions": [
    {
      "category": "Stack Atual",
      "question": "Pergunta espec√≠fica sobre ferramentas que j√° usa?",
      "why_important": "Explica√ß√£o de 30-50 palavras sobre como a resposta muda a arquitetura, custos ou ferramentas da solu√ß√£o."
    }
  ]
}

EXEMPLO REAL (WhatsApp + IA + Agendamento):
{
  "questions": [
    {
      "category": "Stack Atual",
      "question": "Qual CRM voc√™ usa hoje para gerenciar leads? (Ex: Pipedrive, HubSpot, RD Station, Google Sheets, outro?)",
      "why_important": "Se j√° tem CRM, vamos integrar direto via API nativa. Se usa Sheets, cria solu√ß√£o alternativa com webhook. Se n√£o tem nada, precisa escolher antes de come√ßar. Essa resposta define 30-40% da arquitetura de dados e das automa√ß√µes."
    },
    {
      "category": "Canais e Fluxos",
      "question": "Os leads interessados no evento entram em contato APENAS pelo WhatsApp ou tamb√©m por Instagram, formul√°rio no site, email?",
      "why_important": "Se √© multi-canal, precisamos de orquestrador central (Make) com m√∫ltiplos webhooks. Se √© s√≥ WhatsApp, arquitetura simplificada com API Meta direta. Impacta custos, complexidade e tempo de setup em 50%."
    },
    {
      "category": "Integra√ß√µes Cr√≠ticas",
      "question": "Voc√™ usa Google Calendar, Outlook Calendar ou outro sistema para agendar reuni√µes?",
      "why_important": "Define se usamos Calendly (integra√ß√£o r√°pida), Cal.com (open-source customiz√°vel) ou API direta do Google. Cada op√ß√£o tem custo, setup e limita√ß√µes diferentes. Resposta muda a camada de agendamento inteira."
    },
    {
      "category": "Dados e Contexto",
      "question": "Quando um lead te procura pelo WhatsApp, que informa√ß√µes voc√™ PRECISA coletar antes de agendar? (Ex: nome, empresa, faturamento, dor espec√≠fica?)",
      "why_important": "Se coleta 2 campos, prompt simples. Se coleta 10 campos, precisa de fluxo conversacional estruturado com valida√ß√£o. Define complexidade do chatbot, tokens gastos e experi√™ncia do usu√°rio."
    },
    {
      "category": "Gargalos Atuais",
      "question": "Hoje, quando um lead manda mensagem no WhatsApp e ningu√©m responde, o que acontece? O lead some, aguarda horas, vai para concorrente?",
      "why_important": "Se lead some r√°pido, prioridade √© resposta instant√¢nea (chatbot sempre online). Se aguarda, pode ter delay humano. Define urg√™ncia, prioridade de automa√ß√£o e ROI esperado da solu√ß√£o."
    }
  ]
}

üéØ REGRAS FINAIS:
- Cada pergunta deve ser 100% espec√≠fica ao contexto da ideia
- Se a ideia menciona ferramenta X, pergunte sobre alternativas/complementos
- Se menciona problema Y, pergunte sobre o processo atual
- Foque em decis√µes que MUDAM c√≥digo, integra√ß√µes, custos ou ferramentas
- why_important: m√≠nimo 30 palavras, m√°ximo 60 palavras

Gere 5 perguntas seguindo EXATAMENTE esse padr√£o.`;

    const userPrompt = `Ideia: "${idea}"

Gere perguntas inteligentes para eu entender PERFEITAMENTE o que essa pessoa quer.`;

    const response = await fetch(lovableAIUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableAIKey}`,
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.8,
        max_tokens: 2000,
        response_format: { type: "json_object" },
      }),
      signal: AbortSignal.timeout(30000),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes atingido. Tente novamente em alguns instantes." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos ao seu workspace." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Resposta vazia da IA");
    }

    const questions = JSON.parse(content);

    console.log(`[ANALYZE] ‚úÖ ${questions.questions?.length || 0} perguntas geradas`);

    return new Response(
      JSON.stringify(questions),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    // Log detalhado apenas no servidor
    console.error("[ANALYZE] ‚ùå Erro interno:", {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // Mensagem gen√©rica e segura para o cliente
    return new Response(
      JSON.stringify({ 
        error: "Erro ao analisar sua ideia. Por favor, tente novamente.",
        code: "ANALYSIS_FAILED",
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
