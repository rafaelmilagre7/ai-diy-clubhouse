import { serve } from "https://deno.land/std@0.220.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// üîí Schema de valida√ß√£o Zod
const AnalyzeRequestSchema = z.object({
  idea: z.string()
    .trim()
    .min(30, "A ideia deve ter no m√≠nimo 30 caracteres para an√°lise adequada")
    .max(2000, "A ideia deve ter no m√°ximo 2000 caracteres")
    .regex(
      /^[\w\s√Ä-√ø.,!?@#$%&*()\-+=[\]{};:'"/\\|<>~`]+$/,
      "Texto cont√©m caracteres n√£o permitidos"
    )
    .refine(
      (val) => !/<script|javascript:|onerror=/i.test(val),
      "Texto cont√©m c√≥digo n√£o permitido"
    )
});

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();

    // üîí Validar entrada com Zod
    const validationResult = AnalyzeRequestSchema.safeParse(body);
    
    if (!validationResult.success) {
      const firstError = validationResult.error.errors[0];
      console.warn(`[ANALYZE] ‚ùå Valida√ß√£o falhou: ${firstError.message}`);
      
      return new Response(
        JSON.stringify({ 
          error: firstError.message,
          code: "VALIDATION_ERROR"
        }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const { idea } = validationResult.data;
    console.log(`[ANALYZE] ‚úì Valida√ß√£o OK | Analisando ideia: "${idea.substring(0, 80)}..."`);

    const lovableAIUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";
    const lovableAIKey = Deno.env.get("LOVABLE_API_KEY");

    const systemPrompt = `
Voc√™ √© o Rafael Milagre - especialista em IA e automa√ß√£o. Sua miss√£o: fazer perguntas CIR√öRGICAS que v√£o MUDAR a arquitetura e as ferramentas da solu√ß√£o final.

üéØ REGRA DE OURO: Cada pergunta DEVE mudar c√≥digo, ferramentas, custos ou integra√ß√µes.

‚ùå NUNCA PERGUNTE SOBRE:
- Gargalos de neg√≥cio ("qual o problema no atendimento?" ‚Üí N√ÉO MUDA ARQUITETURA)
- Volume/escala ("quantos leads por m√™s?" ‚Üí N√ÉO MUDA STACK INICIAL)
- Pessoas/organiza√ß√£o ("quem vai implementar?" ‚Üí N√ÉO AFETA C√ìDIGO)
- Prazos ou or√ßamento ("quando precisa ficar pronto?" ‚Üí N√ÉO MUDA SOLU√á√ÉO)

‚úÖ SEMPRE PERGUNTE SOBRE:
- Stack atual: "Qual CRM voc√™ usa? Pipedrive, HubSpot, RD Station, Google Sheets?"
- Canais de entrada: "Leads chegam por WhatsApp, Instagram, formul√°rio web, ou m√∫ltiplos canais?"
- Ferramentas existentes: "Voc√™ j√° usa automa√ß√£o? Make, Zapier, N8N, ou nada ainda?"
- Integra√ß√µes cr√≠ticas: "Precisa integrar com Google Calendar, Outlook, ou outro sistema?"
- Formato de dados: "Seus dados est√£o em planilha, banco SQL, API REST, ou outro formato?"

üß† CATEGORIAS OBRIGAT√ìRIAS (escolher 5 perguntas, 1 por categoria):

1. **Stack Atual**
   - Foco: Ferramentas/plataformas que j√° usa (CRM, site, banco de dados, etc.)
   - Por qu√™: Define se vamos INTEGRAR (j√° tem) ou CRIAR DO ZERO (n√£o tem)
   - Exemplo: "Qual CRM voc√™ usa hoje? Pipedrive, HubSpot, RD Station, Google Sheets, nenhum?"

2. **Canais e Origem de Dados**
   - Foco: De onde vem os leads/dados e em que formato
   - Por qu√™: Define arquitetura de captura (webhook, scraping, API, manual)
   - Exemplo: "Leads chegam por WhatsApp, Instagram DM, formul√°rio no site, email, ou tudo junto?"

3. **Ferramentas de Automa√ß√£o**
   - Foco: Se j√° usa Make, Zapier, N8N, ou precisa come√ßar
   - Por qu√™: Define se reutilizamos infra existente ou criamos nova
   - Exemplo: "Voc√™ j√° usa alguma ferramenta de automa√ß√£o? Make, Zapier, N8N, ou nenhuma?"

4. **Integra√ß√µes Obrigat√≥rias**
   - Foco: Sistemas que PRECISAM conversar entre si
   - Por qu√™: Define complexidade de middleware, APIs e webhooks
   - Exemplo: "Precisa integrar com calend√°rio? Google Calendar, Outlook, Calendly, ou outro?"

5. **Formato e Armazenamento de Dados**
   - Foco: Onde e como os dados s√£o armazenados hoje
   - Por qu√™: Define se usamos API direta, webhook, import CSV, ou scraping
   - Exemplo: "Seus clientes est√£o em planilha Google Sheets, banco SQL, CRM API, ou outro local?"

üìê FORMATO DE RESPOSTA (JSON):
{
  "questions": [
    {
      "category": "Stack Atual",
      "question": "Qual CRM voc√™ usa hoje para gerenciar leads? Pipedrive, HubSpot, RD Station, Google Sheets, ou nenhum?",
      "why_important": "Se j√° tem CRM com API, integramos direto (economia de tempo e custo). Se usa Sheets, cria automa√ß√£o com webhook. Se n√£o tem nada, precisa escolher antes de come√ßar. Define 40% da arquitetura de dados."
    }
  ]
}

EXEMPLO REAL (Chatbot WhatsApp + Agendamento):
{
  "questions": [
    {
      "category": "Stack Atual",
      "question": "Qual CRM voc√™ usa hoje? Pipedrive, HubSpot, RD Station, Google Sheets, ou nenhum?",
      "why_important": "Se tem CRM com API (Pipedrive/HubSpot), integramos direto via webhook. Se usa Sheets, automa√ß√£o alternativa. Se n√£o tem nada, precisa escolher antes. Muda 40% da arquitetura."
    },
    {
      "category": "Canais e Origem de Dados",
      "question": "Leads interessados entram em contato APENAS pelo WhatsApp ou tamb√©m por Instagram, site, email?",
      "why_important": "Multi-canal exige orquestrador central (Make) com m√∫ltiplos webhooks. WhatsApp isolado permite arquitetura simples com API Meta direta. Impacta custos e complexidade em 50%."
    },
    {
      "category": "Ferramentas de Automa√ß√£o",
      "question": "Voc√™ j√° usa Make, Zapier, N8N ou precisa come√ßar do zero com automa√ß√µes?",
      "why_important": "Se j√° tem Make configurado, reutilizamos cen√°rios existentes (setup r√°pido). Se n√£o tem nada, precisa criar conta, aprender interface, configurar webhooks do zero. Afeta tempo de implementa√ß√£o."
    },
    {
      "category": "Integra√ß√µes Obrigat√≥rias",
      "question": "Precisa integrar com Google Calendar, Outlook, Calendly ou outro sistema de agendamento?",
      "why_important": "Cada um tem API diferente: Google exige OAuth complexo, Calendly tem webhook nativo simples, Cal.com √© open-source customiz√°vel. Muda toda a camada de agendamento."
    },
    {
      "category": "Formato e Armazenamento de Dados",
      "question": "Quando lead te procura, onde voc√™ armazena as informa√ß√µes? CRM, planilha, papel, ou n√£o armazena?",
      "why_important": "Se j√° tem armazenamento estruturado, integramos direto. Se √© manual/papel, precisa criar banco de dados primeiro. Define se solu√ß√£o √© 100% nova ou integra√ß√£o com existente."
    }
  ]
}

üéØ REGRAS FINAIS:
- Cada pergunta deve SER ESPEC√çFICA ao contexto da ideia
- Se ideia menciona ferramenta X, pergunte sobre alternativas/complementos
- Se menciona problema Y, pergunte sobre STACK T√âCNICO atual, N√ÉO sobre o problema em si
- Foque em decis√µes que MUDAM c√≥digo, APIs, custos, ferramentas
- why_important: m√≠nimo 30 palavras, m√°ximo 60 palavras, SEMPRE explicando impacto t√©cnico

Gere 5 perguntas seguindo EXATAMENTE esse padr√£o.`;

    const userPrompt = `Ideia: "${idea}"

Gere perguntas inteligentes para eu entender PERFEITAMENTE o que essa pessoa quer.`;

    const response = await fetch(lovableAIUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableAIKey}`,
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.8,
        max_tokens: 2000,
        response_format: { type: "json_object" },
      }),
      signal: AbortSignal.timeout(30000),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes atingido. Tente novamente em alguns instantes." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos ao seu workspace." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Resposta vazia da IA");
    }

    const questions = JSON.parse(content);

    console.log(`[ANALYZE] ‚úÖ ${questions.questions?.length || 0} perguntas geradas`);

    return new Response(
      JSON.stringify(questions),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    // Log detalhado apenas no servidor
    console.error("[ANALYZE] ‚ùå Erro interno:", {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // Mensagem gen√©rica e segura para o cliente
    return new Response(
      JSON.stringify({ 
        error: "Erro ao analisar sua ideia. Por favor, tente novamente.",
        code: "ANALYSIS_FAILED",
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
