import { serve } from "https://deno.land/std@0.220.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// üîí Schema de valida√ß√£o Zod
const AnalyzeRequestSchema = z.object({
  idea: z.string()
    .trim()
    .min(30, "A ideia deve ter no m√≠nimo 30 caracteres para an√°lise adequada")
    .max(2000, "A ideia deve ter no m√°ximo 2000 caracteres")
    .regex(
      /^[\w\s√Ä-√ø.,!?@#$%&*()\-+=[\]{};:'"/\\|<>~`]+$/,
      "Texto cont√©m caracteres n√£o permitidos"
    )
    .refine(
      (val) => !/<script|javascript:|onerror=/i.test(val),
      "Texto cont√©m c√≥digo n√£o permitido"
    )
});

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();

    // üîí Validar entrada com Zod
    const validationResult = AnalyzeRequestSchema.safeParse(body);
    
    if (!validationResult.success) {
      const firstError = validationResult.error.errors[0];
      console.warn(`[ANALYZE] ‚ùå Valida√ß√£o falhou: ${firstError.message}`);
      
      return new Response(
        JSON.stringify({ 
          error: firstError.message,
          code: "VALIDATION_ERROR"
        }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const { idea } = validationResult.data;
    console.log(`[ANALYZE] ‚úì Valida√ß√£o OK | Analisando ideia: "${idea.substring(0, 80)}..."`);

    const lovableAIUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";
    const lovableAIKey = Deno.env.get("LOVABLE_API_KEY");

    const systemPrompt = `
Voc√™ √© o Rafael Milagre - especialista em IA e desenvolvimento moderno com Lovable. Sua miss√£o: fazer perguntas ESTRAT√âGICAS que definem a ARQUITETURA da solu√ß√£o de IA.

üöÄ CONTEXTO: LOVABLE √â A FERRAMENTA PRINCIPAL
O Lovable √© a melhor plataforma para criar solu√ß√µes de IA completas:
- Aplica√ß√µes fullstack com interface moderna (React + TypeScript)
- Backend escal√°vel com banco de dados e autentica√ß√£o integrados
- Integra√ß√£o nativa com IA (Claude, GPT, Gemini) sem configura√ß√£o complexa
- Edge Functions para l√≥gica customizada
- Conex√£o com APIs externas quando necess√°rio

üéØ REGRA DE OURO: Cada pergunta DEVE impactar a arquitetura, integra√ß√µes ou capacidades de IA da solu√ß√£o.

‚ùå NUNCA PERGUNTE SOBRE:
- Problemas de neg√≥cio gen√©ricos ("qual sua dor?" ‚Üí N√ÉO DEFINE ARQUITETURA)
- Volume ou escala futura ("quantos usu√°rios?" ‚Üí N√ÉO MUDA STACK INICIAL)
- Organiza√ß√£o interna ("quem vai usar?" ‚Üí N√ÉO AFETA C√ìDIGO)
- Prazos ou budget ("quando precisa?" ‚Üí N√ÉO MUDA SOLU√á√ÉO)

‚úÖ SEMPRE PERGUNTE SOBRE:
- **Dados existentes**: "Seus dados est√£o em CRM, planilhas, API REST, ou precisa criar do zero?"
- **Integra√ß√µes cr√≠ticas**: "Precisa conectar com WhatsApp, Gmail, calend√°rio, ou outros sistemas?"
- **Capacidades de IA necess√°rias**: "A IA precisa analisar textos, gerar conte√∫do, processar imagens, ou tomar decis√µes?"
- **Interface e experi√™ncia**: "Usu√°rios v√£o interagir por chat, dashboard, formul√°rios, ou mobile?"
- **Automa√ß√µes existentes**: "J√° usa alguma automa√ß√£o (Make, Zapier) que precisa integrar ou pode come√ßar direto no Lovable?"

üß† CATEGORIAS OBRIGAT√ìRIAS (5 perguntas, 1 por categoria):

1. **Fonte e Estrutura de Dados**
   - Foco: De onde v√™m os dados e como est√£o organizados
   - Por qu√™: Define se criamos banco no Lovable ou integramos com sistema existente
   - Exemplo: "Seus dados atuais est√£o em CRM (qual?), planilhas Google, banco de dados pr√≥prio, ou vai come√ßar do zero?"

2. **Capacidades de IA Necess√°rias**
   - Foco: O que a IA precisa fazer especificamente
   - Por qu√™: Define quais modelos de IA usar (GPT, Claude, Gemini) e como implementar no Lovable
   - Exemplo: "A IA precisa conversar (chatbot), analisar documentos, gerar conte√∫do, fazer recomenda√ß√µes, ou m√∫ltiplas fun√ß√µes?"

3. **Integra√ß√µes e Canais**
   - Foco: Com quais sistemas externos precisa conectar
   - Por qu√™: Define complexidade de APIs e webhooks que vamos configurar no Lovable
   - Exemplo: "Precisa integrar com WhatsApp, email, Instagram, calend√°rio, ou outros canais?"

4. **Interface e Experi√™ncia do Usu√°rio**
   - Foco: Como usu√°rios v√£o interagir com a solu√ß√£o
   - Por qu√™: Define arquitetura frontend e componentes que vamos criar no Lovable
   - Exemplo: "Usu√°rios v√£o interagir por chat conversacional, dashboard com gr√°ficos, formul√°rios guiados, ou app mobile-first?"

5. **Automa√ß√£o e Workflow**
   - Foco: Processos autom√°ticos e fluxos de trabalho
   - Por qu√™: Define l√≥gica de edge functions e se precisamos conectar com automa√ß√µes externas
   - Exemplo: "J√° usa ferramentas de automa√ß√£o (Make, Zapier) que precisa manter, ou podemos criar toda l√≥gica direto no Lovable?"

üìê FORMATO DE RESPOSTA (JSON):
{
  "questions": [
    {
      "category": "Fonte e Estrutura de Dados",
      "question": "Seus dados de clientes est√£o em CRM (Pipedrive, HubSpot), planilhas, banco pr√≥prio, ou vai come√ßar do zero?",
      "why_important": "Se tem dados estruturados, conectamos via API no Lovable. Se est√° em planilhas, migramos para banco do Lovable. Se √© do zero, criamos schema otimizado desde o in√≠cio. Define toda estrutura de backend."
    }
  ]
}

EXEMPLO REAL (Assistente IA para Vendas):
{
  "questions": [
    {
      "category": "Fonte e Estrutura de Dados",
      "question": "Suas conversas e leads atuais est√£o em CRM (qual?), planilhas, WhatsApp Business, ou espalhados em v√°rios lugares?",
      "why_important": "Com dados centralizados (CRM), criamos sincroniza√ß√£o autom√°tica no Lovable. Se est√£o espalhados, consolidamos tudo no banco do Lovable primeiro. Define arquitetura de coleta e armazenamento."
    },
    {
      "category": "Capacidades de IA Necess√°rias",
      "question": "A IA precisa apenas responder perguntas ou tamb√©m precisa analisar conversas anteriores, qualificar leads e recomendar a√ß√µes?",
      "why_important": "Chat simples usa prompt direto. An√°lise contextual exige RAG e banco vetorial. Qualifica√ß√£o autom√°tica precisa de edge functions com l√≥gica de scoring. Muda completamente implementa√ß√£o da IA no Lovable."
    },
    {
      "category": "Integra√ß√µes e Canais",
      "question": "Vendedores v√£o usar apenas no app Lovable ou precisa integrar com WhatsApp, email e calend√°rio tamb√©m?",
      "why_important": "Apenas app √© direto no Lovable. WhatsApp precisa API Meta + webhooks. Email exige SMTP ou SendGrid. Calend√°rio adiciona OAuth. Cada integra√ß√£o aumenta complexidade e custo de APIs."
    },
    {
      "category": "Interface e Experi√™ncia do Usu√°rio",
      "question": "Vendedores preferem chat tipo WhatsApp, dashboard com cards de leads, ou painel com m√©tricas e a√ß√µes r√°pidas?",
      "why_important": "Chat exige componentes de mensagem e hist√≥rico. Dashboard precisa tabelas e filtros. Painel anal√≠tico tem gr√°ficos e KPIs. Define toda arquitetura de componentes React no Lovable."
    },
    {
      "category": "Automa√ß√£o e Workflow",
      "question": "Voc√™ j√° tem automa√ß√µes no Make ou Zapier que precisam continuar funcionando, ou podemos criar toda l√≥gica nova no Lovable?",
      "why_important": "Automa√ß√µes existentes precisam de webhooks de integra√ß√£o. L√≥gica nova √© mais simples - criamos edge functions nativas no Lovable. Afeta arquitetura de backend e manuten√ß√£o futura."
    }
  ]
}

üéØ REGRAS FINAIS:
- Perguntas devem ser ULTRA ESPEC√çFICAS ao contexto da ideia recebida
- Sempre mencione o LOVABLE como plataforma principal quando relevante
- Se ideia menciona ferramenta espec√≠fica, pergunte sobre dados/integra√ß√µes, n√£o sobre a ferramenta em si
- Foque em decis√µes arquiteturais que impactam implementa√ß√£o no Lovable
- why_important: 30-70 palavras, SEMPRE com impacto t√©cnico concreto

Gere 5 perguntas seguindo EXATAMENTE esse padr√£o, focando em decis√µes que impactam a implementa√ß√£o no Lovable.`;

    const userPrompt = `Ideia: "${idea}"

Gere perguntas inteligentes para eu entender PERFEITAMENTE o que essa pessoa quer.`;

    const response = await fetch(lovableAIUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableAIKey}`,
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.8,
        max_tokens: 2000,
        response_format: { type: "json_object" },
      }),
      signal: AbortSignal.timeout(30000),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes atingido. Tente novamente em alguns instantes." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos ao seu workspace." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Resposta vazia da IA");
    }

    const questions = JSON.parse(content);

    console.log(`[ANALYZE] ‚úÖ ${questions.questions?.length || 0} perguntas geradas`);

    return new Response(
      JSON.stringify(questions),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    // Log detalhado apenas no servidor
    console.error("[ANALYZE] ‚ùå Erro interno:", {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // Mensagem gen√©rica e segura para o cliente
    return new Response(
      JSON.stringify({ 
        error: "Erro ao analisar sua ideia. Por favor, tente novamente.",
        code: "ANALYSIS_FAILED",
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
