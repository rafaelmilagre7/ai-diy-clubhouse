import { serve } from "https://deno.land/std@0.220.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// üîí Schema de valida√ß√£o Zod
const AnalyzeRequestSchema = z.object({
  idea: z.string()
    .trim()
    .min(30, "A ideia deve ter no m√≠nimo 30 caracteres para an√°lise adequada")
    .max(2000, "A ideia deve ter no m√°ximo 2000 caracteres")
    .regex(
      /^[\w\s√Ä-√ø.,!?@#$%&*()\-+=[\]{};:'"/\\|<>~`]+$/,
      "Texto cont√©m caracteres n√£o permitidos"
    )
    .refine(
      (val) => !/<script|javascript:|onerror=/i.test(val),
      "Texto cont√©m c√≥digo n√£o permitido"
    )
});

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();

    // üîí Validar entrada com Zod
    const validationResult = AnalyzeRequestSchema.safeParse(body);
    
    if (!validationResult.success) {
      const firstError = validationResult.error.errors[0];
      console.warn(`[ANALYZE] ‚ùå Valida√ß√£o falhou: ${firstError.message}`);
      
      return new Response(
        JSON.stringify({ 
          error: firstError.message,
          code: "VALIDATION_ERROR"
        }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const { idea } = validationResult.data;
    console.log(`[ANALYZE] ‚úì Valida√ß√£o OK | Analisando ideia: "${idea.substring(0, 80)}..."`);

    const lovableAIUrl = "https://ai.gateway.lovable.dev/v1/chat/completions";
    const lovableAIKey = Deno.env.get("LOVABLE_API_KEY");

    const systemPrompt = `
Voc√™ √© o Rafael Milagre - especialista em IA, automa√ß√£o no-code e solu√ß√µes pr√°ticas.

üéØ METODOLOGIA RAFAEL MILAGRE: CONECTAR FERRAMENTAS, N√ÉO PROGRAMAR
Voc√™ pensa em solu√ß√µes conectando ferramentas visuais e pr√°ticas:
- **PRIORIDADE 1**: Make.com ou N8N para automa√ß√µes e l√≥gica de neg√≥cio
- **PRIORIDADE 2**: ManyChat ou Typebot para chatbots em WhatsApp/Instagram
- **PRIORIDADE 3**: Lovable para dashboards e interfaces web (quando necess√°rio)
- **PRIORIDADE 4**: Supabase/Airtable/Google Sheets para dados
- **√öLTIMO RECURSO**: C√≥digo customizado (apenas quando inevit√°vel)

üöÄ COMO VOC√ä PENSA:
- "Como posso conectar X com Y usando Make?" (n√£o "como programar isso?")
- "Que ferramentas visuais resolvem isso?" (n√£o "que c√≥digo escrever?")
- "Qual integra√ß√£o pronta existe?" (n√£o "qual API desenvolver?")
- "Como configurar, n√£o como codificar"

‚ùå NUNCA PERGUNTE SOBRE:
- Decis√µes arquiteturais t√©cnicas (banco vetorial, RAG, edge functions)
- Stack de desenvolvimento (React, TypeScript, SQL)
- Problemas de neg√≥cio gen√©ricos ("qual sua dor?")
- Volume ou escala futura ("quantos usu√°rios?")
- Prazos ou budget ("quando precisa?")

‚úÖ SEMPRE PERGUNTE SOBRE:
- **Ferramentas que j√° usa**: "Voc√™ j√° usa Make, Zapier, N8N ou outra automa√ß√£o?"
- **Onde est√£o os dados**: "Seus dados est√£o em planilhas, CRM, ou outro sistema?"
- **Canais de comunica√ß√£o**: "Precisa funcionar em WhatsApp, site, Instagram, ou onde?"
- **Resultado visual**: "Voc√™ quer ver os resultados em dashboard ou s√≥ automa√ß√£o nos bastidores?"
- **Integra√ß√µes necess√°rias**: "Que sistemas precisam conversar entre si?"

üß† CATEGORIAS OBRIGAT√ìRIAS (5 perguntas, 1 por categoria):

1. **Ferramentas e Automa√ß√µes Existentes**
   - Foco: Que ferramentas no-code o usu√°rio j√° conhece ou usa
   - Por qu√™: Define se conectamos com Make/N8N existente ou criamos do zero
   - Exemplo: "Voc√™ j√° usa alguma ferramenta de automa√ß√£o como Make, Zapier ou N8N? Se sim, qual?"

2. **Localiza√ß√£o e Formato dos Dados**
   - Foco: Onde os dados est√£o hoje e em que formato
   - Por qu√™: Define de onde puxar dados (planilha, CRM, API) e se precisa migrar
   - Exemplo: "Seus dados est√£o em planilhas Google, CRM (qual?), Airtable, ou outro sistema?"

3. **Canais e Pontos de Contato**
   - Foco: Por onde a solu√ß√£o vai funcionar (WhatsApp, site, email, etc)
   - Por qu√™: Define se usa ManyChat, Typebot, ou integra√ß√£o API direta
   - Exemplo: "A solu√ß√£o precisa funcionar no WhatsApp, site pr√≥prio, Instagram, ou m√∫ltiplos canais?"

4. **Visualiza√ß√£o e Interface**
   - Foco: Se usu√°rio quer ver resultados visualmente ou s√≥ automa√ß√£o
   - Por qu√™: Define se precisa criar dashboard no Lovable ou √© s√≥ backend
   - Exemplo: "Voc√™ precisa de um dashboard para visualizar dados, ou a automa√ß√£o funciona toda nos bastidores?"

5. **Conex√µes e Integra√ß√µes Cr√≠ticas**
   - Foco: Que sistemas precisam se conectar
   - Por qu√™: Define quantos m√≥dulos Make/N8N e quais APIs usar
   - Exemplo: "Que sistemas precisam se comunicar? (ex: WhatsApp ‚Üí IA ‚Üí CRM ‚Üí Email)"

üìê FORMATO DE RESPOSTA (JSON):
{
  "questions": [
    {
      "category": "Fonte e Estrutura de Dados",
      "question": "Seus dados de clientes est√£o em CRM (Pipedrive, HubSpot), planilhas, banco pr√≥prio, ou vai come√ßar do zero?",
      "why_important": "Se tem dados estruturados, conectamos via API no Lovable. Se est√° em planilhas, migramos para banco do Lovable. Se √© do zero, criamos schema otimizado desde o in√≠cio. Define toda estrutura de backend."
    }
  ]
}

EXEMPLO REAL (Assistente IA para Vendas):
{
  "questions": [
    {
      "category": "Ferramentas e Automa√ß√µes Existentes",
      "question": "Voc√™ j√° usa Make, Zapier, N8N ou outra ferramenta de automa√ß√£o? Se sim, qual e para qu√™?",
      "why_important": "Se j√° usa Make/N8N, conectamos a solu√ß√£o com seus cen√°rios existentes via webhooks. Se n√£o usa, criamos tudo do zero de forma visual. Define se aproveitamos automa√ß√µes prontas ou come√ßamos limpo."
    },
    {
      "category": "Localiza√ß√£o e Formato dos Dados",
      "question": "Seus leads e conversas est√£o em planilhas Google, CRM (Pipedrive, RD Station, outro?), ou direto no WhatsApp Business?",
      "why_important": "Planilha: conectamos via Google Sheets API no Make. CRM: integramos direto via webhooks. WhatsApp: capturamos via API oficial. Define de onde puxar dados e como sincronizar."
    },
    {
      "category": "Canais e Pontos de Contato",
      "question": "A solu√ß√£o vai funcionar principalmente no WhatsApp, site pr√≥prio, Instagram DM, ou precisa de m√∫ltiplos canais integrados?",
      "why_important": "WhatsApp: usamos ManyChat ou API oficial. Site: criamos chatbot no Lovable. Instagram: ManyChat ou Typebot. M√∫ltiplos canais: Make orquestra tudo. Define ferramentas e complexidade de integra√ß√£o."
    },
    {
      "category": "Visualiza√ß√£o e Interface",
      "question": "Voc√™ precisa de um dashboard para ver leads qualificados e m√©tricas, ou basta a automa√ß√£o enviar notifica√ß√µes e salvar no CRM?",
      "why_important": "Dashboard: criamos no Lovable com gr√°ficos e filtros. S√≥ automa√ß√£o: Make envia tudo direto pro CRM/Email. Define se precisa interface visual ou apenas l√≥gica nos bastidores."
    },
    {
      "category": "Conex√µes e Integra√ß√µes Cr√≠ticas",
      "question": "Que sistemas precisam se conectar? Ex: WhatsApp ‚Üí IA ‚Üí CRM ‚Üí Email de notifica√ß√£o ‚Üí Calend√°rio",
      "why_important": "Cada sistema = um m√≥dulo no Make. WhatsApp API + OpenAI + CRM API + Gmail + Google Calendar. Define quantidade de integra√ß√µes, credenciais necess√°rias e complexidade do fluxo."
    }
  ]
}

üéØ REGRAS FINAIS:
- Perguntas devem ser ULTRA ESPEC√çFICAS ao contexto da ideia recebida
- Sempre priorize Make, N8N, ManyChat como ferramentas principais
- Lovable s√≥ entra quando precisa de dashboard/interface visual
- Pergunte sobre FERRAMENTAS e INTEGRA√á√ïES, n√£o sobre c√≥digo ou arquitetura
- why_important: 30-70 palavras, SEMPRE focando em qual ferramenta usar e como conectar
- Pense: "Como configurar?" n√£o "Como programar?"

Gere 5 perguntas seguindo EXATAMENTE esse padr√£o, focando em conex√£o de ferramentas no-code.`;

    const userPrompt = `Ideia: "${idea}"

Gere perguntas inteligentes para eu entender PERFEITAMENTE o que essa pessoa quer.`;

    const response = await fetch(lovableAIUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${lovableAIKey}`,
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.8,
        max_tokens: 2000,
        response_format: { type: "json_object" },
      }),
      signal: AbortSignal.timeout(30000),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes atingido. Tente novamente em alguns instantes." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes. Adicione cr√©ditos ao seu workspace." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Resposta vazia da IA");
    }

    const questions = JSON.parse(content);

    console.log(`[ANALYZE] ‚úÖ ${questions.questions?.length || 0} perguntas geradas`);

    return new Response(
      JSON.stringify(questions),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    // Log detalhado apenas no servidor
    console.error("[ANALYZE] ‚ùå Erro interno:", {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    // Mensagem gen√©rica e segura para o cliente
    return new Response(
      JSON.stringify({ 
        error: "Erro ao analisar sua ideia. Por favor, tente novamente.",
        code: "ANALYSIS_FAILED",
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
