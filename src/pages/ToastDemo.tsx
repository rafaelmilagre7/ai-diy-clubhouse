import { useToastModern } from '@/hooks/useToastModern';
import { 
  showModernSuccess, 
  showModernError, 
  showModernWarning, 
  showModernInfo,
  showModernLoading,
  showModernSuccessWithAction,
  showModernErrorWithRetry,
  dismissModernToast,
  toastPatternCreate,
  toastPatternUpdate,
  toastPatternDelete,
} from '@/lib/toast-helpers';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

type Variant = 'default' | 'success' | 'error' | 'warning' | 'info' | 'loading';
type Position =
  | 'top-left'
  | 'top-center'
  | 'top-right'
  | 'bottom-left'
  | 'bottom-center'
  | 'bottom-right';

export default function ToastDemo() {
  const toast = useToastModern();

  const showBasicToast = (variant: Variant) => {
    const messages = {
      default: { title: 'Notifica√ß√£o Padr√£o', message: 'Esta √© uma notifica√ß√£o padr√£o do sistema.' },
      success: { title: 'Opera√ß√£o Bem-Sucedida', message: 'Sua a√ß√£o foi completada com sucesso!' },
      error: { title: 'Erro Detectado', message: 'N√£o foi poss√≠vel completar a opera√ß√£o.' },
      warning: { title: 'Aten√ß√£o Necess√°ria', message: 'Verifique os campos obrigat√≥rios antes de continuar.' },
      info: { title: 'Informa√ß√£o', message: 'Use atalhos de teclado para navegar mais r√°pido.' },
      loading: { title: 'Processando', message: 'Aguarde enquanto processamos sua solicita√ß√£o...' },
    };

    const { title, message } = messages[variant];

    switch (variant) {
      case 'success':
        toast.showSuccess(title, message);
        break;
      case 'error':
        toast.showError(title, message);
        break;
      case 'warning':
        toast.showWarning(title, message);
        break;
      case 'info':
        toast.showInfo(title, message);
        break;
      case 'loading':
        const loadingId = toast.showLoading(title, message);
        // Auto dismiss ap√≥s 3s para demo
        setTimeout(() => toast.dismissToast(loadingId), 3000);
        break;
      default:
        toast.showToast({ title, message, variant: 'default' });
    }
  };

  const showPositionedToast = (position: Position) => {
    toast.showSuccess(
      'Posi√ß√£o Customizada',
      `Toast exibido na posi√ß√£o: ${position}`,
      { position, duration: 3000 }
    );
  };

  const simulateEventCreation = async () => {
    const loadingId = toast.showLoading(
      'Criando evento...',
      'Configurando mentoria na plataforma'
    );

    // Simular opera√ß√£o ass√≠ncrona
    await new Promise((resolve) => setTimeout(resolve, 2000));

    toast.dismissToast(loadingId);

    toast.showSuccessWithAction(
      'Evento criado!',
      'Mentoria agendada para 15 de Janeiro, 2025 √†s 14h',
      {
        label: 'Ver Evento',
        onClick: () => {
          console.log('Navegando para evento...');
          toast.showInfo('Navega√ß√£o', 'Redirecionando para p√°gina do evento...');
        },
      }
    );
  };

  const simulateErrorWithRetry = () => {
    toast.showErrorWithRetry(
      'Falha na Conex√£o',
      'N√£o foi poss√≠vel conectar ao servidor. Verifique sua conex√£o.',
      () => {
        console.log('Tentando novamente...');
        toast.showInfo('Reconectando', 'Tentando estabelecer conex√£o novamente...');
      }
    );
  };

  const demonstrateCRUDPattern = async () => {
    // CREATE
    const createId = toastPatternCreate.loading('evento');
    await new Promise((resolve) => setTimeout(resolve, 1500));
    toast.dismissToast(createId);
    
    toastPatternCreate.success('Evento', {
      label: 'Ver',
      onClick: () => console.log('Ver evento'),
    });

    await new Promise((resolve) => setTimeout(resolve, 2000));

    // UPDATE
    const updateId = toastPatternUpdate.loading('evento');
    await new Promise((resolve) => setTimeout(resolve, 1500));
    toast.dismissToast(updateId);
    toastPatternUpdate.success('Evento');

    await new Promise((resolve) => setTimeout(resolve, 2000));

    // DELETE
    const deleteId = toastPatternDelete.loading('evento');
    await new Promise((resolve) => setTimeout(resolve, 1500));
    toast.dismissToast(deleteId);
    toastPatternDelete.success('Evento', () => {
      console.log('Desfazer exclus√£o');
      toast.showInfo('Desfeito', 'Evento restaurado com sucesso');
    });
  };

  const demonstrateHelperFunctions = () => {
    showModernSuccess('Helper Function', 'Usando fun√ß√£o helper direta');
    
    setTimeout(() => {
      showModernWarning('M√∫ltiplos Toasts', 'Sistema suporta at√© 3 toasts simult√¢neos');
    }, 500);

    setTimeout(() => {
      showModernInfo('Queue System', 'Toasts s√£o organizados em fila automaticamente');
    }, 1000);
  };

  return (
    <div className="container mx-auto p-6 space-y-8 max-w-6xl">
      <div className="space-y-2">
        <h1 className="text-4xl font-bold tracking-tight">Sistema de Toast Moderno</h1>
        <p className="text-muted-foreground text-lg">
          Feedback visual aprimorado com anima√ß√µes, a√ß√µes inline e posicionamento estrat√©gico
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Variantes B√°sicas */}
        <Card>
          <CardHeader>
            <CardTitle>Variantes de Toast</CardTitle>
            <CardDescription>
              Diferentes tipos para cada contexto de feedback
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            {['success', 'error', 'warning', 'info', 'loading'].map((variant) => (
              <Button
                key={variant}
                variant="outline"
                className="w-full"
                onClick={() => showBasicToast(variant as Variant)}
              >
                Toast de {variant.charAt(0).toUpperCase() + variant.slice(1)}
              </Button>
            ))}
          </CardContent>
        </Card>

        {/* Posicionamento */}
        <Card>
          <CardHeader>
            <CardTitle>Posicionamento Estrat√©gico</CardTitle>
            <CardDescription>
              6 posi√ß√µes diferentes para contextos espec√≠ficos
            </CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-2">
            {[
              'top-left',
              'top-center',
              'top-right',
              'bottom-left',
              'bottom-center',
              'bottom-right',
            ].map((position) => (
              <Button
                key={position}
                variant="outline"
                size="sm"
                onClick={() => showPositionedToast(position as Position)}
                className="text-xs"
              >
                {position.replace('-', ' ').replace(/\b\w/g, (c) => c.toUpperCase())}
              </Button>
            ))}
          </CardContent>
        </Card>

        {/* Exemplos do Mundo Real */}
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Exemplos de Uso Real</CardTitle>
            <CardDescription>
              Padr√µes recomendados para opera√ß√µes comuns na plataforma
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-3 sm:grid-cols-2">
            <Button
              variant="default"
              onClick={simulateEventCreation}
              className="w-full"
            >
              üìÖ Criar Evento (com A√ß√£o)
            </Button>
            
            <Button
              variant="destructive"
              onClick={simulateErrorWithRetry}
              className="w-full"
            >
              ‚ö†Ô∏è Erro com Retry
            </Button>

            <Button
              variant="secondary"
              onClick={demonstrateCRUDPattern}
              className="w-full"
            >
              üîÑ Padr√£o CRUD Completo
            </Button>

            <Button
              variant="outline"
              onClick={demonstrateHelperFunctions}
              className="w-full"
            >
              üéØ Fun√ß√µes Helper Diretas
            </Button>
          </CardContent>
        </Card>

        {/* Documenta√ß√£o de Uso */}
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Como Usar no C√≥digo</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-semibold mb-2 text-sm">1. Usando Hook (dentro de componentes):</h4>
              <pre className="bg-muted p-3 rounded-lg text-xs overflow-x-auto">
{`const toast = useToastModern();

toast.showSuccess("Salvo!", "Altera√ß√µes aplicadas");
toast.showErrorWithRetry("Erro", "Falha", () => retry());`}
              </pre>
            </div>

            <div>
              <h4 className="font-semibold mb-2 text-sm">2. Usando Helpers (em qualquer lugar):</h4>
              <pre className="bg-muted p-3 rounded-lg text-xs overflow-x-auto">
{`import { showModernSuccess, showModernLoading } from '@/lib/toast-helpers';

const id = showModernLoading("Salvando...", "Aguarde");
// ... opera√ß√£o ...
dismissModernToast(id);
showModernSuccess("Pronto!", "Salvo com sucesso");`}
              </pre>
            </div>

            <div>
              <h4 className="font-semibold mb-2 text-sm">3. Usando Padr√µes CRUD:</h4>
              <pre className="bg-muted p-3 rounded-lg text-xs overflow-x-auto">
{`import { toastPatternCreate } from '@/lib/toast-helpers';

const id = toastPatternCreate.loading("evento");
try {
  await createEvent();
  dismissModernToast(id);
  toastPatternCreate.success("Evento", { 
    label: "Ver", 
    onClick: () => navigate('/evento') 
  });
} catch (error) {
  dismissModernToast(id);
  toastPatternCreate.error("evento", () => retry());
}`}
              </pre>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recursos do Sistema */}
      <Card>
        <CardHeader>
          <CardTitle>‚ú® Recursos Implementados</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="grid gap-2 sm:grid-cols-2 text-sm">
            <li>‚úÖ 6 variantes de toast (success, error, warning, info, loading, default)</li>
            <li>‚úÖ 6 posi√ß√µes estrat√©gicas</li>
            <li>‚úÖ Anima√ß√µes suaves com Framer Motion</li>
            <li>‚úÖ Bot√µes de a√ß√£o inline</li>
            <li>‚úÖ Loading states infinitos</li>
            <li>‚úÖ Queue system (m√°x 3 simult√¢neos)</li>
            <li>‚úÖ Helpers para uso direto</li>
            <li>‚úÖ Padr√µes CRUD pr√©-definidos</li>
            <li>‚úÖ Compatibilidade com sistema legado</li>
            <li>‚úÖ Design system integrado</li>
            <li>‚úÖ Auto-dismiss configur√°vel</li>
            <li>‚úÖ √çcones customiz√°veis</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
