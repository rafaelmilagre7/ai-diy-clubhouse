
/**
 * DEPRECIADO: Criptografia Falsa - Apenas Ofusca√ß√£o
 * 
 * ‚ùå VULNERABILIDADE CR√çTICA DE SEGURAN√áA ‚ùå
 * 
 * Este arquivo implementava apenas base64 encoding disfar√ßado de criptografia.
 * 
 * üö® DADOS FACILMENTE EXPOSTOS: 
 *    atob('dados_criptografados') = dados em texto claro!
 * 
 * ‚úÖ SUBSTITU√çDO POR: secureTokenStorage.ts com AES-256-GCM REAL
 * 
 * @deprecated NUNCA use este arquivo - √© uma vulnerabilidade de seguran√ßa
 * @security IMPLEMENTA√á√ÉO INSEGURA - apenas ofusca√ß√£o base64
 * @migration Use useSecureTokenStorage ou secureTokenStorage
 */

import { logger } from './logger';

export class AdvancedEncryption {
  private static instance: AdvancedEncryption;
  
  private constructor() {}
  
  static getInstance(): AdvancedEncryption {
    if (!AdvancedEncryption.instance) {
      AdvancedEncryption.instance = new AdvancedEncryption();
    }
    return AdvancedEncryption.instance;
  }
  
  async encryptSensitiveData(data: any, userId: string, context: string = 'storage'): Promise<string> {
    logger.error('üö® VULNERABILIDADE CR√çTICA: AdvancedEncryption detectado', {
      component: 'DEPRECATED_FAKE_ENCRYPTION',
      message: '‚ùå Esta classe faz apenas ofusca√ß√£o base64, N√ÉO √â CRIPTOGRAFIA REAL',
      security: 'DADOS FACILMENTE EXPOSTOS - qualquer atacante pode decodificar',
      solution: 'Use secureTokenStorage.ts com AES-256-GCM REAL',
      migration: 'useSecureTokenStorage hook dispon√≠vel para migra√ß√£o autom√°tica'
    });
    
    console.error(`
üö® VULNERABILIDADE DE SEGURAN√áA DETECTADA üö®

Tentativa de uso do AdvancedEncryption (criptografia FALSA):
‚ùå Apenas base64 encoding - dados facilmente expostos
‚ùå Qualquer atacante pode fazer: atob(dados) e ver tudo
‚ùå N√£o oferece prote√ß√£o real contra vazamentos

‚úÖ SOLU√á√ÉO IMEDIATA:
  import { useSecureTokenStorage } from '@/hooks/useSecureTokenStorage';
  // ou
  import { secureTokenStorage } from '@/utils/secureTokenStorage';

üîí Migra√ß√£o autom√°tica dispon√≠vel para dados existentes.
    `);
    
    throw new Error(
      'üö® AdvancedEncryption √© uma VULNERABILIDADE DE SEGURAN√áA. Use secureTokenStorage com AES-256-GCM real.'
    );
  }
  
  async decryptSensitiveData(encryptedData: string, userId: string, context: string = 'storage'): Promise<any> {
    logger.error('üö® TENTATIVA de decodifica√ß√£o insegura detectada', {
      component: 'DEPRECATED_FAKE_ENCRYPTION',
      message: '‚ùå Esta classe faz apenas decodifica√ß√£o base64, N√ÉO √â DESCRIPTOGRAFIA',
      security: 'DADOS EXPOSTOS - sem prote√ß√£o criptogr√°fica real',
      action: 'Bloqueando acesso para prevenir vulnerabilidades'
    });
    
    console.error(`
üö® BLOQUEIO DE SEGURAN√áA üö®

Tentativa de descriptografia com m√©todo INSEGURO detectada.
‚ùå Base64 n√£o √© criptografia - dados est√£o expostos
‚úÖ Use secureTokenStorage para AES-256-GCM real

Migra√ß√£o autom√°tica dispon√≠vel.
    `);
    
    throw new Error(
      'üö® M√©todo inseguro bloqueado. Use secureTokenStorage com AES-256-GCM real.'
    );
  }
  
  // Manter apenas m√©todos que n√£o envolvem "criptografia" falsa
  generateSecureToken(length: number = 32): string {
    try {
      if (crypto.getRandomValues) {
        const array = new Uint8Array(length);
        crypto.getRandomValues(array);
        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
      } else {
        return Array.from({ length }, () => 
          Math.floor(Math.random() * 16).toString(16)
        ).join('');
      }
    } catch {
      return Math.random().toString(36).substring(2, 15) + 
             Math.random().toString(36).substring(2, 15);
    }
  }
}

// Inst√¢ncia global (depreciada)
export const advancedEncryption = AdvancedEncryption.getInstance();
