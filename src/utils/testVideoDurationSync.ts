import { supabase } from "@/lib/supabase";
import { toast } from 'sonner';

/**
 * Fun√ß√£o global para testar sincroniza√ß√£o de dura√ß√µes via console
 */
export const testVideoDurationSync = async () => {
  try {
    console.log('üéØ [SYNC] Iniciando sincroniza√ß√£o de dura√ß√µes...');
    toast.info('Iniciando sincroniza√ß√£o das dura√ß√µes dos v√≠deos...');
    
    const { data, error } = await supabase.functions.invoke('update-video-durations', {
      body: {}
    });
    
    if (error) {
      console.error('‚ùå [SYNC] Erro na edge function:', error);
      toast.error(`Erro na sincroniza√ß√£o: ${error.message}`);
      return false;
    }
    
    console.log('üìä [SYNC] Resultado da sincroniza√ß√£o:', data);
    
    if (data.totalProcessed === 0) {
      console.log('‚ÑπÔ∏è [SYNC] Nenhum v√≠deo encontrado para processamento');
      toast.info('Nenhum v√≠deo encontrado para sincroniza√ß√£o');
      return false;
    }
    
    if (data.success > 0) {
      console.log(`‚úÖ [SYNC] ${data.success} v√≠deo(s) sincronizados com sucesso!`);
      toast.success(`${data.success} v√≠deos sincronizados com sucesso!`);
      
      if (data.failed > 0) {
        console.warn(`‚ö†Ô∏è [SYNC] ${data.failed} v√≠deo(s) falharam na sincroniza√ß√£o`);
        toast.warning(`${data.failed} v√≠deos falharam na sincroniza√ß√£o`);
      }
      
      // Aguardar um pouco antes de verificar os resultados
      setTimeout(async () => {
        await checkSyncResults();
      }, 2000);
      
      return true;
    }
    
    return false;
    
  } catch (error: any) {
    console.error("üí• [SYNC] Erro cr√≠tico:", error);
    toast.error(`Erro cr√≠tico: ${error.message}`);
    return false;
  }
};

/**
 * Verifica os resultados da sincroniza√ß√£o
 */
const checkSyncResults = async () => {
  try {
    console.log('üîç [CHECK] Verificando resultados da sincroniza√ß√£o...');
    
    const { data, error } = await supabase
      .from('learning_lesson_videos')
      .select(`
        id,
        title,
        duration_seconds,
        lesson:learning_lessons(
          title,
          module:learning_modules(
            course:learning_courses(title)
          )
        )
      `)
      .not('duration_seconds', 'is', null)
      .gt('duration_seconds', 0)
      .limit(10);
    
    if (error) {
      console.error('‚ùå [CHECK] Erro ao verificar resultados:', error);
      return;
    }
    
    console.log('üìà [CHECK] V√≠deos com dura√ß√µes sincronizadas:', data?.length || 0);
    
    if (data && data.length > 0) {
      console.log('‚úÖ [CHECK] Exemplos de v√≠deos sincronizados:', data.slice(0, 3));
      toast.success(`${data.length} v√≠deos t√™m dura√ß√µes sincronizadas!`);
      
      // Informar que os certificados ser√£o atualizados
      setTimeout(() => {
        toast.info('Certificados ser√£o atualizados com as novas dura√ß√µes...');
      }, 1000);
      
    } else {
      console.log('‚ö†Ô∏è [CHECK] Nenhum v√≠deo com dura√ß√£o encontrado ainda');
      toast.warning('Ainda processando dura√ß√µes. Aguarde mais alguns segundos...');
    }
    
  } catch (error) {
    console.error('üí• [CHECK] Erro ao verificar resultados:', error);
  }
};

// Disponibilizar globalmente para uso no console
(window as any).testVideoDurationSync = testVideoDurationSync;

console.log('üîß [SETUP] Fun√ß√£o testVideoDurationSync() dispon√≠vel no console');
console.log('üí° [HELP] Execute: testVideoDurationSync() para sincronizar dura√ß√µes');