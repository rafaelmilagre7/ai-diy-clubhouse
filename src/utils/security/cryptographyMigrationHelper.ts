/**
 * ASSISTENTE DE MIGRA√á√ÉO - Criptografia Falsa para AES Real
 * 
 * Detecta e migra automaticamente dados inseguros no localStorage
 */

import { secureTokenStorage } from '@/utils/secureTokenStorage';
import { logger } from '@/utils/logger';

export interface MigrationResult {
  success: boolean;
  migratedKeys: string[];
  failedKeys: string[];
  totalFound: number;
  recommendations: string[];
}

/**
 * Executa migra√ß√£o completa de todos os dados inseguros
 */
export const runCompleteCryptographyMigration = async (userId: string): Promise<MigrationResult> => {
  if (!userId) {
    throw new Error('UserId necess√°rio para migra√ß√£o');
  }

  logger.info("üîÑ Iniciando migra√ß√£o completa de criptografia", {
    component: 'CRYPTOGRAPHY_MIGRATION',
    userId: userId.substring(0, 8) + '***',
    action: 'FULL_MIGRATION_START'
  });

  const insecureKeys = secureTokenStorage.detectInsecureData();
  const migratedKeys: string[] = [];
  const failedKeys: string[] = [];
  const recommendations: string[] = [];

  // Migrar cada chave encontrada
  for (const key of insecureKeys) {
    try {
      console.log(`üîÑ Migrando chave insegura: ${key}`);
      
      const success = await secureTokenStorage.migrateFromFakeEncryption(key, userId);
      
      if (success) {
        migratedKeys.push(key);
        logger.info(`‚úÖ Chave migrada com sucesso: ${key}`, {
          component: 'CRYPTOGRAPHY_MIGRATION',
          key,
          status: 'MIGRATED'
        });
      } else {
        failedKeys.push(key);
        logger.warn(`‚ùå Falha na migra√ß√£o: ${key}`, {
          component: 'CRYPTOGRAPHY_MIGRATION',
          key,
          status: 'FAILED'
        });
      }
    } catch (error) {
      failedKeys.push(key);
      logger.error(`‚ùå Erro na migra√ß√£o: ${key}`, {
        component: 'CRYPTOGRAPHY_MIGRATION',
        key,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // Gerar recomenda√ß√µes
  if (failedKeys.length > 0) {
    recommendations.push(`Executar migra√ß√£o manual para ${failedKeys.length} chaves que falharam`);
    recommendations.push('Verificar se os dados ainda s√£o v√°lidos e necess√°rios');
  }

  if (migratedKeys.length > 0) {
    recommendations.push('Verificar funcionalidade ap√≥s migra√ß√£o');
    recommendations.push('Considerar rota√ß√£o de tokens migrados por seguran√ßa');
  }

  const result: MigrationResult = {
    success: failedKeys.length === 0,
    migratedKeys,
    failedKeys,
    totalFound: insecureKeys.length,
    recommendations
  };

  logger.info("‚úÖ Migra√ß√£o de criptografia conclu√≠da", {
    component: 'CRYPTOGRAPHY_MIGRATION',
    result,
    security: 'MIGRATION_COMPLETED'
  });

  // Log detalhado no console
  console.log(`
üîí RELAT√ìRIO DE MIGRA√á√ÉO DE CRIPTOGRAFIA üîí

üìä ESTAT√çSTICAS:
  ‚Ä¢ Total de dados inseguros encontrados: ${insecureKeys.length}
  ‚Ä¢ ‚úÖ Migrados com sucesso: ${migratedKeys.length}
  ‚Ä¢ ‚ùå Falharam na migra√ß√£o: ${failedKeys.length}

${migratedKeys.length > 0 ? `
‚úÖ CHAVES MIGRADAS PARA AES-256-GCM:
${migratedKeys.map(k => `  ‚Ä¢ ${k}`).join('\n')}
` : ''}

${failedKeys.length > 0 ? `
‚ùå CHAVES QUE FALHARAM:
${failedKeys.map(k => `  ‚Ä¢ ${k}`).join('\n')}

‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA: Executar migra√ß√£o manual ou remover dados inv√°lidos.
` : ''}

${recommendations.length > 0 ? `
üìã RECOMENDA√á√ïES:
${recommendations.map(r => `  ‚Ä¢ ${r}`).join('\n')}
` : ''}

üîê STATUS: ${result.success ? 'MIGRA√á√ÉO BEM-SUCEDIDA' : 'MIGRA√á√ÉO PARCIAL - A√á√ÉO NECESS√ÅRIA'}
  `);

  return result;
};

/**
 * For√ßa limpeza de todos os dados inseguros (sem migra√ß√£o)
 */
export const cleanupInsecureData = (): { removed: string[], kept: string[] } => {
  const insecureKeys = secureTokenStorage.detectInsecureData();
  const removed: string[] = [];
  const kept: string[] = [];

  for (const key of insecureKeys) {
    try {
      // Confirmar que √© realmente inseguro antes de remover
      const value = localStorage.getItem(key);
      if (value && value.match(/^[A-Za-z0-9+/]+=*$/) && value.includes('://') === false) {
        localStorage.removeItem(key);
        removed.push(key);
        logger.info(`üóëÔ∏è  Dados inseguros removidos: ${key}`, {
          component: 'CRYPTOGRAPHY_MIGRATION',
          action: 'CLEANUP_INSECURE_DATA'
        });
      } else {
        kept.push(key);
      }
    } catch (error) {
      kept.push(key);
      logger.warn(`N√£o foi poss√≠vel limpar: ${key}`, {
        component: 'CRYPTOGRAPHY_MIGRATION',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  console.log(`
üßπ LIMPEZA DE DADOS INSEGUROS üßπ

‚úÖ Removidos: ${removed.length} itens
‚ö†Ô∏è  Mantidos: ${kept.length} itens (verifica√ß√£o necess√°ria)

${removed.length > 0 ? `
üóëÔ∏è  ITENS REMOVIDOS:
${removed.map(k => `  ‚Ä¢ ${k}`).join('\n')}
` : ''}

${kept.length > 0 ? `
‚ö†Ô∏è  ITENS MANTIDOS (verificar manualmente):
${kept.map(k => `  ‚Ä¢ ${k}`).join('\n')}
` : ''}
  `);

  return { removed, kept };
};

/**
 * Executar auditoria completa de seguran√ßa de dados
 */
export const auditDataSecurity = (): {
  secure: string[],
  insecure: string[],
  unknown: string[],
  recommendations: string[]
} => {
  const secure: string[] = [];
  const insecure: string[] = [];
  const unknown: string[] = [];
  const recommendations: string[] = [];

  try {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (!key) continue;

      const value = localStorage.getItem(key);
      if (!value) continue;

      // Analisar formato dos dados
      if (value.startsWith('sb-')) {
        // Dados do Supabase - geralmente seguros
        secure.push(key);
      } else if (value.match(/^[A-Za-z0-9+/]+=*$/) && value.length < 1000) {
        // Poss√≠vel base64 simples (inseguro)
        insecure.push(key);
      } else if (value.length > 1000 && value.match(/^[A-Za-z0-9+/]+=*$/)) {
        // Base64 longo - pode ser AES criptografado (seguro)
        secure.push(key);
      } else {
        // Formato n√£o identificado
        unknown.push(key);
      }
    }

    // Gerar recomenda√ß√µes
    if (insecure.length > 0) {
      recommendations.push(`üö® ${insecure.length} itens com criptografia falsa detectados`);
      recommendations.push('Execute migra√ß√£o imediata para AES-256-GCM');
    }

    if (unknown.length > 0) {
      recommendations.push(`üîç ${unknown.length} itens com formato n√£o identificado`);
      recommendations.push('Revisar manualmente se cont√™m dados sens√≠veis');
    }

    if (secure.length > 0) {
      recommendations.push(`‚úÖ ${secure.length} itens parecem estar seguros`);
    }

    console.log(`
üîç AUDITORIA DE SEGURAN√áA DE DADOS üîç

üìä RESUMO:
  ‚Ä¢ ‚úÖ Seguros: ${secure.length}
  ‚Ä¢ üö® Inseguros: ${insecure.length}
  ‚Ä¢ ‚ùì Desconhecidos: ${unknown.length}

${insecure.length > 0 ? `
üö® DADOS INSEGUROS (criptografia falsa):
${insecure.map(k => `  ‚Ä¢ ${k}`).join('\n')}
` : ''}

${unknown.length > 0 ? `
‚ùì DADOS FORMATO DESCONHECIDO:
${unknown.map(k => `  ‚Ä¢ ${k}`).join('\n')}
` : ''}

üìã RECOMENDA√á√ïES:
${recommendations.map(r => `  ‚Ä¢ ${r}`).join('\n')}
    `);

  } catch (error) {
    logger.error("Erro na auditoria de seguran√ßa", {
      component: 'CRYPTOGRAPHY_MIGRATION',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }

  return { secure, insecure, unknown, recommendations };
};