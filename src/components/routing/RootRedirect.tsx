
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "@/contexts/auth";
import LoadingScreen from "@/components/common/LoadingScreen";
import { getUserRoleName } from "@/lib/supabase/types";

const RootRedirect = () => {
  const location = useLocation();
  const { user, profile, isLoading } = useAuth();
  
  console.log("üîç [ROOT-REDIRECT] Estado:", {
    path: location.pathname,
    hasUser: !!user,
    hasProfile: !!profile,
    isLoading
  });

  // Ainda carregando - mostrar loading apenas por tempo limitado
  if (isLoading) {
    return <LoadingScreen message="Verificando sess√£o" showProgress />;
  }

  // Sem usu√°rio = login
  if (!user) {
    console.log("üîÑ [ROOT-REDIRECT] Sem usu√°rio - redirecionando para login");
    return <Navigate to="/login" replace />;
  }

  // Usu√°rio logado mas ainda sem perfil - aguardar um pouco mais
  if (user && !profile) {
    console.log("‚è≥ [ROOT-REDIRECT] Aguardando perfil...");
    return <LoadingScreen message="Carregando seu perfil..." />;
  }

  // CR√çTICO: Verificar se usu√°rio precisa fazer onboarding
  // CORRE√á√ÉO: S√≥ redirecionar se onboarding_completed for explicitamente false
  if (user && profile && profile.onboarding_completed === false) {
    // NOVA VERIFICA√á√ÉO: Se acabou de completar onboarding, aguardar sincroniza√ß√£o
    const justCompletedFlag = sessionStorage.getItem('onboarding_just_completed');
    
    if (justCompletedFlag === 'true') {
      console.log("‚è≥ [ROOT-REDIRECT] Onboarding rec√©m-completado - aguardando sincroniza√ß√£o do cache");
      
      // Remover flag para evitar loop infinito
      sessionStorage.removeItem('onboarding_just_completed');
      console.log("üóëÔ∏è [ROOT-REDIRECT] Flag removida do sessionStorage");
      
      // Mostrar loading enquanto o cache sincroniza
      // Isso d√° tempo para a sincroniza√ß√£o blocante do useOnboarding completar
      return <LoadingScreen message="Finalizando configura√ß√£o..." showProgress />;
    }
    
    console.log("üìù [ROOT-REDIRECT] Usu√°rio precisa fazer onboarding - redirecionando");
    return <Navigate to="/onboarding" replace />;
  }

  // Se o onboarding_completed for null/undefined, verificar no banco antes de redirecionar
  if (user && profile && profile.onboarding_completed == null) {
    console.log("‚ö†Ô∏è [ROOT-REDIRECT] Onboarding status indefinido - permanecendo na rota atual");
    // N√£o redirecionar automaticamente, deixar o usu√°rio na rota atual
  }

  // Usu√°rio logado tentando acessar login
  if (location.pathname === '/login' && user && profile) {
    // Verificar onboarding primeiro - s√≥ redirecionar se explicitamente false
    if (profile.onboarding_completed === false) {
      console.log("üìù [ROOT-REDIRECT] Usu√°rio no login precisa completar onboarding");
      return <Navigate to="/onboarding" replace />;
    }

    // CORRE√á√ÉO: Todos usu√°rios v√£o para dashboard
    const targetRoute = '/dashboard';
    console.log("‚úÖ [ROOT-REDIRECT] Usu√°rio logado - redirecionando para", targetRoute);
    return <Navigate to={targetRoute} replace />;
  }

  // Redirecionamento padr√£o para root
  if (location.pathname === '/' && user && profile) {
    // Verificar onboarding primeiro - s√≥ redirecionar se explicitamente false
    if (profile.onboarding_completed === false) {
      console.log("üìù [ROOT-REDIRECT] Usu√°rio na root precisa completar onboarding");
      return <Navigate to="/onboarding" replace />;
    }

    // CORRE√á√ÉO: Todos usu√°rios v√£o para dashboard
    const targetRoute = '/dashboard';
    console.log("üîÑ [ROOT-REDIRECT] Root redirect para", targetRoute);
    return <Navigate to={targetRoute} replace />;
  }

  // Fallback para dashboard
  return <Navigate to="/dashboard" replace />;
};

export default RootRedirect;
