
import { useCallback } from 'react';
import { Session, User } from '@supabase/supabase-js';
import { UserProfile } from '@/lib/supabase';
import { fetchUserProfileSecurely, validateUserSession, processUserProfile } from '@/hooks/auth/utils/authSessionUtils';

interface UseAuthStateManagerParams {
  setSession: React.Dispatch<React.SetStateAction<Session | null>>;
  setUser: React.Dispatch<React.SetStateAction<User | null>>;
  setProfile: React.Dispatch<React.SetStateAction<UserProfile | null>>;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
}

export const useAuthStateManager = ({
  setSession,
  setUser,
  setProfile,
  setIsLoading,
}: UseAuthStateManagerParams) => {

  const setupAuthSession = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ [AUTH-STATE] Iniciando setup da sess√£o');
      setIsLoading(true);

      // Validar sess√£o atual
      const { session, user } = await validateUserSession();
      
      if (!session || !user) {
        console.log('‚ùå [AUTH-STATE] Sess√£o inv√°lida ou inexistente');
        setSession(null);
        setUser(null);
        setProfile(null);
        setIsLoading(false);
        return;
      }

      console.log(`‚úÖ [AUTH-STATE] Sess√£o v√°lida para: ${user.email}`);
      
      // Definir sess√£o e usu√°rio imediatamente
      setSession(session);
      setUser(user);

      // Buscar perfil do usu√°rio
      try {
        const profile = await fetchUserProfileSecurely(user.id);
        
        if (profile) {
          console.log(`üë§ [AUTH-STATE] Perfil carregado: ${profile.name}`);
          setProfile(profile);
        } else {
          console.log('‚ö†Ô∏è [AUTH-STATE] Perfil n√£o encontrado, tentando processar...');
          
          // Tentar processar/criar perfil
          const processedProfile = await processUserProfile(
            user.id,
            user.email,
            user.user_metadata?.name || null
          );
          
          if (processedProfile) {
            console.log(`‚úÖ [AUTH-STATE] Perfil processado: ${processedProfile.name}`);
            setProfile(processedProfile);
          } else {
            console.warn('‚ö†Ô∏è [AUTH-STATE] N√£o foi poss√≠vel obter perfil, mas mantendo login');
            // Manter sess√£o mesmo sem perfil completo
            setProfile(null);
          }
        }
      } catch (profileError) {
        console.error('‚ùå [AUTH-STATE] Erro ao buscar perfil:', profileError);
        // N√£o bloquear login por erro de perfil
        setProfile(null);
      }

    } catch (error) {
      console.error('üí• [AUTH-STATE] Erro cr√≠tico no setup:', error);
      
      // Em caso de erro cr√≠tico, limpar estado
      setSession(null);
      setUser(null);
      setProfile(null);
    } finally {
      setIsLoading(false);
      console.log('üèÅ [AUTH-STATE] Setup conclu√≠do');
    }
  }, [setSession, setUser, setProfile, setIsLoading]);

  return {
    setupAuthSession,
  };
};
