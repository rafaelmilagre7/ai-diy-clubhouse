
import { useState } from 'react';
import { supabase } from '@/lib/supabase';
import { toast } from 'sonner';

interface RoleIssue {
  user_id: string;
  email: string;
  user_role: string;
  user_role_id: string;
  expected_role_name: string;
  expected_role_id: string;
  issue_type: string;
}

interface AuditResult {
  user_count_by_role: Record<string, number>;
  inconsistencies_count: number;
  total_users: number;
  roles_without_users: string[] | null;
  users_without_roles: number;
}

interface SyncResult {
  success: boolean;
  total_profiles: number;
  profiles_corrected: number;
  message: string;
}

export const useRoleSync = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [issues, setIssues] = useState<RoleIssue[]>([]);
  const [auditData, setAuditData] = useState<AuditResult | null>(null);
  const [hasHealthCheck, setHasHealthCheck] = useState(false);

  // Verifica√ß√£o de sa√∫de do sistema antes de executar opera√ß√µes
  const checkSystemHealth = async (): Promise<boolean> => {
    try {
      const { data, error } = await supabase.rpc('check_system_health');
      
      if (error) {
        console.warn('Sistema de sa√∫de n√£o dispon√≠vel:', error.message);
        return false;
      }
      
      if (data?.database_status !== 'operational') {
        console.warn('Sistema de banco n√£o est√° operacional');
        return false;
      }
      
      setHasHealthCheck(true);
      return true;
    } catch (error) {
      console.warn('Erro na verifica√ß√£o de sa√∫de:', error);
      return false;
    }
  };

  const validateRoles = async () => {
    try {
      setIsLoading(true);
      
      // Verificar sa√∫de do sistema primeiro
      const isHealthy = await checkSystemHealth();
      if (!isHealthy) {
        toast.warning('‚ö†Ô∏è Sistema inst√°vel - pulando valida√ß√£o autom√°tica');
        return [];
      }
      
      console.log('Iniciando valida√ß√£o de roles...');
      const { data, error } = await supabase.rpc('validate_profile_roles');
      
      if (error) {
        // Tratamento espec√≠fico para diferentes tipos de erro
        if (error.code === 'PGRST116' || error.message.includes('function') || error.message.includes('does not exist')) {
          console.warn('Fun√ß√£o validate_profile_roles n√£o dispon√≠vel:', error.message);
          toast.info('‚ÑπÔ∏è Funcionalidade de valida√ß√£o n√£o est√° dispon√≠vel no momento');
          return [];
        }
        
        if (error.message.includes('permission denied')) {
          console.warn('Sem permiss√£o para validar roles:', error.message);
          toast.warning('‚ö†Ô∏è Sem permiss√£o para executar valida√ß√£o');
          return [];
        }
        
        console.error('Erro na valida√ß√£o de roles:', error);
        throw error;
      }
      
      console.log('Resultado da valida√ß√£o:', data);
      setIssues(data || []);
      
      const issueCount = data?.length || 0;
      if (issueCount === 0) {
        toast.success('‚úÖ Valida√ß√£o conclu√≠da: Nenhuma inconsist√™ncia encontrada!');
      } else {
        toast.warning(`‚ö†Ô∏è Valida√ß√£o conclu√≠da: ${issueCount} inconsist√™ncia(s) encontrada(s)`);
      }
      
      return data || [];
    } catch (error: any) {
      // N√£o mostrar toast de erro para falhas silenciosas
      if (!error.message?.includes('permission denied') && !error.message?.includes('does not exist')) {
        console.error('Erro ao validar roles:', error);
        toast.error('Erro ao validar roles do sistema');
      }
      
      // Retornar array vazio em vez de propagar erro
      setIssues([]);
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  const auditRoles = async () => {
    try {
      setIsLoading(true);
      
      // Verificar sa√∫de do sistema primeiro
      const isHealthy = await checkSystemHealth();
      if (!isHealthy) {
        toast.warning('‚ö†Ô∏è Sistema inst√°vel - pulando auditoria autom√°tica');
        return null;
      }
      
      console.log('Iniciando auditoria de roles...');
      const { data, error } = await supabase.rpc('audit_role_assignments');
      
      if (error) {
        // Tratamento espec√≠fico para diferentes tipos de erro
        if (error.code === 'PGRST116' || error.message.includes('function') || error.message.includes('does not exist')) {
          console.warn('Fun√ß√£o audit_role_assignments n√£o dispon√≠vel:', error.message);
          toast.info('‚ÑπÔ∏è Funcionalidade de auditoria n√£o est√° dispon√≠vel no momento');
          return null;
        }
        
        if (error.message.includes('permission denied')) {
          console.warn('Sem permiss√£o para auditar roles:', error.message);
          toast.warning('‚ö†Ô∏è Sem permiss√£o para executar auditoria');
          return null;
        }
        
        console.error('Erro na auditoria de roles:', error);
        throw error;
      }
      
      console.log('Resultado da auditoria:', data);
      
      if (data) {
        // A fun√ß√£o agora retorna JSONB diretamente
        setAuditData(data);
        toast.success('üìä Auditoria de roles conclu√≠da com sucesso');
        return data;
      }
      
      toast.info('Auditoria executada, mas nenhum dado retornado');
      return null;
    } catch (error: any) {
      // N√£o mostrar toast de erro para falhas silenciosas
      if (!error.message?.includes('permission denied') && !error.message?.includes('does not exist')) {
        console.error('Erro ao auditar roles:', error);
        toast.error('Erro ao executar auditoria do sistema');
      }
      
      // Retornar null em vez de propagar erro
      setAuditData(null);
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const syncRoles = async () => {
    try {
      setIsLoading(true);
      
      // Verificar sa√∫de do sistema primeiro
      const isHealthy = await checkSystemHealth();
      if (!isHealthy) {
        toast.warning('‚ö†Ô∏è Sistema inst√°vel - n√£o √© seguro executar sincroniza√ß√£o');
        return { success: false, total_profiles: 0, profiles_corrected: 0, message: 'Sistema inst√°vel' };
      }
      
      console.log('Iniciando sincroniza√ß√£o de roles...');
      const { data, error } = await supabase.rpc('sync_profile_roles');
      
      if (error) {
        // Tratamento espec√≠fico para diferentes tipos de erro
        if (error.code === 'PGRST116' || error.message.includes('function') || error.message.includes('does not exist')) {
          console.warn('Fun√ß√£o sync_profile_roles n√£o dispon√≠vel:', error.message);
          toast.info('‚ÑπÔ∏è Funcionalidade de sincroniza√ß√£o n√£o est√° dispon√≠vel no momento');
          return { success: false, total_profiles: 0, profiles_corrected: 0, message: 'Fun√ß√£o n√£o dispon√≠vel' };
        }
        
        if (error.message.includes('permission denied')) {
          console.warn('Sem permiss√£o para sincronizar roles:', error.message);
          toast.warning('‚ö†Ô∏è Sem permiss√£o para executar sincroniza√ß√£o');
          return { success: false, total_profiles: 0, profiles_corrected: 0, message: 'Sem permiss√£o' };
        }
        
        console.error('Erro na sincroniza√ß√£o de roles:', error);
        throw error;
      }
      
      console.log('Resultado da sincroniza√ß√£o:', data);
      
      if (data) {
        toast.success(`üîÑ ${data.message}`);
        
        // Revalidar ap√≥s sincroniza√ß√£o para atualizar dados
        console.log('Revalidando ap√≥s sincroniza√ß√£o...');
        try {
          await Promise.all([validateRoles(), auditRoles()]);
        } catch (revalidationError) {
          console.warn('Erro na revalida√ß√£o p√≥s-sincroniza√ß√£o:', revalidationError);
          // N√£o propagar erro de revalida√ß√£o
        }
      }
      
      return data as SyncResult;
    } catch (error: any) {
      // N√£o mostrar toast de erro para falhas silenciosas
      if (!error.message?.includes('permission denied') && !error.message?.includes('does not exist')) {
        console.error('Erro ao sincronizar roles:', error);
        toast.error('Erro ao sincronizar roles do sistema');
      }
      
      return { success: false, total_profiles: 0, profiles_corrected: 0, message: 'Erro na sincroniza√ß√£o' };
    } finally {
      setIsLoading(false);
    }
  };

  const runFullDiagnostic = async () => {
    try {
      setIsLoading(true);
      
      // Verificar sa√∫de do sistema primeiro
      const isHealthy = await checkSystemHealth();
      if (!isHealthy) {
        console.warn('Sistema n√£o est√° saud√°vel, executando diagn√≥stico limitado');
        toast.warning('‚ö†Ô∏è Executando diagn√≥stico limitado - sistema inst√°vel');
        return {
          audit: null,
          issues: [],
          hasIssues: false
        };
      }
      
      toast.info('üîç Executando diagn√≥stico completo do sistema...');
      
      // Executar auditoria e valida√ß√£o em paralelo com tratamento de erro individual
      const results = await Promise.allSettled([
        auditRoles(),
        validateRoles()
      ]);
      
      const auditResult = results[0].status === 'fulfilled' ? results[0].value : null;
      const validationResult = results[1].status === 'fulfilled' ? results[1].value : [];
      
      // Log dos erros se houver
      if (results[0].status === 'rejected') {
        console.warn('Auditoria falhou:', results[0].reason);
      }
      if (results[1].status === 'rejected') {
        console.warn('Valida√ß√£o falhou:', results[1].reason);
      }
      
      const hasIssues = validationResult.length > 0;
      
      if (hasIssues) {
        toast.warning(
          `‚ö†Ô∏è Diagn√≥stico conclu√≠do: ${validationResult.length} inconsist√™ncia(s) detectada(s)`
        );
      } else {
        toast.success('‚úÖ Diagn√≥stico conclu√≠do: Sistema de roles est√° √≠ntegro!');
      }
      
      return {
        audit: auditResult,
        issues: validationResult,
        hasIssues
      };
    } catch (error: any) {
      console.error('Erro no diagn√≥stico completo:', error);
      
      // N√£o mostrar toast de erro se for problema de sistema n√£o dispon√≠vel
      if (!error.message?.includes('permission denied') && !error.message?.includes('does not exist')) {
        toast.error('Erro ao executar diagn√≥stico completo');
      }
      
      // Retornar estado seguro em vez de propagar erro
      return {
        audit: null,
        issues: [],
        hasIssues: false
      };
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isLoading,
    issues,
    auditData,
    hasHealthCheck,
    validateRoles,
    auditRoles,
    syncRoles,
    runFullDiagnostic,
    checkSystemHealth
  };
};
