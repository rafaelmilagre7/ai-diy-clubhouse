
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface DiagnosticResult {
  success: boolean;
  message: string;
  details?: any;
  environment?: string;
  recommendations?: string[];
  errors?: string[];
}

export const useWhatsAppDiagnostics = () => {
  const [isRunning, setIsRunning] = useState(false);

  const runFullDiagnostic = async (): Promise<DiagnosticResult> => {
    setIsRunning(true);
    
    try {
      console.log('üîß [Diagn√≥stico] Iniciando diagn√≥stico completo...');
      
      // Detectar ambiente
      const hostname = window.location.hostname;
      const isLocal = hostname === 'localhost' || hostname === '127.0.0.1';
      const environment = isLocal ? 'local' : 'production';
      
      console.log(`üîß [Diagn√≥stico] Ambiente detectado: ${environment}`);
      
      const errors: string[] = [];
      let overallSuccess = true;
      const details: any = { environment };

      // Teste 1: Verificar se Edge Functions est√£o dispon√≠veis e configura√ß√£o
      console.log('üîß [Diagn√≥stico] Testando Edge Function whatsapp-config-check...');
      
      try {
        const { data: configData, error: configError } = await supabase.functions.invoke('whatsapp-config-check', {
          body: { action: 'check_config' }
        });

        if (configError) {
          console.error('‚ùå [Diagn√≥stico] Erro na Edge Function config:', configError);
          throw new Error(`Edge Function Error: ${configError.message}`);
        }

        console.log('‚úÖ [Diagn√≥stico] Edge Function respondeu:', configData);
        details.configCheck = configData;
        
        if (!configData.isValid) {
          overallSuccess = false;
          errors.push('Configura√ß√£o WhatsApp incompleta - verifique as vari√°veis de ambiente');
        }

      } catch (error: any) {
        console.error('‚ùå [Diagn√≥stico] Falha na Edge Function:', error);
        overallSuccess = false;
        details.configError = {
          message: error.message,
          name: error.name
        };
        
        if (environment === 'production') {
          errors.push('Edge Functions n√£o est√£o respondendo no ambiente de produ√ß√£o');
          errors.push('Verifique se as fun√ß√µes foram deployadas corretamente');
        } else {
          errors.push('Edge Functions n√£o est√£o dispon√≠veis no ambiente local');
          errors.push('Execute: supabase start');
        }
      }

      // Teste 2: Verificar conectividade com WhatsApp API (se configura√ß√£o OK)
      if (details.configCheck?.isValid) {
        console.log('üîß [Diagn√≥stico] Testando conex√£o com WhatsApp API...');
        
        try {
          const { data: connectionData, error: connectionError } = await supabase.functions.invoke('whatsapp-config-check', {
            body: { action: 'test_connection' }
          });

          if (connectionError) {
            throw new Error(`Connection Test Error: ${connectionError.message}`);
          }

          console.log('‚úÖ [Diagn√≥stico] Teste de conex√£o:', connectionData);
          details.connectionTest = connectionData;
          
          if (!connectionData.success) {
            overallSuccess = false;
            errors.push(`Falha na conex√£o com WhatsApp API: ${connectionData.message}`);
          }

        } catch (error: any) {
          console.error('‚ùå [Diagn√≥stico] Erro no teste de conex√£o:', error);
          details.connectionError = {
            message: error.message,
            name: error.name
          };
          errors.push('Falha no teste de conex√£o com WhatsApp API');
        }
      }

      // Teste 3: Verificar configura√ß√£o do Supabase
      console.log('üîß [Diagn√≥stico] Verificando conex√£o com Supabase...');
      
      try {
        const { data: user, error: userError } = await supabase.auth.getUser();
        
        if (userError) {
          throw new Error(`Supabase Auth Error: ${userError.message}`);
        }
        
        details.supabaseAuth = { 
          connected: !!user.user,
          userId: user.user?.id?.substring(0, 8) + '***'
        };
        
        if (!user.user) {
          errors.push('Usu√°rio n√£o est√° autenticado no Supabase');
        } else {
          console.log('‚úÖ [Diagn√≥stico] Supabase conectado:', user.user.id.substring(0, 8) + '***');
        }
        
      } catch (error: any) {
        console.error('‚ùå [Diagn√≥stico] Erro no Supabase:', error);
        overallSuccess = false;
        details.supabaseError = {
          message: error.message,
          name: error.name
        };
        errors.push('Falha na conex√£o com Supabase');
      }

      // Gerar recomenda√ß√µes baseadas nos erros
      const recommendations: string[] = [];
      
      if (errors.some(e => e.includes('Edge Functions'))) {
        if (environment === 'local') {
          recommendations.push('Execute: supabase start');
          recommendations.push('Verifique se todas as Edge Functions est√£o deployadas localmente');
        } else {
          recommendations.push('Verifique o status das Edge Functions no dashboard do Supabase');
          recommendations.push('Confirme se as fun√ß√µes foram deployadas na produ√ß√£o');
        }
      }
      
      if (errors.some(e => e.includes('vari√°veis de ambiente'))) {
        recommendations.push('Configure WHATSAPP_API_TOKEN no Supabase');
        recommendations.push('Configure WHATSAPP_PHONE_NUMBER_ID no Supabase');
        recommendations.push('Configure WHATSAPP_BUSINESS_ID no Supabase');
        recommendations.push('Configure WHATSAPP_WEBHOOK_TOKEN no Supabase');
      }
      
      if (errors.some(e => e.includes('WhatsApp API'))) {
        recommendations.push('Verifique se o token do WhatsApp √© v√°lido');
        recommendations.push('Confirme se o Phone Number ID est√° correto');
        recommendations.push('Verifique as permiss√µes da aplica√ß√£o no Meta Developers');
      }

      const result: DiagnosticResult = {
        success: overallSuccess,
        message: overallSuccess 
          ? 'Diagn√≥stico conclu√≠do - sistema funcionando corretamente' 
          : `Diagn√≥stico identificou ${errors.length} problema(s)`,
        details,
        environment,
        errors: errors.length > 0 ? errors : undefined,
        recommendations: recommendations.length > 0 ? recommendations : undefined
      };

      console.log('üîß [Diagn√≥stico] Resultado final:', result);
      return result;

    } catch (error: any) {
      console.error('‚ùå [Diagn√≥stico] Erro cr√≠tico:', error);
      
      return {
        success: false,
        message: `Erro cr√≠tico no diagn√≥stico: ${error.message}`,
        details: { 
          criticalError: {
            message: error.message,
            name: error.name,
            stack: error.stack?.split('\n').slice(0, 5)
          }
        },
        errors: [`Erro cr√≠tico: ${error.message}`]
      };
    } finally {
      setIsRunning(false);
    }
  };

  const testWhatsAppCredentials = async (credentials: {
    token: string;
    phoneId: string;
  }): Promise<DiagnosticResult> => {
    try {
      console.log('üîß [Teste Credenciais] Validando credenciais WhatsApp...');
      
      // Valida√ß√£o b√°sica
      if (!credentials.token || !credentials.phoneId) {
        return {
          success: false,
          message: 'Token e Phone ID s√£o obrigat√≥rios',
          errors: ['Forne√ßa as credenciais v√°lidas do WhatsApp']
        };
      }

      if (credentials.token.length < 50) {
        return {
          success: false,
          message: 'Token parece ser muito curto',
          errors: ['Verifique se o token est√° completo']
        };
      }

      if (!/^\d+$/.test(credentials.phoneId)) {
        return {
          success: false,
          message: 'Phone ID deve conter apenas n√∫meros',
          errors: ['Verifique o formato do Phone Number ID']
        };
      }

      console.log('‚úÖ [Teste Credenciais] Credenciais v√°lidas no formato b√°sico');

      return {
        success: true,
        message: 'Credenciais parecem v√°lidas (teste b√°sico)',
        details: { 
          tokenLength: credentials.token.length,
          phoneIdLength: credentials.phoneId.length 
        }
      };

    } catch (error: any) {
      console.error('‚ùå [Teste Credenciais] Erro:', error);
      
      return {
        success: false,
        message: `Erro na valida√ß√£o: ${error.message}`,
        details: { error: error.message }
      };
    }
  };

  return {
    runFullDiagnostic,
    testWhatsAppCredentials,
    isRunning
  };
};
