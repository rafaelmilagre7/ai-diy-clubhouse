
import { useState, useCallback } from 'react';
import { supabase } from '@/lib/supabase';
import { toast } from 'sonner';

interface SecurityStatusRow {
  table_name: string;
  rls_enabled: boolean;
  has_policies: boolean;
  policy_count: number;
  security_status: string;
}

export const useSecurityStatus = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [securityData, setSecurityData] = useState<SecurityStatusRow[]>([]);
  const [error, setError] = useState<string | null>(null);

  const checkSecurityStatus = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      console.log('üîç [SECURITY] Verificando status final ap√≥s corre√ß√£o definitiva...');
      
      const { data, error } = await supabase.rpc('check_rls_status');
      
      if (error) {
        console.error('‚ùå [SECURITY] Erro ao verificar status:', error);
        setError(error.message);
        toast.error(`Erro ao verificar seguran√ßa: ${error.message}`);
        throw error;
      }
      
      console.log('‚úÖ [SECURITY] Status final verificado:', data);
      setSecurityData(data || []);
      
      // An√°lise detalhada dos resultados
      const totalTables = data?.length || 0;
      const secureTables = data?.filter(row => 
        row.security_status.includes('SEGURO')
      ) || [];
      const rlsDisabledTables = data?.filter(row => 
        row.security_status.includes('RLS DESABILITADO')
      ) || [];
      const unprotectedTables = data?.filter(row => 
        row.security_status.includes('SEM PROTE√á√ÉO')
      ) || [];
      
      console.log('üìä [SECURITY] An√°lise final:', {
        total: totalTables,
        seguras: secureTables.length,
        rlsDesabilitado: rlsDisabledTables.length,
        semProtecao: unprotectedTables.length
      });
      
      if (unprotectedTables.length > 0) {
        toast.error(
          `üî¥ CR√çTICO: ${unprotectedTables.length} tabelas ainda sem prote√ß√£o: ${unprotectedTables.map(t => t.table_name).join(', ')}`
        );
      } else if (rlsDisabledTables.length > 0) {
        toast.warning(
          `‚ö†Ô∏è ${rlsDisabledTables.length} tabelas com RLS desabilitado (mas com pol√≠ticas)`
        );
      } else {
        toast.success('üéâ EXCELENTE! Todas as tabelas est√£o completamente seguras com RLS!');
      }
      
      // Log detalhado das tabelas problem√°ticas
      if (rlsDisabledTables.length > 0) {
        console.log('‚ö†Ô∏è [SECURITY] Tabelas com RLS desabilitado:', 
          rlsDisabledTables.map(t => t.table_name));
      }
      if (unprotectedTables.length > 0) {
        console.log('üî¥ [SECURITY] Tabelas sem prote√ß√£o:', 
          unprotectedTables.map(t => t.table_name));
      }
      
      return data || [];
    } catch (error: any) {
      console.error('‚ùå [SECURITY] Erro na verifica√ß√£o final:', error);
      setError(error.message || 'Erro desconhecido');
      toast.error('Erro ao verificar status final de seguran√ßa');
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  return {
    isLoading,
    securityData,
    error,
    checkSecurityStatus
  };
};
