
import { UserProfile } from '@/lib/supabase';

/**
 * Utilit√°rios para sistema de onboarding - FASE 4
 * Sistema inteligente de decis√£o com crit√©rios refinados
 */

// Lista de usu√°rios com bypass total (super admins)
const BYPASS_USERS = [
  'rafael@viverdeia.ai'
];

/**
 * Verifica se o usu√°rio deve fazer bypass total do onboarding
 * FASE 4: Crit√©rios mais espec√≠ficos
 */
export const shouldBypassOnboarding = (
  email: string | null | undefined,
  profile: UserProfile | null
): boolean => {
  // Bypass para super admins
  if (email && BYPASS_USERS.includes(email)) {
    console.log('üöÄ Bypass total para super admin:', email);
    return true;
  }

  // Bypass para admins da plataforma
  if (profile?.role === 'admin') {
    console.log('üîë Bypass total para admin:', email);
    return true;
  }

  // Bypass para usu√°rios formacao (eles t√™m √°rea pr√≥pria)
  if (profile?.role === 'formacao') {
    console.log('üìö Bypass para usu√°rio formacao:', email);
    return true;
  }

  // Bypass se j√° completou onboarding
  if (profile?.onboarding_completed_at) {
    console.log('‚úÖ Bypass - onboarding j√° conclu√≠do:', email);
    return true;
  }

  // Bypass se pulou onboarding (respeitando escolha do usu√°rio)
  if (profile?.onboarding_skipped_at) {
    console.log('‚è≠Ô∏è Bypass - usu√°rio pulou onboarding:', email);
    return true;
  }

  return false;
};

/**
 * Verifica se o usu√°rio √© considerado "novo" e DEVE ver o onboarding
 * FASE 4: Crit√©rios mais refinados para novos usu√°rios
 */
export const shouldShowOnboarding = (
  profile: UserProfile | null
): boolean => {
  if (!profile) return false;

  // Apenas para membros (role 'membro_club' ou 'member')
  if (profile.role !== 'membro_club' && profile.role !== 'member') {
    return false;
  }

  // Se j√° completou ou pulou, n√£o mostrar
  if (profile.onboarding_completed_at || profile.onboarding_skipped_at) {
    return false;
  }

  // Crit√©rio: usu√°rio criado nos √∫ltimos 7 dias
  const accountAge = new Date().getTime() - new Date(profile.created_at).getTime();
  const daysSinceCreation = Math.floor(accountAge / (24 * 60 * 60 * 1000));
  
  if (daysSinceCreation <= 7) {
    console.log(`üìã Novo usu√°rio (${daysSinceCreation} dias) - mostrar onboarding:`, profile.email);
    return true;
  }

  console.log(`üë§ Usu√°rio existente (${daysSinceCreation} dias) - onboarding opcional:`, profile.email);
  return false;
};

/**
 * Verifica se deve sugerir onboarding (usu√°rio pode escolher)
 * FASE 4: Para usu√°rios que podem se beneficiar mas n√£o s√£o obrigat√≥rios
 */
export const shouldSuggestOnboarding = (
  profile: UserProfile | null
): boolean => {
  if (!profile || (profile.role !== 'membro_club' && profile.role !== 'member')) return false;
  
  // Se j√° completou ou pulou, n√£o sugerir
  if (profile.onboarding_completed_at || profile.onboarding_skipped_at) {
    return false;
  }

  // Sugerir para usu√°rios entre 7-30 dias
  const accountAge = new Date().getTime() - new Date(profile.created_at).getTime();
  const daysSinceCreation = Math.floor(accountAge / (24 * 60 * 60 * 1000));
  
  return daysSinceCreation > 7 && daysSinceCreation <= 30;
};

/**
 * Determina a a√ß√£o do onboarding baseada no perfil do usu√°rio
 * FASE 4: Sistema refinado de decis√£o
 */
export const getOnboardingAction = (
  email: string | null | undefined,
  profile: UserProfile | null
): 'bypass' | 'required' | 'suggested' | 'optional' => {
  if (shouldBypassOnboarding(email, profile)) {
    return 'bypass';
  }

  if (shouldShowOnboarding(profile)) {
    return 'required';
  }

  if (shouldSuggestOnboarding(profile)) {
    return 'suggested';
  }

  return 'optional';
};

/**
 * Log de diagn√≥stico para debug - FASE 4
 */
export const logOnboardingDecision = (
  email: string | null | undefined,
  profile: UserProfile | null,
  action: string
) => {
  const accountAge = profile ? 
    Math.floor((new Date().getTime() - new Date(profile.created_at).getTime()) / (24 * 60 * 60 * 1000)) : 
    null;

  console.log('üéØ Decis√£o de Onboarding FASE 4:', {
    email,
    role: profile?.role,
    createdAt: profile?.created_at,
    accountAgeDays: accountAge,
    hasCompletedOnboarding: !!profile?.onboarding_completed_at,
    hasSkippedOnboarding: !!profile?.onboarding_skipped_at,
    action,
    timestamp: new Date().toISOString()
  });
};

/**
 * Verifica se o usu√°rio tem onboarding pendente
 * FASE 4: Para uso em dashboards e sugest√µes
 */
export const hasOnboardingPending = (profile: UserProfile | null): boolean => {
  if (!profile || (profile.role !== 'membro_club' && profile.role !== 'member')) return false;
  return !profile.onboarding_completed_at && !profile.onboarding_skipped_at;
};

/**
 * Calcula estat√≠sticas do onboarding para analytics
 * FASE 4: Para admin e m√©tricas
 */
export const getOnboardingStats = (profile: UserProfile | null) => {
  if (!profile) return null;

  const accountAge = Math.floor((new Date().getTime() - new Date(profile.created_at).getTime()) / (24 * 60 * 60 * 1000));
  
  return {
    accountAgeDays: accountAge,
    isNewUser: accountAge <= 7,
    hasCompleted: !!profile.onboarding_completed_at,
    hasSkipped: !!profile.onboarding_skipped_at,
    isPending: hasOnboardingPending(profile),
    shouldSuggest: shouldSuggestOnboarding(profile)
  };
};
